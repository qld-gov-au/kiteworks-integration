name: Package Publish
run-name: "Deploy from \"${{ github.ref_name }}\" to version \"${{ github.event.inputs.releaseVersion }}\" by @${{ github.actor }}, dryrun: ${{ github.event.inputs.publish == 'No' }}"

on:
  push:
    #On versioned releases
    tags:
      - '*.*.*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  publish:
    name: "Publish version"
    runs-on: ubuntu-latest
    environment:
      name: OSSRH
      url: https://repo1.maven.org/maven2/au/gov/qld/services/kiteworks/
    permissions:
      contents: write
      packages: write
      pages: write
      actions: write
      id-token: write
    env:
      SEGMENT_DOWNLOAD_TIMEOUT_MINS: '5'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          fetch-depth: 3

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version: '21'
          cache: 'maven'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Dump event context for debugging
        continue-on-error: true  # Debugging output only, and this annoyingly fails when the commit messge has a (
        run: |
          echo '${{ github.event_name }} for ${{ github.ref_type }} ${{ github.ref_name }} or ${{ github.event.ref }}'
          # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
          echo 'github.event:'
          echo '${{ toJSON(github.event) }}'

      - name: Dump github context for debugging
        continue-on-error: true  # Debugging output only, and this annoyingly fails when the commit message has a (
        run: |
          echo '${{ toJSON(github) }}'

      - name: Try to set a master password
        run: |
          MASTERPWD=$(openssl rand -base64 25)
          echo "<settingsSecurity> <master>$(mvn --encrypt-master-password "$MASTERPWD")</master></settingsSecurity>" > $HOME/.m2/settings-security.xml
          # echo "MASTERPWD=\"$MASTERPWD\"" >> $GITHUB_ENV
          # The master password isn't actually used, but the maven-gpg-plugin complains otherwise.

      - name: Git & Maven Status
        run: |
          mvn -version
          git remote -v
          git status --untracked-files --ignored
          git log -3 --no-color --decorate

      - name: Mvn Effective POM
        run: mvn -Prelease -N help:effective-pom
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Mvn Effective Settings
        run: mvn -Prelease -N help:effective-settings
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Set up Git username and email
        run: |
          git config --global user.name "${{ vars.GPG_NAME }}"
          git config --global user.email "${{ secrets.GPG_EMAIL }}"
          echo "${{ secrets.GPG_KEY }}" | base64 --decode | gpg --import --no-tty --batch --yes
          #gpg -v --refresh-keys #only needed for external gpg keys
          gpg --list-secret-keys --keyid-format LONG
          git config --global user.signingkey ${{ secrets.GPG_KEY_ID }}
          git config --global commit.gpgSign true
          git config --global tag.gpgSign true
          git config --global gpg.program gpg

      - name: Check that we are on snapshot branch before creating the release
        run: |
          echo "Version: "
          mvn -Prelease help:evaluate -Dexpression=project.version -q -DforceStdout
          mvn -Prelease help:evaluate -Dexpression=project.version -q -DforceStdout | egrep -- '-SNAPSHOT$' > /dev/null || exit 1
          # unfortunately, this would require a snapshot parent if just called from the command line, so we cannot use it: :-(
          # mvn org.apache.maven.plugins:maven-enforcer-plugin:3.2.1:enforce -Drules=requireSnapshotVersion

      - name: Verify git is clean
        run: |
          git status --untracked-files --ignored
          git log -3 --no-color --decorate
          git clean -f -d

      - name: Publish package
        run: mvn -Prelease --batch-mode clean deploy -DsignTag=true
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KITEWORKS_BASE_URI: ${{ secrets.KITEWORKS_BASE_URI }}
          KITEWORKS_CLIENT_ID: ${{ secrets.KITEWORKS_CLIENT_ID }}
          KITEWORKS_CLIENT_SECRET: ${{ secrets.KITEWORKS_CLIENT_SECRET }}
          KITEWORKS_SIGNATURE_KEY: ${{ secrets.KITEWORKS_SIGNATURE_KEY }}
          KITEWORKS_USER_ID: ${{ secrets.KITEWORKS_USER_ID }}
          KITEWORKS_CLIENT_APP_SCOPES: ${{ secrets.KITEWORKS_CLIENT_APP_SCOPES }}
          KITEWORKS_REDIRECT_URI: ${{ secrets.KITEWORKS_REDIRECT_URI }}
          KITEWORKS_ACCESS_TOKEN_URI: ${{ secrets.KITEWORKS_ACCESS_TOKEN_URI }}
          KITEWORKS_USERNAME: ${{ secrets.KITEWORKS_USERNAME }}
          KITEWORKS_PASSWORD: ${{ secrets.KITEWORKS_PASSWORD }}
          KITEWORKS_ACTIVITY_LIST_UUID: ${{ secrets.KITEWORKS_ACTIVITY_LIST_UUID }}
          KITEWORKS_ACTIVITY_LIST2_UUID: ${{ secrets.KITEWORKS_ACTIVITY_LIST2_UUID }}

