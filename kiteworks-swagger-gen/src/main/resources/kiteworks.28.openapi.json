{
  "openapi": "3.0.2",
  "info": {
    "version": "28",
    "title": "Kiteworks API Documentation",
    "description":  "Kiteworks Version 9.0.1 - 4 June 2025"
  },
  "servers": [
    {
      "url": "https://filetransfer.services.qld.gov.au/"
    }
  ],
  "security": [
    {
      "OAuth2": [
        "*/*/*"
      ]
    }
  ],
  "paths": {
    "/rest/activities": {
      "get": {
        "tags": [
          "activities"
        ],
        "summary": "Return the list of all Activities",
        "description": "Return the list of all Activities.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "noDayBack",
            "description": "Number of days back to search",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "startDate",
            "description": "Start date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "description": "End date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "All or my activities",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "my"
              ]
            }
          },
          {
            "in": "query",
            "name": "search",
            "description": "Search by mail body, subject and sender/recipients",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Activity type",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "folder_changes",
                "file_changes",
                "user_preferences",
                "mail",
                "tasks",
                "comments",
                "kitepoint"
              ]
            }
          },
          {
            "in": "query",
            "name": "transactionId",
            "description": "Transaction ID associated with the activities",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "created:asc",
                "created:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/admin/availableLdapGroups": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Returns a list of available LDAP groups.",
        "description": "Returns a list of available LDAP groups.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AvailableLdapGroup"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "description": "Text to search for in cn, dn or description.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "name:asc",
                "name:desc",
                "dn:asc",
                "dn:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/admin/clients": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List clients",
        "description": "Return a list of clients",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Client"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Client name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Client name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description:contains",
            "description": "Client description. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "client_id:asc",
                "client_id:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Create a client",
        "description": "Create a new client that will be able to access the kiteworks system.\n    e.g.: A new mobile app that is customized for your company.",
        "responses": {
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED, ERR_INPUT_NOT_INTEGER, ERR_INPUT_MIN_VALUE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_NOT_INTEGER": {
                    "summary": "Input is not a valid integer",
                    "description": "Input is not a valid integer",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_INTEGER",
                        "message": "Input is not a valid integer"
                      }
                    }
                  },
                  "ERR_INPUT_MIN_VALUE": {
                    "summary": "The specified input below the minimum allowed value.",
                    "description": "The specified input below the minimum allowed value.",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_MIN_VALUE",
                        "message": "The specified input below the minimum allowed value."
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Client.Post"
              }
            }
          }
        }
      }
    },
    "/rest/admin/clients/{client_id}/scopes": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List scopes of a client",
        "description": "Return a list of scopes for a specific client.\n    This returns the methods that this client is allowed to use\n    such as folders, files, members, comments, etc.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "description": "ID of the client whose scopes to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/admin/clients/{id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get a client",
        "description": "Return the admin settings of a specified client.\n    e.g.: I want the admin settings for my iOS client; pin timeout, token lifetime, etc., ",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the client to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Update a client",
        "description": "Update the admin settings for the specified client",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the client to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Client.Put"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Delete a client",
        "description": "Delete a client from the client list.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the client to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/admin/devices": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List devices",
        "description": "Return a list of devices. e.g.: Returns a list of devices, per user,\n    that have authenticated on this server.\n    The list includes the name of the device (iPad, iPhone, etc),\n    install tag id, client id, and remote wipe flag.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Device"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "installTagId",
            "description": "Unique identifier of install tag for this Device",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "installTagId:contains",
            "description": "Unique identifier of install tag for this Device. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "description": "Unique identifier of user for this Device",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId:in",
            "description": "Unique identifier of user for this Device. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clientId",
            "description": "Unique identifier of client for this Device",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clientId:contains",
            "description": "Unique identifier of client for this Device. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "installTagId:asc",
                "installTagId:desc",
                "userId:asc",
                "userId:desc",
                "clientId:asc",
                "clientId:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Add a device",
        "description": "Add a device. This method is used when a user logs in to kiteworks\n    to track the device they use.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device.Post"
              }
            }
          }
        }
      }
    },
    "/rest/admin/devices/actions/wipe": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Remote wipe the specified device",
        "description": "Set the remote wipe flag for the specified install_tag_id",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteWipe.Post"
              }
            }
          }
        }
      }
    },
    "/rest/admin/devices/{id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get a device",
        "description": "Return the details of a specified device. Given the device id,\n    return the device name, install tag id, client id, and remote wipe flag.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the device to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Update a device",
        "description": "Update the details of a device. Can change the mobile key store and messaging registration token.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the device to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device.Put"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Delete a device",
        "description": "Delete a device given the client id",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the device to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/admin/devices/{install_tag_id}/wipe": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get the wipe status",
        "description": "Returns the remote wipe status of a specified device identified by install_tag_id",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "install_tag_id",
            "description": "ID of the device to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/admin/hostnames": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List hostnames",
        "description": "Returns a list of hostnames",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hostname"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Deletes list of hostnames",
        "description": "Deletes list of hostnames.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Create an alias hostname",
        "description": "Create an alias hostname.",
        "responses": {
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED, ERR_INPUT_NOT_BOOLEAN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_NOT_BOOLEAN": {
                    "summary": "Input is not a valid boolean",
                    "description": "Input is not a valid boolean",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_BOOLEAN",
                        "message": "Input is not a valid boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hostname.Post"
              }
            }
          }
        }
      }
    },
    "/rest/admin/hostnames/{id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Returns the details of hostname of the specified ID.",
        "description": "Returns the details of hostname of the specified ID.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hostname"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the hostname to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Disable / enable alias hostname",
        "description": "Disable / enable the specified hostname.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the hostname to disable",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hostname.Put"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Mark specified hostname as deleted.",
        "description": "Marks the specified hostname as deleted.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the hostname",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/admin/ldapGroups": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Returns a list of LDAP groups.",
        "description": "Returns a list of LDAP groups that have been enabled through the kiteworks admin.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LdapGroup"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "LDAP group name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "LDAP group name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email",
            "description": "LDAP group Email",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email:contains",
            "description": "LDAP group Email. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc",
                "dn:asc",
                "dn:desc",
                "email:asc",
                "email:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Create an LDAP group",
        "description": "Creates an LDAP group",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED, ERR_INPUT_INVALID_EMAIL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_INVALID_EMAIL": {
                    "summary": "Input is not a valid email",
                    "description": "Input is not a valid email",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_INVALID_EMAIL",
                        "message": "Input is not a valid email"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapGroup.Post"
              }
            }
          }
        }
      }
    },
    "/rest/admin/ldapGroups/{id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Gets an LDAP group",
        "description": "Returns the details of a specified LDAP group. This includes the settings from the admin.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapGroup"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LDAP group to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Updates an LDAP group",
        "description": "Updates an LDAP group",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LDAP to update",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapGroup.Put"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Deletes an LDAP group",
        "description": "Deletes an LDAP group",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LDAP group to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/admin/locations": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Create a location entry.",
        "description": "Creates a location entry by providing a name.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_SYSTEM_ADMIN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_SYSTEM_ADMIN": {
                    "summary": "Authenticated user is not a System Admin",
                    "description": "Authenticated user is not a System Admin",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_SYSTEM_ADMIN",
                        "message": "Authenticated user is not a System Admin"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_FORMAT, ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location.Post"
              }
            }
          }
        }
      }
    },
    "/rest/admin/locations/{id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Return location name.",
        "description": "Returns the name of a specified location.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the location to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Delete a location.",
        "description": "Delete the specified location.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_SYSTEM_ADMIN, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_SYSTEM_ADMIN": {
                    "summary": "Authenticated user is not a System Admin",
                    "description": "Authenticated user is not a System Admin",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_SYSTEM_ADMIN",
                        "message": "Authenticated user is not a System Admin"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the location to remove from",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/admin/mail": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List emails",
        "description": "Returns the list of all emails for this user.\n    This includes sent emails, received emails, draft emails, and request a file emails.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Email"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "senderId",
            "description": "Unique identifier of User who sent Email",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "senderId:in",
            "description": "Unique identifier of User who sent Email. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "date",
            "description": "Email creation date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "date:gt",
            "description": "Email creation date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "date:gte",
            "description": "Email creation date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "date:lt",
            "description": "Email creation date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "date:lte",
            "description": "Email creation date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified_date",
            "description": "Email modification date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified_date:gt",
            "description": "Email modification date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified_date:gte",
            "description": "Email modification date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified_date:lt",
            "description": "Email modification date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified_date:lte",
            "description": "Email modification date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Indicates that Email is deleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "emailPackageId",
            "description": "Email Package unique identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "emailPackageId:in",
            "description": "Email Package unique identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "templateId",
            "description": "Email Template unique identifier",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "templateId:in",
            "description": "Email Template unique identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Email status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "sent",
                "draft",
                "queued",
                "error",
                "self_send",
                "transferring"
              ]
            }
          },
          {
            "in": "query",
            "name": "isPreview",
            "description": "Whether the email is a preview email",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "isUserSent",
            "description": "Whether the email was sent by some user",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "webFormId",
            "description": "Email web form ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "webFormId:contains",
            "description": "Email web form ID. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "date:asc",
                "date:desc",
                "status:asc",
                "status:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/admin/mail/actions/withdrawFiles/users/{userId}": {
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Withdraw all files from the emails of deleted or demoted users",
        "description": "Withdraws all files from the emails of users who have been deleted or demoted.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The unique identifier of the user from whom to withdraw files.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "emailId:in",
            "description": "A list of email ids which will be processed",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/admin/profiles": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List user types (profiles)",
        "description": "Returns a list of user types (profiles) supported by kiteworks. e.g.:\n    Today we return Standard and Restricted",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Profile"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Profile name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Profile name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/admin/profiles/mappingOrder": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get profile mapping order",
        "description": "Get profile mapping order that determines application of filters on login",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileMappingOrder"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Update profile mapping order",
        "description": "Update profile mapping order that determines application of filters on login",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_NOT_BOOLEAN, ERR_INPUT_NOT_ARRAY_OF_INTEGERS, ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_NOT_BOOLEAN": {
                    "summary": "Input is not a valid boolean",
                    "description": "Input is not a valid boolean",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_BOOLEAN",
                        "message": "Input is not a valid boolean"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileMappingOrder.Put"
              }
            }
          }
        }
      }
    },
    "/rest/admin/profiles/mappings": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get profile mapping results for user",
        "description": "Get profile mapping results for user",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileMappingsTest"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "user",
            "description": "User to test mappings for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/admin/profiles/{id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Return an user type",
        "description": "Returns the details of a specified user type. e.g.: Returns user type (profile) id and name.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Profile"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user type (profile) to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/admin/profiles/{id}/mappings": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get profile mapping details",
        "description": "Get profile mapping details for user profile",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileMappings"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the profile to get mapping details for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Update profile mapping details",
        "description": "Update profile mapping details for user profile",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_NOT_BOOLEAN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_NOT_BOOLEAN": {
                    "summary": "Input is not a valid boolean",
                    "description": "Input is not a valid boolean",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_BOOLEAN",
                        "message": "Input is not a valid boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the profile to get mapping details for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileMappingChanges.Put"
              }
            }
          }
        }
      }
    },
    "/rest/admin/profiles/{id}/users": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Return list of users with the specified types",
        "description": "Returns the list of users who have the specified type.\n    e.g.: Return me the user names and email addresses of all the Restricted Users.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user type (profile) to retrieve users for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "email",
            "description": "Filter users based on their email address.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email:contains",
            "description": "Filter users based on their email address.. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Filter users based on their full name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Filter users based on their full name.. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "Filter users based on their metadata information.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "metadataContains",
            "description": "Filter users whose metadata contains the specified characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Filter users based on whether they have been deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "active",
            "description": "Filter users based on whether they are active in the system.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "verified",
            "description": "Filter users based on their verification status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "suspended",
            "description": "Filter users based on whether they are suspended.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "isRecipient",
            "description": "Filter users who are recipients of specific items.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "allowsCollaboration",
            "description": "Filter users whose profiles allow collaboration access.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Filter users based on the creation date of their account.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "created:asc",
                "created:desc",
                "email:asc",
                "email:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locate_id",
            "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Bulk update user types (profiles)",
        "description": "Bulk update the types (profiles) of users.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_NOT_BOOLEAN, ERR_INPUT_ATTRIBUTE_FORBIDDEN, ERR_INPUT_REQUIRED, ERR_INPUT_NOT_STRING",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_NOT_BOOLEAN": {
                    "summary": "Input is not a valid boolean",
                    "description": "Input is not a valid boolean",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_BOOLEAN",
                        "message": "Input is not a valid boolean"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user type (profile).",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of user IDs to be assigned to the user type (profile).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDemoteOptions.Post"
              }
            }
          }
        }
      }
    },
    "/rest/admin/sources": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List all added sources",
        "description": "Returns a list of all available ECM sources.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Source"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "include_kw",
            "description": "Include KW",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Add assigned ECM source",
        "description": "Add assigned source.",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source.Post"
              }
            }
          }
        }
      }
    },
    "/rest/admin/sources/{id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Returns requested assigned ECM source",
        "description": "Returns requested assigned source.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the assigned source to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Updates details of the specified ECM source",
        "description": "Updates requested source.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the source to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source.Put"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Deletes specified assigned source",
        "description": "Deletes specified assigned source.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_SYSTEM_ADMIN, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_SYSTEM_ADMIN": {
                    "summary": "Authenticated user is not a System Admin",
                    "description": "Authenticated user is not a System Admin",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_SYSTEM_ADMIN",
                        "message": "Authenticated user is not a System Admin"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the assigned source to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/admin/users": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get a list of Users",
        "description": "Returns a list of Users in the system. The user must be an administrator with access to `User Management.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "description": "Filter users based on their email address.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email:contains",
            "description": "Filter users based on their email address.. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Filter users based on their full name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Filter users based on their full name.. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "Filter users based on their metadata information.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "metadataContains",
            "description": "Filter users whose metadata contains the specified characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Filter users based on whether they have been deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "active",
            "description": "Filter users based on whether they are active in the system.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "verified",
            "description": "Filter users based on their verification status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "suspended",
            "description": "Filter users based on whether they are suspended.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "isRecipient",
            "description": "Filter users who are recipients of specific items.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "allowsCollaboration",
            "description": "Filter users whose profiles allow collaboration access.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Filter users based on the creation date of their account.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "created:asc",
                "created:desc",
                "email:asc",
                "email:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locate_id",
            "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Create a User",
        "description": "Creates a new User in the system by specifying an email address and name.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_EMAIL, ERR_INPUT_REQUIRED, ERR_INPUT_PASSWORD_COMPLEXITY_ERROR, ERR_INPUT_NOT_NUMERIC, ERR_INPUT_MIN_VALUE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_INVALID_EMAIL": {
                    "summary": "Input is not a valid email",
                    "description": "Input is not a valid email",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_INVALID_EMAIL",
                        "message": "Input is not a valid email"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR": {
                    "summary": "Password does not meet complexity requirements",
                    "description": "Password does not meet complexity requirements",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR",
                        "message": "Password does not meet complexity requirements"
                      }
                    }
                  },
                  "ERR_INPUT_MIN_VALUE": {
                    "summary": "The specified input below the minimum allowed value.",
                    "description": "The specified input below the minimum allowed value.",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_MIN_VALUE",
                        "message": "The specified input below the minimum allowed value."
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User.Post"
              }
            }
          }
        }
      }
    },
    "/rest/admin/users/migrateEmails": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Bulk update user emails",
        "description": "Bulk update user emails by migrating old email addresses to new ones. Accepts an array of objects containing old and new email pairs.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_EMAIL, ERR_INPUT_REQUIRED, ERR_INPUT_PASSWORD_COMPLEXITY_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_INVALID_EMAIL": {
                    "summary": "Input is not a valid email",
                    "description": "Input is not a valid email",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_INVALID_EMAIL",
                        "message": "Input is not a valid email"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR": {
                    "summary": "Password does not meet complexity requirements",
                    "description": "Password does not meet complexity requirements",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR",
                        "message": "Password does not meet complexity requirements"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersEmailMigration.Post"
              }
            }
          }
        }
      }
    },
    "/rest/admin/users/migrateEmailsCsv": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Bulk update user emails via CSV file",
        "description": "Bulk update user emails by migrating old email addresses to new ones using a CSV file.",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_NOT_BOOLEAN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_NOT_BOOLEAN": {
                    "summary": "Input is not a valid boolean",
                    "description": "Input is not a valid boolean",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_BOOLEAN",
                        "message": "Input is not a valid boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "CSV file containing old and new email pairs.",
                    "type": "string",
                    "format": "binary"
                  },
                  "deleteIfExists": {
                    "description": "Indicates whether to delete users whose emails match any in the newEmail field.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "body"
                ]
              }
            }
          }
        }
      }
    },
    "/rest/admin/users/{id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get User",
        "description": "Returns the details of the specified user (this includes email address and name)",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Update User",
        "description": "Updates the details of a user, such as changing their name, setting them as deleted, or updating their active/inactive status.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User.Put"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Deletes a User",
        "description": "Mark the specified user as deleted. This user will still be returned in the GET Users query.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_NOT_BOOLEAN, ERR_INPUT_ATTRIBUTE_FORBIDDEN, ERR_INPUT_REQUIRED, ERR_INPUT_NOT_STRING",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_NOT_BOOLEAN": {
                    "summary": "Input is not a valid boolean",
                    "description": "Input is not a valid boolean",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_BOOLEAN",
                        "message": "Input is not a valid boolean"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "retainToUser",
            "description": "The ID of the new owner to whom the data will be transferred, applicable when `retainData` and/or `retainPermissionToSharedData` are set to true.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "remoteWipe",
            "description": "Indicates whether to remotely wipe data from both desktop and mobile devices.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "deleteUnsharedData",
            "description": "Indicates whether data owned by the user should be deleted. This is required and must be set to True if `retainData` is False, and vice versa.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "retainData",
            "description": "Indicates whether data should be retained and transferred to another user. This is required and must be True if `deleteUnsharedData` is False, and vice versa.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "retainPermissionToSharedData",
            "description": "Indicates whether permissions to shared folder should be retained.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "withdrawFileLinks",
            "description": "Indicates whether files sent by deleted or demoted users should be withdrawn.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "withdrawRequestFiles",
            "description": "Indicates whether request files sent by deleted or demoted users should be withdrawn.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/admin/users/{id}/adminRoles": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Return admin roles of the specified user id.",
        "description": "Returns the details of all adminroles (active and deleted users)\n    with the specified user id.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AdminRole"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user to retrieve admin role",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/admin/users/{id}/devices": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "List devices for a user",
        "description": "Return a list of devices for a specific user",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Device"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user whose devices to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "installTagId",
            "description": "Unique identifier of install tag for this Device",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "installTagId:contains",
            "description": "Unique identifier of install tag for this Device. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "description": "Unique identifier of user for this Device",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId:in",
            "description": "Unique identifier of user for this Device. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clientId",
            "description": "Unique identifier of client for this Device",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clientId:contains",
            "description": "Unique identifier of client for this Device. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "installTagId:asc",
                "installTagId:desc",
                "userId:asc",
                "userId:desc",
                "clientId:asc",
                "clientId:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/admin/users/{id}/settings": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get User Settings",
        "description": "Returns the user settings",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settings"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user to retrieve settings for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/adminRoles": {
      "get": {
        "tags": [
          "adminRoles"
        ],
        "summary": "List admin roles",
        "description": "Returns a list of admin roles supported by kiteworks. e.g.:\n                  Today we return Application and System",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AdminRole"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/adminRoles/{id}": {
      "get": {
        "tags": [
          "adminRoles"
        ],
        "summary": "Return an admin role",
        "description": "Returns the details of a specified admin role. e.g.: Returns id and admin role name.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRole"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the adminrole to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/adminRoles/{id}/users": {
      "get": {
        "tags": [
          "adminRoles"
        ],
        "summary": "Return list of users with the specified admin role",
        "description": "Returns the list of admins who have the specified role. e.g.:\n                  Return me the user names and email addresses of all the Application admins.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the admin role to retrieve users for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "email",
            "description": "Filter users based on their email address.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email:contains",
            "description": "Filter users based on their email address.. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Filter users based on their full name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Filter users based on their full name.. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "Filter users based on their metadata information.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "metadataContains",
            "description": "Filter users whose metadata contains the specified characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Filter users based on whether they have been deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "active",
            "description": "Filter users based on whether they are active in the system.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "verified",
            "description": "Filter users based on their verification status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "suspended",
            "description": "Filter users based on whether they are suspended.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "isRecipient",
            "description": "Filter users who are recipients of specific items.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "allowsCollaboration",
            "description": "Filter users whose profiles allow collaboration access.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Filter users based on the creation date of their account.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "created:asc",
                "created:desc",
                "email:asc",
                "email:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locate_id",
            "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/adminRoles/{id}/users/{user_id}": {
      "put": {
        "tags": [
          "adminRoles"
        ],
        "summary": "Promote a user as admin role",
        "description": "Promote a user to include an admin role. The user will become a system or application admin.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_SYSTEM_ADMIN, ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_SYSTEM_ADMIN": {
                    "summary": "Authenticated user is not a System Admin",
                    "description": "Authenticated user is not a System Admin",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_SYSTEM_ADMIN",
                        "message": "Authenticated user is not a System Admin"
                      }
                    }
                  },
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Admin role",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "description": "ID of user to promote admin role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "adminRoles"
        ],
        "summary": "Delete a user as admin role",
        "description": "Delete a user as admin role.\n                  This method does not delete the user but only the role of admin for that user.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_SYSTEM_ADMIN, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_SYSTEM_ADMIN": {
                    "summary": "Authenticated user is not a System Admin",
                    "description": "Authenticated user is not a System Admin",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_SYSTEM_ADMIN",
                        "message": "Authenticated user is not a System Admin"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the admin role to remove from the specified user.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "description": "ID of the user as admin role to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/clients": {
      "get": {
        "tags": [
          "clients"
        ],
        "summary": "List clients",
        "description": "Return a list of clients",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Client"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Client name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Client name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description:contains",
            "description": "Client description. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "client_id:asc",
                "client_id:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "clients"
        ],
        "summary": "Create a client",
        "description": "Create a new client that will be able to access the kiteworks system.\n               e.g.: A new mobile app that is customized for your company.",
        "responses": {
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED, ERR_INPUT_NOT_INTEGER, ERR_INPUT_MIN_VALUE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_NOT_INTEGER": {
                    "summary": "Input is not a valid integer",
                    "description": "Input is not a valid integer",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_INTEGER",
                        "message": "Input is not a valid integer"
                      }
                    }
                  },
                  "ERR_INPUT_MIN_VALUE": {
                    "summary": "The specified input below the minimum allowed value.",
                    "description": "The specified input below the minimum allowed value.",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_MIN_VALUE",
                        "message": "The specified input below the minimum allowed value."
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Client.Post"
              }
            }
          }
        }
      }
    },
    "/rest/clients/me": {
      "get": {
        "tags": [
          "clients"
        ],
        "summary": "Get current client",
        "description": "Return the settings of the current client.\n               e.g.: I want the admin settings for my client; pin timeout, token lifetime, etc., ",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false
      }
    },
    "/rest/clients/{id}": {
      "get": {
        "tags": [
          "clients"
        ],
        "summary": "Get a client",
        "description": "Return the admin settings of a specified client.\n               e.g.: I want the admin settings for my iOS client; pin timeout, token lifetime, etc., ",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the client to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "clients"
        ],
        "summary": "Update a client",
        "description": "Update the admin settings for the specified client",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the client to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Client.Put"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "clients"
        ],
        "summary": "Delete a client",
        "description": "Delete a client from the client list.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the client to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/clients/{id}/scopes": {
      "get": {
        "tags": [
          "clients"
        ],
        "summary": "List scopes of a client",
        "description": "Return a list of scopes for a specific client.\n    This returns the methods that this client is allowed to use\n    such as folders, files, members, comments, etc.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the client whose scopes to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/comments/{id}": {
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "Get Comment by ID",
        "description": "Returns the details of a comment based on ID. e.g.:\n               I want to know the file or folder this comment is attached to and the comment itself.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the comment to retrieve",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "put": {
        "tags": [
          "comments"
        ],
        "summary": "Update Comment",
        "description": "Updates the text of a previously entered comment.",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_MAX_VALUE, ERR_INPUT_HTML_TAGS_INVALID, ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_HTML_TAGS_INVALID": {
                    "summary": "Cannot contain HTML tags other than B, I, or U",
                    "description": "Cannot contain HTML tags other than B, I, or U",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_HTML_TAGS_INVALID",
                        "message": "Cannot contain HTML tags other than B, I, or U"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the comment to update",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment.Put"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "comments"
        ],
        "summary": "Delete a Comment",
        "description": "Deletes the comment with the specified id.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the comment to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/devices": {
      "get": {
        "tags": [
          "devices"
        ],
        "summary": "List devices",
        "description": "Return a list of devices. e.g.: Returns a list of devices, per user,\n                  that have authenticated on this server.\n                  The list includes the name of the device (iPad, iPhone, etc),\n                  install tag id, client id, and remote wipe flag.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Device"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "installTagId",
            "description": "Unique identifier of install tag for this Device",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "installTagId:contains",
            "description": "Unique identifier of install tag for this Device. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "description": "Unique identifier of user for this Device",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId:in",
            "description": "Unique identifier of user for this Device. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clientId",
            "description": "Unique identifier of client for this Device",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clientId:contains",
            "description": "Unique identifier of client for this Device. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "installTagId:asc",
                "installTagId:desc",
                "userId:asc",
                "userId:desc",
                "clientId:asc",
                "clientId:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "devices"
        ],
        "summary": "Add a device",
        "description": "Add a device.\n                   This method is used when a user logs in to kiteworks to track the device they use.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device.Post"
              }
            }
          }
        }
      }
    },
    "/rest/devices/me": {
      "get": {
        "tags": [
          "devices"
        ],
        "summary": "Get current device info",
        "description": "Return the details of the current device.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "devices"
        ],
        "summary": "Update the currently signed-in device",
        "description": "Update the details of the current device. Can change the mobile key store and messaging registration token.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device.Put"
              }
            }
          }
        }
      }
    },
    "/rest/devices/me/actions/wipe": {
      "patch": {
        "tags": [
          "devices"
        ],
        "summary": "Tell the server the device had completed the requested wipe",
        "description": "Update the wipe flag to completed",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false
      }
    },
    "/rest/devices/{id}": {
      "get": {
        "tags": [
          "devices"
        ],
        "summary": "Get a device",
        "description": "Return the details of a specified device. Given the device id,\n                  return the device name, install tag id, client id, and remote wipe flag.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the device to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "devices"
        ],
        "summary": "Update a device",
        "description": "Update the details of a device. Can change the mobile key store and messaging registration token.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the device to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device.Put"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "devices"
        ],
        "summary": "Delete a device",
        "description": "Delete a device given the client id",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the device to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/devices/{install_tag_id}/wipe": {
      "get": {
        "tags": [
          "devices"
        ],
        "summary": "Get the wipe status",
        "description": "Returns the remote wipe status of a specified device identified by install_tag_id",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "install_tag_id",
            "description": "Unique identifier of install tag for this device. Usually the serial number of device",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/dli/exports": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Return the list of all exports for all users",
        "description": "Return the list of all exports for all users",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Export"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "user_id",
            "description": "Unique identifier of user",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "user_id:in",
            "description": "Unique identifier of user. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Status of the generated report",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status:contains",
            "description": "Status of the generated report. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/dli/exports/users/{id}": {
      "post": {
        "tags": [
          "dli"
        ],
        "summary": "Start generating export for the specified user",
        "description": "Start generating export for the specified user",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Export"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_DATE, ERR_INPUT_DATE_NOT_BEFORE, ERR_INPUT_REQUIRED, ERR_INPUT_DATE_NOT_AFTER, ERR_INPUT_NOT_ARRAY, ERR_INPUT_NOT_IN_LIST",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Export.Post"
              }
            }
          }
        }
      }
    },
    "/rest/dli/exports/{id}": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Return information of an export such as status, download url, user ID, etc.",
        "description": "Return information of an export such as status, download url, user ID, etc.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Export"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the export",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "dli"
        ],
        "summary": "Delete the specified export.",
        "description": "Delete the specified export.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Export"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the export",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/dli/exports/{id}/content": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Download the generated export.",
        "description": "Download the generated export.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Export"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the export",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/dli/files/{fileId}/users/{userId}/activities": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Return the list of Activities for this file",
        "description": "Return the list of Activities for this file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ActivityAdmin"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "description": "ID of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "noDayBack",
            "description": "Number of days back to search",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "startDate",
            "description": "Start date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "description": "End date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "All or my activities",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "my"
              ]
            }
          },
          {
            "in": "query",
            "name": "search",
            "description": "Search by mail body, subject and sender/recipients",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Activity type",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "folder_changes",
                "file_changes",
                "user_preferences",
                "mail",
                "tasks",
                "comments",
                "kitepoint"
              ]
            }
          },
          {
            "in": "query",
            "name": "transactionId",
            "description": "Transaction ID associated with the activities",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "created:asc",
                "created:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/dli/files/{id}": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Retrieve information about the file specified.",
        "description": "Retrieve information about the file specified. This includes file name,\n               created date, modified date, file deleted, locked, fingerprint, and links to file,\n               folder, and owner.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/dli/files/{id}/content": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Read file content",
        "description": "Read content of file",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Range",
            "description": "Range of bytes to download. e.g. `bytes=0-1024`",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/dli/files/{id}/path": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Get file path",
        "description": "Gets the path (location) to the specified file.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/dli/files/{id}/preview": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Retrieve information about the file preview.",
        "description": "Retrieve information about the file preview.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preview"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/dli/files/{id}/versions": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "List versions",
        "description": "Returns a list of versions for a given file",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Version"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Object id of file to retrieve versions for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "File Version creation date",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "File Version creation date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "File Version creation date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "File Version creation date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "File Version creation date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "versionNumber:asc",
                "versionNumber:desc",
                "created:asc",
                "created:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locate_id",
            "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/dli/files/{id}/versions/{version_id}": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Allow DLI admin to get specified version",
        "description": "Returns the specified version of a file",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Object id of file to retrieve versions for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version_id",
            "description": "version ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/dli/files/{id}/versions/{version_id}/content": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Download specified version",
        "description": "Download specified version",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version_id",
            "description": "version ID for which to retrieve content",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Range",
            "description": "Range of bytes to download. e.g. `bytes=0-1024`",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/dli/folders/{folderId}/users/{userId}/activities": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Return the list of activities for this folder of the specified user",
        "description": "Return the list of activities for this folder of the specified user",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ActivityAdmin"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "folderId",
            "description": "The unique identifier of the folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "noDayBack",
            "description": "Number of days back to search",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "startDate",
            "description": "Start date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "description": "End date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "All or my activities",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "my"
              ]
            }
          },
          {
            "in": "query",
            "name": "search",
            "description": "Search by mail body, subject and sender/recipients",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Activity type",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "folder_changes",
                "file_changes",
                "user_preferences",
                "mail",
                "tasks",
                "comments",
                "kitepoint"
              ]
            }
          },
          {
            "in": "query",
            "name": "transactionId",
            "description": "Transaction ID associated with the activities",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "created:asc",
                "created:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/dli/folders/{id}": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Retrieve folder information.",
        "description": "Return folder information for the specified folder. e.g.:\n                  I want to know creation date, get a link to the folder,\n                  find out if the folder was deleted, etc.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/dli/mail/{id}/attachments": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "List email attachments",
        "description": "Returns a list of attachments for a given mail.\n                       e.g.: I want to the id's of all the attachments for a mail I sent.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Attachment"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the email containing the attachment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ref",
            "description": "The reference ID of the email (Mandatory if the email can be accessed without authentication).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locate_id",
            "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/dli/mail/{id}/recipients": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "List Recipients",
        "description": "Returns a list of recipients for a given email",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Recipient"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the email",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Type for Recipient. TO,CC,BCC",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "0",
                "1",
                "2"
              ]
            }
          },
          {
            "in": "query",
            "name": "ref",
            "description": "The reference ID of the email (Mandatory if the email can be accessed without authentication).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "userId:asc",
                "userId:desc",
                "type:asc",
                "type:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locate_id",
            "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/dli/users/{id}/activities": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Return the list of all activities of the specified user",
        "description": "Return the list of all activities of the specified user",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ActivityAdmin"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "noDayBack",
            "description": "Number of days back to search",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "startDate",
            "description": "Start date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "description": "End date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "All or my activities",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "my"
              ]
            }
          },
          {
            "in": "query",
            "name": "search",
            "description": "Search by mail body, subject and sender/recipients",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Activity type",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "folder_changes",
                "file_changes",
                "user_preferences",
                "mail",
                "tasks",
                "comments",
                "kitepoint",
                "admin"
              ]
            }
          },
          {
            "in": "query",
            "name": "transactionId",
            "description": "Transaction ID associated with the activities",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "created:asc",
                "created:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/dli/users/{id}/mail": {
      "get": {
        "tags": [
          "dli"
        ],
        "summary": "Retrieve information about the mail specified be a user",
        "description": "Retrieve information about the mail specified by one user",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Email"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_LICENSE_DLI, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_DLI": {
                    "summary": "Feature DLI is not enabled by license",
                    "description": "Feature DLI is not enabled by license",
                    "value": {
                      "errors": {
                        "code": "ERR_LICENSE_DLI",
                        "message": "Feature DLI is not enabled by license"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "senderId",
            "description": "Unique identifier of User who sent Email",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "senderId:in",
            "description": "Unique identifier of User who sent Email. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "isRecipient",
            "description": "Unique identifier of User who receive Email",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "read",
            "description": "Whether the email is read or not by current user",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "date",
            "description": "Email creation date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "date:gt",
            "description": "Email creation date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "date:gte",
            "description": "Email creation date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "date:lt",
            "description": "Email creation date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "date:lte",
            "description": "Email creation date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified_date",
            "description": "Email modification date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified_date:gt",
            "description": "Email modification date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified_date:gte",
            "description": "Email modification date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified_date:lt",
            "description": "Email modification date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified_date:lte",
            "description": "Email modification date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Indicates that Email is deleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "emailPackageId",
            "description": "Email Package unique identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "emailPackageId:in",
            "description": "Email Package unique identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "templateId",
            "description": "Email Template unique identifier",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "templateId:in",
            "description": "Email Template unique identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Email status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "sent",
                "draft",
                "queued",
                "error",
                "self_send",
                "transferring"
              ]
            }
          },
          {
            "in": "query",
            "name": "isPreview",
            "description": "Whether the email is a preview email",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "isUserSent",
            "description": "Whether the email was sent by some user",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "bucket",
            "description": "Email bucket",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "inbox",
                "outgoing",
                "sent",
                "trash"
              ]
            }
          },
          {
            "in": "query",
            "name": "returnCustomWebForm",
            "description": "Return all emails include those with the custom web form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "customWebFormOnly",
            "description": "Return only emails with the custom web form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "webFormId",
            "description": "Email web form ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "webFormId:contains",
            "description": "Email web form ID. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "date:asc",
                "date:desc",
                "status:asc",
                "status:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locate_id",
            "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/favorites": {
      "post": {
        "tags": [
          "favorites"
        ],
        "summary": "Add a favorite",
        "description": "Adding a favorite",
        "responses": {
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Favorite.Post"
              }
            }
          }
        }
      },
      "get": {
        "summary": "List favorites",
        "description": "List favorites",
        "tags": [
          "favorites"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          },
          {
            "in": "query",
            "name": "parentId",
            "required": false,
            "description": "Parent folder",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "parentId:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Parent folder. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "excludeEc",
            "required": false,
            "description": "Do not return Repositories Gateway folder if set to true",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "objects.name:asc",
                "objects.name:desc",
                "objects.created:asc",
                "objects.created:desc",
                "objects.modified:asc",
                "objects.modified:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List favorites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteListOpenAPI2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_DENIED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/favorites/{id}": {
      "delete": {
        "tags": [
          "favorites"
        ],
        "summary": "Remove a favorite",
        "description": "Deleting a favorite",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the favorite to be removed",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/files": {
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Delete files",
        "description": "Deletes the specified files. Depending on the system retention policy, the files may be recoverable until permanently deleted by the system.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/actions/copy": {
      "post": {
        "summary": "Copy files",
        "description": "### Description:\n  Copies the specified files to a folder.\n### Precondition:\n  Must be assigned the `file_copy` permission for the files being copied and `file_add` permission for the destination folder.\n### Response:\n  Copies the files to the folder. If duplicate files exist, appends a number to copied file names.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyPostBodyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Files have been copied successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_FILTER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_FILTER": {
                    "summary": "Filter validation failed",
                    "description": "Filter validation failed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_FILTER",
                          "message": "Filter validation failed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ACCESS_DENIED, ERR_ENTITY_DELETED, ERR_ENTITY_COPIED_FROM_EC, ERR_ENTITY_EC_TO_EC, ERR_ENTITY_NOT_SCANNED, ERR_ENTITY_VIRUS_FOUND, ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_RESTRICTED_TYPE, ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_IS_MY_DIR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_COPIED_FROM_EC": {
                    "summary": "Can not perform action on file copied from Repositories Gateway source",
                    "description": "Can not perform action on file copied from Repositories Gateway source",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_COPIED_FROM_EC",
                          "message": "Can not perform action on file copied from Repositories Gateway source"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EC_TO_EC": {
                    "summary": "Unable to copy/move Repositories Gateway file to Repositories Gateway",
                    "description": "Unable to copy/move Repositories Gateway file to Repositories Gateway",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EC_TO_EC",
                          "message": "Unable to copy/move Repositories Gateway file to Repositories Gateway"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_SCANNED": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_SCANNED",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_VIRUS_FOUND": {
                    "summary": "File is infected",
                    "description": "File is infected",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_VIRUS_FOUND",
                          "message": "File is infected"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                          "message": "File extension is in exclusion extensions list"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_TYPE",
                          "message": "The specified entity mime type is not allowed."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_MY_DIR": {
                    "summary": "Operation not permitted on Tray Folder",
                    "description": "Operation not permitted on Tray Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_MY_DIR",
                          "message": "Operation not permitted on Tray Folder"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_NO_STORAGE_AVAILABLE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_NO_STORAGE_AVAILABLE": {
                    "summary": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "description": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_NO_STORAGE_AVAILABLE",
                          "message": "Folder owner's remaining storage quota does not permit for a file upload of this size."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/actions/lock": {
      "patch": {
        "summary": "Lock files",
        "description": "### Description:\n  Locks the specified files, preventing others from performing actions such as editing, moving, and deleting the files.\n### Precondition:\n  Must be assigned the `lock` permission for the files.\n### Response:\n  Locks the files.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "A comma-separated list of unique identifier (UUID) of the objects to be processed.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileLockPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The files have been successfully locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationLockFile"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_DLP_LOCKED, ERR_ENTITY_IS_ATTACHMENT, ERR_ENTITY_NOT_SCANNED, ERR_ENTITY_VIRUS_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DLP_LOCKED": {
                    "summary": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "description": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DLP_LOCKED",
                          "message": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_ATTACHMENT": {
                    "summary": "Operation not permitted on attachment",
                    "description": "Operation not permitted on attachment",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_ATTACHMENT",
                          "message": "Operation not permitted on attachment"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_SCANNED": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_SCANNED",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_VIRUS_FOUND": {
                    "summary": "File is infected",
                    "description": "File is infected",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_VIRUS_FOUND",
                          "message": "File is infected"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/actions/mobileSyncItems": {
      "post": {
        "tags": [
          "mobileSync",
          "files"
        ],
        "summary": "Add multiple files to mobile sync list",
        "description": "Add multiple files to mobile sync list This operation will not return location headers for each entity created, if the inserted records are\n        required, returnEntity should be set to true.",
        "responses": {
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "mobileSync",
          "files"
        ],
        "summary": "Delete multiple files from user mobile sync list",
        "description": "Delete multiple files from user mobile sync list",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/actions/move": {
      "post": {
        "summary": "Move files",
        "description": "### Description:\n  Moves the specified files to a folder.\n### Precondition:\n  Must be assigned the `file_move` permission for the files being moved and the `file_add` permission for the destination folder.\n### Response:\n  Moves the files to the folder.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileMovePostBodyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Files have been moved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_FILTER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_FILTER": {
                    "summary": "Filter validation failed",
                    "description": "Filter validation failed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_FILTER",
                          "message": "Filter validation failed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ACCESS_DENIED, ERR_ENTITY_DELETED, ERR_ENTITY_COPIED_FROM_EC, ERR_ENTITY_EC_TO_EC, ERR_ENTITY_NOT_SCANNED, ERR_ENTITY_VIRUS_FOUND, ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_RESTRICTED_TYPE, ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_IS_MY_DIR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_COPIED_FROM_EC": {
                    "summary": "Can not perform action on file copied from Repositories Gateway source",
                    "description": "Can not perform action on file copied from Repositories Gateway source",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_COPIED_FROM_EC",
                          "message": "Can not perform action on file copied from Repositories Gateway source"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EC_TO_EC": {
                    "summary": "Unable to copy/move Repositories Gateway file to Repositories Gateway",
                    "description": "Unable to copy/move Repositories Gateway file to Repositories Gateway",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EC_TO_EC",
                          "message": "Unable to copy/move Repositories Gateway file to Repositories Gateway"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_SCANNED": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_SCANNED",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_VIRUS_FOUND": {
                    "summary": "File is infected",
                    "description": "File is infected",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_VIRUS_FOUND",
                          "message": "File is infected"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                          "message": "File extension is in exclusion extensions list"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_TYPE",
                          "message": "The specified entity mime type is not allowed."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_MY_DIR": {
                    "summary": "Operation not permitted on Tray Folder",
                    "description": "Operation not permitted on Tray Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_MY_DIR",
                          "message": "Operation not permitted on Tray Folder"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_NO_STORAGE_AVAILABLE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_NO_STORAGE_AVAILABLE": {
                    "summary": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "description": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_NO_STORAGE_AVAILABLE",
                          "message": "Folder owner's remaining storage quota does not permit for a file upload of this size."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/actions/permanent": {
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Delete files permanently",
        "description": "Permanently deletes the specified files.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/actions/push": {
      "post": {
        "tags": [
          "mobileSync",
          "files"
        ],
        "summary": "Push files list to mobile sync list",
        "description": "Set list of files as mobile sync item for all folder members. This operation will not return location headers for each entity created, if the inserted records are\n        required, returnEntity should be set to true.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "mobileSync",
          "files"
        ],
        "summary": "Un-Push multiple files",
        "description": "Un-Pushing files removes these files from all folder members' mobile sync list.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/actions/recover": {
      "patch": {
        "tags": [
          "files"
        ],
        "summary": "Recover deleted files",
        "description": "Recovers the specified deleted files.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/actions/scan": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Scan files for security",
        "description": "Runs security scans on the specified files. Depending on system scan policies, files are scanned for anti-virus, data loss prevention, and advanced threat protection.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "description": "List of IDs of entities to scan. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/actions/unlock": {
      "patch": {
        "summary": "Unlock files",
        "description": "### Description:\n  Unlocks the specified files, enabling others to perform actions such as edit, move, and delete the files.\n### Precondition:\n  Must be assigned the `unlock` permission for the files.\n### Response:\n  Unlocks the files.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "A comma-separated list of unique identifier (UUID) of the objects to be processed.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileLockPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The files have been successfully unlocked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationLockFile"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_DLP_LOCKED, ERR_ENTITY_IS_ATTACHMENT, ERR_ENTITY_NOT_SCANNED, ERR_ENTITY_VIRUS_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DLP_LOCKED": {
                    "summary": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "description": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DLP_LOCKED",
                          "message": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_ATTACHMENT": {
                    "summary": "Operation not permitted on attachment",
                    "description": "Operation not permitted on attachment",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_ATTACHMENT",
                          "message": "Operation not permitted on attachment"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_SCANNED": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_SCANNED",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_VIRUS_FOUND": {
                    "summary": "File is infected",
                    "description": "File is infected",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_VIRUS_FOUND",
                          "message": "File is infected"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/actions/zip": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Download files and folders in ZIP format",
        "description": "Downloads the specified files and folders in ZIP format.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "The name for the generated ZIP archive",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fileId:in",
            "description": "A comma-separated list of file IDs to include in the ZIP archive.. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "folderId:in",
            "description": "A comma-separated list of folder IDs to include in the ZIP archive.. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "username",
            "description": "The email address of the user requesting the ZIP archive.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "extensions",
            "description": "Filter files by the specified comma-seperated list of extensions.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "utcOffset",
            "description": "The user's timezone offset in seconds (e.g., UTC+08:00 = 28800).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/actions/zipStatus": {
      "get": {
        "summary": "Get file and folder security status",
        "description": "### Description:\n  Gets the security scan results of specified files and folders in preparation for downloading them in ZIP format.\n### Precondition:\n  Must be assigned the `download` permission for the files and folders.\n### Response:\n  Returns an empty response if all files are safe for download.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fileId:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "A comma-separated list of file IDs (UUID) to check. (Recommended request size <= 100)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "folderId:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "A comma-separated list of folder IDs (UUID) to check. (Recommended request size <= 100)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "description": "Indicates whether the operation should proceed if some files/folders fail the check.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "extensions",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Filter results to include only files with the specified comma-seperated list of extensions.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All files and folders are verified as safe for zipping and download."
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_FILTER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_FILTER": {
                    "summary": "Filter validation failed",
                    "description": "Filter validation failed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_FILTER",
                          "message": "Filter validation failed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_TENANT_SUSPENDED, ERR_ACCESS_USER, ERR_ENTITY_VIRUS_FOUND, ERR_ENTITY_NOT_SCANNED, ERR_ENTITY_DLP_LOCKED, ERR_ENTITY_DLP_SCANNING, ERR_ENTITY_IS_SECURE_FOLDER, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_TENANT_SUSPENDED": {
                    "summary": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access.",
                    "description": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_TENANT_SUSPENDED",
                          "message": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access."
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_VIRUS_FOUND": {
                    "summary": "File is infected",
                    "description": "File is infected",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_VIRUS_FOUND",
                          "message": "File is infected"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_SCANNED": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_SCANNED",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DLP_LOCKED": {
                    "summary": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "description": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DLP_LOCKED",
                          "message": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DLP_SCANNING": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DLP_SCANNING",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_LICENSE_EXPIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_EXPIRED": {
                    "summary": "License has expired",
                    "description": "License has expired",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_LICENSE_EXPIRED",
                          "message": "License has expired"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/{file_id}/activities": {
      "get": {
        "tags": [
          "activities"
        ],
        "summary": "Return the list of Activities for this file",
        "description": "Return the list of Activities for this file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "file_id",
            "description": "The unique identifier (UUID) of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "noDayBack",
            "description": "Number of days back to search",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "startDate",
            "description": "Start date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "description": "End date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "All or my activities",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "my"
              ]
            }
          },
          {
            "in": "query",
            "name": "search",
            "description": "Search by mail body, subject and sender/recipients",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Activity type",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "folder_changes",
                "file_changes",
                "user_preferences",
                "mail",
                "tasks",
                "comments",
                "kitepoint"
              ]
            }
          },
          {
            "in": "query",
            "name": "transactionId",
            "description": "Transaction ID associated with the activities",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "created:asc",
                "created:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/{id}": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Upload a file version",
        "description": "Uploads a new version of the specified file. Must be assigned the `file_add` permission.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED, ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE, ERR_ENTITY_RESTRICTED_TYPE_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE_GROUP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                        "message": "File extension is in exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM": {
                    "summary": "File extension is in custom exclusion extensions list",
                    "description": "File extension is in custom exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM",
                        "message": "File extension is in custom exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE",
                        "message": "The specified entity mime type is not allowed."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM": {
                    "summary": "The specified file type is in custom excluded file types list.",
                    "description": "The specified file type is in custom excluded file types list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM",
                        "message": "The specified file type is in custom excluded file types list."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_GROUP": {
                    "summary": "File mime type is in exclusion groups list.",
                    "description": "File mime type is in exclusion groups list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_GROUP",
                        "message": "File mime type is in exclusion groups list."
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_DATE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "Binary content of the file",
                    "type": "string",
                    "format": "binary"
                  },
                  "clientCreated": {
                    "description": "The date and time when the file was created on the client side.",
                    "type": "string"
                  },
                  "clientModified": {
                    "description": "The date and time when the file was last modified on the client side.",
                    "type": "string"
                  }
                },
                "required": [
                  "body"
                ]
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get file metadata",
        "description": "### Description:\n  Gets metadata for specified files, such as file owner, creation date, digital fingerprint, and security scan status.\n### Precondition:\n  Must be assigned the `properties_view` permission for the file.\n### Response:\n  Returns the file metadata.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_FILTER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_FILTER": {
                    "summary": "Filter validation failed",
                    "description": "Filter validation failed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_FILTER",
                          "message": "Filter validation failed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_ACCESS_DENIED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "put": {
        "summary": "Update a file",
        "description": "### Description:\n  Updates a file\n### Precondition:\n  User must have `file_add` permission for the file.\n### Response:\n  The file is updated.\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The file has been updated successfully"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ACCESS_DENIED, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED, ERR_INVALID_PARAMETER, ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE, ERR_ENTITY_RESTRICTED_TYPE_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE_GROUP, ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_LOCKED",
                          "message": "File is locked"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                          "message": "File extension is in exclusion extensions list"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM": {
                    "summary": "File extension is in custom exclusion extensions list",
                    "description": "File extension is in custom exclusion extensions list",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM",
                          "message": "File extension is in custom exclusion extensions list"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_TYPE",
                          "message": "The specified entity mime type is not allowed."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM": {
                    "summary": "The specified file type is in custom excluded file types list.",
                    "description": "The specified file type is in custom excluded file types list.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM",
                          "message": "The specified file type is in custom excluded file types list."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_GROUP": {
                    "summary": "File mime type is in exclusion groups list.",
                    "description": "File mime type is in exclusion groups list.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_TYPE_GROUP",
                          "message": "File mime type is in exclusion groups list."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EXISTS",
                          "message": "Entity exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Delete a file",
        "description": "Deletes the specified file. Depending on the system retention policy, the file may be recoverable until permanently deleted by the system.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/files/{id}/actions/lock": {
      "patch": {
        "tags": [
          "files"
        ],
        "summary": "Lock a file",
        "description": "Locks the specified file, preventing others from performing actions such as editing, moving, and deleting the file. Must be assigned the `lock` permission for the file.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/{id}/actions/permanent": {
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Delete a file permanently",
        "description": "Permanently deletes the specified file.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/files/{id}/actions/push": {
      "post": {
        "tags": [
          "mobileSync",
          "files"
        ],
        "summary": "Push file to mobile sync list",
        "description": "Sets the specified file as a mobile sync item for all folder members.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "mobileSync",
          "files"
        ],
        "summary": "Un-Push file from mobile sync list",
        "description": "Un-pushing a file removes it from all folder members' mobile sync list.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifer (UUID) of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/{id}/actions/recover": {
      "patch": {
        "tags": [
          "files"
        ],
        "summary": "Recover a file.",
        "description": "Recovers the specified file.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/{id}/actions/return": {
      "patch": {
        "tags": [
          "files"
        ],
        "summary": "Check file into Repositories Gateway source",
        "description": "Checks the specified file back into its Repositories Gateway source.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/{id}/actions/scan": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Scan a file for security",
        "description": "Runs a security scan on the specified file. Depending on system scan policies, the file is scanned for anti-virus, data loss prevention, and advanced threat protection.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/{id}/actions/unlock": {
      "patch": {
        "tags": [
          "files"
        ],
        "summary": "Unlock a file",
        "description": "Unlocks the specified file, enabling others to perform actions such as edit, move, and delete the file. Must be assigned the `unlock` permission for the file.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED_BY_ANOTHER_USER, ERR_ENTITY_UNLOCKED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED_BY_ANOTHER_USER": {
                    "summary": "File is locked by another user",
                    "description": "File is locked by another user",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED_BY_ANOTHER_USER",
                        "message": "File is locked by another user"
                      }
                    }
                  },
                  "ERR_ENTITY_UNLOCKED": {
                    "summary": "File is already unlocked",
                    "description": "File is already unlocked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_UNLOCKED",
                        "message": "File is already unlocked"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/{id}/comments": {
      "get": {
        "tags": [
          "comments",
          "files"
        ],
        "summary": "Get file comments",
        "description": "Gets a list of comments attached to the specified file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comment"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the file for which comments are being retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "parentId",
            "description": "Unique identifier of the parent comment",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "parentId:in",
            "description": "Unique identifier of the parent comment. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "description": "Unique identifier of the comment author",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId:in",
            "description": "Unique identifier of the comment author. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "The creation date of the comment.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "The creation date of the comment.. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "The creation date of the comment.. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "The creation date of the comment.. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "The creation date of the comment.. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified",
            "description": "The last modification date of the comment.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gt",
            "description": "The last modification date of the comment.. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gte",
            "description": "The last modification date of the comment.. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lt",
            "description": "The last modification date of the comment.. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lte",
            "description": "The last modification date of the comment.. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "contents:contains",
            "description": "Content of the comment. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc",
                "parentId:asc",
                "parentId:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "comments",
          "files"
        ],
        "summary": "Add file comment",
        "description": "Adds a comment to the specified file.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_MAX_VALUE, ERR_INPUT_HTML_TAGS_INVALID, ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_HTML_TAGS_INVALID": {
                    "summary": "Cannot contain HTML tags other than B, I, or U",
                    "description": "Cannot contain HTML tags other than B, I, or U",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_HTML_TAGS_INVALID",
                        "message": "Cannot contain HTML tags other than B, I, or U"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the file being commented on",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment.Post"
              }
            }
          }
        }
      }
    },
    "/rest/files/{id}/content": {
      "get": {
        "summary": "Download a file",
        "description": "### Description:\n  Downloads the specified file.\n### Precondition:\n  Must be assigned the `download` permission for the file.\n### Response:\n  Downloads the file to the specified location.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "header",
            "name": "Range",
            "required": false,
            "description": "Range of bytes to download. e.g. `bytes=0-1024`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file download request was successful.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": "The file was partially downloaded.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_DLP_LOCKED, ERR_ENTITY_IS_SECURE_FOLDER, ERR_ENTITY_NOT_SCANNED, ERR_ENTITY_VIRUS_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DLP_LOCKED": {
                    "summary": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "description": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DLP_LOCKED",
                          "message": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_SCANNED": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_SCANNED",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_VIRUS_FOUND": {
                    "summary": "File is infected",
                    "description": "File is infected",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_VIRUS_FOUND",
                          "message": "File is infected"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/{id}/externalEdit": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get access token for external file edit.",
        "description": "Retrieve refresh token for external file edit.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshToken"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/{id}/members": {
      "get": {
        "summary": "Get users with access to a shared file",
        "description": "### Description:\n  Gets a list of users with access to the specified shared file. Also gets the file metadata, providing context and information about the shared file such as each user's role for accessing the file and the user who shared the file.\n### Precondition:\n  File sharing must be activated on the system. Must be assigned the `user_view` permission for the shared file.\n### Response:\n  Returns the list of users with access to the shared file, along with metadata about the shared file.\n### Sorting:\n  Sort string syntax `FIELD_NAME:ORDER`.\n\n  ORDER can be `asc` or `desc`.\n### Sorting options:\n  | FIELD_NAME | Description |\n  |------------|-------------|\n  | id         | The member ID |\n  | userId     | The user ID |\n  | groupId    | The group ID |\n  | roleId     | The role ID |\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "description": "Filter results by user ID (UUID).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "groupId",
            "required": false,
            "description": "Filter results by LDAP group ID.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "roleId",
            "required": false,
            "description": "Filter results by role ID.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "userId:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Filter by a comma-separated list of user IDs (UUID). (Recommended request size <= 100)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "groupId:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Filter by a comma-separated list of LDAP Group IDs. (Recommended request size <= 100)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "roleId:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Filter by a comma-separated list of role IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "description": "Filter by the object type.",
            "schema": {
              "type": "string",
              "enum": [
                "d",
                "f"
              ]
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Sorting options.",
            "schema": {
              "type": "string",
              "enum": [
                "id:asc",
                "id:desc",
                "userId:asc",
                "userId:desc",
                "groupId:asc",
                "groupId:desc",
                "roleId:asc",
                "roleId:desc",
                "rank:asc",
                "rank:desc",
                "email:asc",
                "email:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The files members have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Members"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_TENANT_SUSPENDED, ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_USER_TYPE_NO_ACCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_TENANT_SUSPENDED": {
                    "summary": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access.",
                    "description": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_TENANT_SUSPENDED",
                          "message": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access."
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_USER_TYPE_NO_ACCESS": {
                    "summary": "Permission denied",
                    "description": "Permission denied",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_TYPE_NO_ACCESS",
                          "message": "Permission denied"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_LICENSE_EXPIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_EXPIRED": {
                    "summary": "License has expired",
                    "description": "License has expired",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_LICENSE_EXPIRED",
                          "message": "License has expired"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "delete": {
        "summary": "Remove all access to a shared file",
        "description": "### Description:\n  Removes user access to the specified shared file.\n### Precondition:\n  Must be assigned the `user_add` permission for the folder containing the shared file.\n### Response:\n  Removes user access to the shared file.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All file members have been successfully removed."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/{id}/members/ldapGroup": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get LDAP group members with access to a shared file",
        "description": "Gets a list of users in an LDAP group with access to the specified shared file. Also gets metadata, providing context and information about the users such as each user's email address and role for accessing the file. Must be assigned the `user_view` permission for the shared file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MemberGroup"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "groupId",
            "description": "The unique identifier of group.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "groupId:in",
            "description": "The unique identifier of group.. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "roleId",
            "description": "The unique identifier of role.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "roleId:in",
            "description": "The unique identifier of role.. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "groupId:asc",
                "groupId:desc",
                "roleId:asc",
                "roleId:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/{id}/members/ldapGroup/{ldap_group_id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get an LDAP group member with access to a shared file",
        "description": "Returns the name of a specific LDAP user in an LDAP group with access to the specified shared file. Also gets metadata, providing context and information about the user such as their ID, email address, and role for accessing the file. Must be assigned the `user_view` permission for the shared file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ldap_group_id",
            "description": "id of the member",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/{id}/members/{member_user_id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Returns the specified user member associated with the file.",
        "description": "Returns the name of the specified user with access to the specified shared file. Also gets metadata, providing context and information about the user such as their ID, email address, and role for accessing the file. Must be assigned the `user_view` permission for the shared file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "member_user_id",
            "description": "The unique identifier of the user member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "delete": {
        "summary": "Remove a user's access to a shared file",
        "description": "### Description:\n  Removes the specified user's access to the specified shared file.\n### Precondition:\n  Must be assigned the `user_add` permission for the folder containing the shared file.\n### Response:\n  Removes the user\u2019s access to the shared file.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "member_user_id",
            "required": true,
            "description": "The unique identifier (UUID) of the user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The member has been successfully removed from the file."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "put": {
        "summary": "Update file member",
        "description": "### Description:\n  Changes the role assigned to the specified user for accessing the specified shared file.\n### Precondition:\n  Must be assigned the `user_add` permission for the folder containing the file.\n### Response:\n  Changes the user\u2019s role to the specified role.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "member_user_id",
            "required": true,
            "description": "The unique identifier (UUID) of the user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file member's role has been successfully updated."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_IS_MY_DIR, ERR_ENTITY_IS_SYNC_DIR, ERR_ENTITY_IS_SECURE_FOLDER, ERR_ACCESS_USER, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_MY_DIR": {
                    "summary": "Operation not permitted on Tray Folder",
                    "description": "Operation not permitted on Tray Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_MY_DIR",
                          "message": "Operation not permitted on Tray Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SYNC_DIR": {
                    "summary": "Operation not permitted on My Folder",
                    "description": "Operation not permitted on My Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SYNC_DIR",
                          "message": "Operation not permitted on My Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS, ERR_ENTITY_ROLE_IS_ASSIGNED, ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EXISTS",
                          "message": "Entity exists"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_ROLE_IS_ASSIGNED": {
                    "summary": "Cannot assign already assigned role",
                    "description": "Cannot assign already assigned role",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_ROLE_IS_ASSIGNED",
                          "message": "Cannot assign already assigned role"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS": {
                    "summary": "Target user has insufficient access permissions",
                    "description": "Target user has insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS",
                          "message": "Target user has insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/{id}/path": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get file path",
        "description": "Gets the path (location) to the specified file.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/{id}/preview": {
      "get": {
        "summary": "Get file preview metadata",
        "description": "### Description:\n  Gets file preview metadata about the specified file, such as the permalink for previewing the file and if the file contains a watermark.\n### Precondition:\n  Must be assigned the `view` permission for the file.\n### Response:\n  Returns the file preview metadata.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file preview information has been successfully returned."
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_FILTER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_FILTER": {
                    "summary": "Filter validation failed",
                    "description": "Filter validation failed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_FILTER",
                          "message": "Filter validation failed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ACCESS_DENIED, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/{id}/tasks": {
      "get": {
        "tags": [
          "files",
          "tasks"
        ],
        "summary": "Get file tasks",
        "description": "Gets a list of tasks assigned to the specified file. Also gets the file metadata, providing context and information about the task such as the name of the user assigned the task and the due date for completion.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "File object ID of the task to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "assigneeId",
            "description": "Assigned User unique identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "assigneeId:in",
            "description": "Assigned User unique identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "due",
            "description": "Task due date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "due:gt",
            "description": "Task due date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "due:gte",
            "description": "Task due date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "due:lt",
            "description": "Task due date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "due:lte",
            "description": "Task due date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "parentId",
            "description": "Parent Comment identifier",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "parentId:in",
            "description": "Parent Comment identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "description": "Identifier of User who created a Task",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId:in",
            "description": "Identifier of User who created a Task. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Task creation date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Task creation date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Task creation date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Task creation date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Task creation date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified",
            "description": "Task modification date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gt",
            "description": "Task modification date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gte",
            "description": "Task modification date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lt",
            "description": "Task modification date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lte",
            "description": "Task modification date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "contents:contains",
            "description": "Task content. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Task status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "D",
                "P",
                "C"
              ]
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Whether the task has been deleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "due:asc",
                "due:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "files",
          "tasks"
        ],
        "summary": "Create file task",
        "description": "Creates a task for the specified file and assigns it to the specified user.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED, ERR_INPUT_DATE_NOT_AFTER, ERR_INPUT_HTML_TAGS_INVALID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_HTML_TAGS_INVALID": {
                    "summary": "Cannot contain HTML tags other than B, I, or U",
                    "description": "Cannot contain HTML tags other than B, I, or U",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_HTML_TAGS_INVALID",
                        "message": "Cannot contain HTML tags other than B, I, or U"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Object ID of the file task is created on",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task.Post"
              }
            }
          }
        }
      }
    },
    "/rest/files/{id}/versions": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get file versions",
        "description": "Gets a list of file versions for the specified file. Also gets the file metadata, such as its owner, creation date, digital fingerprint, and security scan status.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Version"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "File Version creation date",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "File Version creation date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "File Version creation date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "File Version creation date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "File Version creation date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "versionNumber:asc",
                "versionNumber:desc",
                "created:asc",
                "created:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locate_id",
            "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Upload a file version",
        "description": "Uploads a new version of a specified file. Must be assigned the `file_add` permission.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED, ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE, ERR_ENTITY_RESTRICTED_TYPE_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE_GROUP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                        "message": "File extension is in exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM": {
                    "summary": "File extension is in custom exclusion extensions list",
                    "description": "File extension is in custom exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM",
                        "message": "File extension is in custom exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE",
                        "message": "The specified entity mime type is not allowed."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM": {
                    "summary": "The specified file type is in custom excluded file types list.",
                    "description": "The specified file type is in custom excluded file types list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM",
                        "message": "The specified file type is in custom excluded file types list."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_GROUP": {
                    "summary": "File mime type is in exclusion groups list.",
                    "description": "File mime type is in exclusion groups list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_GROUP",
                        "message": "File mime type is in exclusion groups list."
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the file (UUID) to which the version is being uploaded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "The binary content of the file.",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "body"
                ]
              }
            }
          }
        }
      }
    },
    "/rest/files/{id}/versions/{version_id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get a file version",
        "description": "Gets file metadata for the specified file version, such as the date it was added, its expiration date, and any tags applied to the file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version_id",
            "description": "The unique identifier (UUID) of the file version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Delete a file version",
        "description": "Deletes the specified version of the file.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version_id",
            "description": "The unique identifier (UUID) of the file version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/files/{id}/versions/{version_id}/actions/promote": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Promote a file version",
        "description": "Makes the specified version of the file the current version of the file.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version_id",
            "description": "The unique identifier (UUID) of the file version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/{id}/versions/{version_id}/actions/scan": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Scan a file version for security",
        "description": "Runs a security scan on the specified file version. Depending on system scan policies, the file is scanned for anti-virus, data loss prevention, and advanced threat protection.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version_id",
            "description": "The unique identifier (UUID) of the file version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/files/{id}/versions/{version_id}/content": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Download a file version",
        "description": "Downloads the specified file version. Must be assigned the `download` permission for the file.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version_id",
            "description": "The unique identifier (UUID) of the file version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Range",
            "description": "Range of bytes to download. e.g. `bytes=0-1024`",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/files/{id}/versions/{version_id}/preview": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get file preview metadata for a file version",
        "description": "Gets file preview metadata for the specified file version, such as the permalink for previewing the file and if the file contains a watermark. Must be assigned the view permission for the file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preview"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version_id",
            "description": "The unique identifier (UUID) of the file version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/folders": {
      "delete": {
        "tags": [
          "folders"
        ],
        "summary": "Delete a list of folders",
        "description": "Deletes multiple folders specified in the request.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/folders/actions/favorite": {
      "post": {
        "tags": [
          "favorites",
          "folders"
        ],
        "summary": "Set multiple folders as favorite",
        "description": "Set multiple folders as favorite",
        "responses": {
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "favorites",
          "folders"
        ],
        "summary": "Removes specified folders from favorites",
        "description": "Removes specified folders from favorites",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/folders/actions/permanent": {
      "delete": {
        "tags": [
          "folders"
        ],
        "summary": "Permanently delete the specified folders",
        "description": "Permanently delete the specified folders.\n               These folders will no longer be accessible by any means.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/folders/actions/recover": {
      "patch": {
        "tags": [
          "folders"
        ],
        "summary": "Recover deleted folders",
        "description": "Recover deleted folders and their children files and folders.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/folders/actions/scan": {
      "post": {
        "tags": [
          "folders"
        ],
        "summary": "Triggers on demand AV/DLP scan on multiple folders",
        "description": "Attempts to trigger an AV/DLP scan on requested folders.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "description": "List of IDs of entities to scan. Search for results that contain any of specified values of this parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/folders/shared": {
      "get": {
        "tags": [
          "folders"
        ],
        "summary": "List top level shared folders",
        "description": "Return the list of top level shared folders.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Folder"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Folder name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Folder name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "description": "Unique identifier of Object creator",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId:in",
            "description": "Unique identifier of Object creator. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Object creation date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Object creation date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Object creation date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Object creation date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Object creation date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified",
            "description": "Object modification date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gt",
            "description": "Object modification date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gte",
            "description": "Object modification date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lt",
            "description": "Object modification date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lte",
            "description": "Object modification date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Indicates that object is deleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "expire",
            "description": "Expiration date",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "expire:gt",
            "description": "Expiration date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "expire:gte",
            "description": "Expiration date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "expire:lt",
            "description": "Expiration date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "expire:lte",
            "description": "Expiration date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fileLifetime",
            "description": "Folder lifetime",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fileLifetime:gt",
            "description": "Folder lifetime. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fileLifetime:gte",
            "description": "Folder lifetime. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fileLifetime:lt",
            "description": "Folder lifetime. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fileLifetime:lte",
            "description": "Folder lifetime. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "secure",
            "description": "Folder secure flag",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "description:contains",
            "description": "Folder description. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sharedByMe",
            "description": "true - return only folders shared by me;\n                              false - return only folders shared with me;\n                              empty - return both",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "name:asc",
                "name:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/folders/{id}/actions/file": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Upload a file using multipart form data",
        "description": "Uploads the specified file using multipart form data. Must be assigned the `file_add` permission.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED, ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE, ERR_ENTITY_RESTRICTED_TYPE_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE_GROUP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                        "message": "File extension is in exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM": {
                    "summary": "File extension is in custom exclusion extensions list",
                    "description": "File extension is in custom exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM",
                        "message": "File extension is in custom exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE",
                        "message": "The specified entity mime type is not allowed."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM": {
                    "summary": "The specified file type is in custom excluded file types list.",
                    "description": "The specified file type is in custom excluded file types list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM",
                        "message": "The specified file type is in custom excluded file types list."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_GROUP": {
                    "summary": "File mime type is in exclusion groups list.",
                    "description": "File mime type is in exclusion groups list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_GROUP",
                        "message": "File mime type is in exclusion groups list."
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_DATE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the target folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "The binary content of the file.",
                    "type": "string",
                    "format": "binary"
                  },
                  "clientCreated": {
                    "description": "The date and time when the file was created on the client side.",
                    "type": "string"
                  },
                  "clientModified": {
                    "description": "The date and time when the file was last modified on the client side.",
                    "type": "string"
                  },
                  "disableAutoVersion": {
                    "description": "Indicates if the file should be prevented from being saved as a new version.",
                    "type": "boolean"
                  },
                  "note": {
                    "description": "Indicates if the file should be uploaded as a note.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "body"
                ]
              }
            }
          }
        }
      }
    },
    "/rest/folders/{id}/actions/fileBase64Encoded": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Upload a base64-encoded file",
        "description": "Uploads a specified base64-encoded file. Must be assigned the file_add permission.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED, ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE, ERR_ENTITY_RESTRICTED_TYPE_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE_GROUP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                        "message": "File extension is in exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM": {
                    "summary": "File extension is in custom exclusion extensions list",
                    "description": "File extension is in custom exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM",
                        "message": "File extension is in custom exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE",
                        "message": "The specified entity mime type is not allowed."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM": {
                    "summary": "The specified file type is in custom excluded file types list.",
                    "description": "The specified file type is in custom excluded file types list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM",
                        "message": "The specified file type is in custom excluded file types list."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_GROUP": {
                    "summary": "File mime type is in exclusion groups list.",
                    "description": "File mime type is in exclusion groups list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_GROUP",
                        "message": "File mime type is in exclusion groups list."
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the target folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Content.Post"
              }
            }
          }
        }
      }
    },
    "/rest/folders/{id}/actions/move": {
      "post": {
        "summary": "Move a folder",
        "description": "### Description:\n   Moves the specified folder to a new destination folder.\n### Precondition:\n  User must have `folder_move` permission for the folder being moved.\n  User must have `folder_add` permission for the destination folder.\n### Response:\n  Folder is moved\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DestinationFolderIdRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Folder successfully moved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder1"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_CONTAINS_LOCKED_FILES, ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_IS_MY_DIR, ERR_ENTITY_IS_SECURE_FOLDER, ERR_ENTITY_IS_SYNC_DIR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_CONTAINS_LOCKED_FILES": {
                    "summary": "Folder contains locked files",
                    "description": "Folder contains locked files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_CONTAINS_LOCKED_FILES",
                          "message": "Folder contains locked files"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_MY_DIR": {
                    "summary": "Operation not permitted on Tray Folder",
                    "description": "Operation not permitted on Tray Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_MY_DIR",
                          "message": "Operation not permitted on Tray Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SYNC_DIR": {
                    "summary": "Operation not permitted on My Folder",
                    "description": "Operation not permitted on My Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SYNC_DIR",
                          "message": "Operation not permitted on My Folder"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EXISTS",
                          "message": "Entity exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_NO_STORAGE_AVAILABLE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_NO_STORAGE_AVAILABLE": {
                    "summary": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "description": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_NO_STORAGE_AVAILABLE",
                          "message": "Folder owner's remaining storage quota does not permit for a file upload of this size."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_CANNOT_MOVE_FOLDER_TO_SELF, ERR_CANNOT_MOVE_TO_CHILD, ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_CANNOT_MOVE_FOLDER_TO_SELF": {
                    "summary": "Cannot move folder to itself",
                    "description": "Cannot move folder to itself",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_CANNOT_MOVE_FOLDER_TO_SELF",
                          "message": "Cannot move folder to itself"
                        }
                      ]
                    }
                  },
                  "ERR_CANNOT_MOVE_TO_CHILD": {
                    "summary": "Cannot move folder to its child",
                    "description": "Cannot move folder to its child",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_CANNOT_MOVE_TO_CHILD",
                          "message": "Cannot move folder to its child"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/{id}/actions/permanent": {
      "delete": {
        "tags": [
          "folders"
        ],
        "summary": "Permanently delete the specified folder",
        "description": "Permanently delete the specified folder.\n               This folder will no longer be accessible by any means.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/folders/{id}/actions/recover": {
      "patch": {
        "tags": [
          "folders"
        ],
        "summary": "Recover deleted folder",
        "description": "Recover the specified folder. This un-marks the folder for deletion.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/folders/{id}/actions/requestFile": {
      "post": {
        "summary": "Send a Request File to Folder request",
        "description": "### Description:\n  Initiates a Request File to Folder.\n### Precondition:\n  The user profile must have the necessary access rights to request files to the folder.\n### Response:\n  Successfully creates a request file and returns the request file details.\n",
        "tags": [
          "requestFile"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFileToFolderPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request File to Folder request has been successfully created."
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_DLP_LOCKED, ERR_ENTITY_IS_SECURE_FOLDER, ERR_ENTITY_NOT_SCANNED, ERR_ENTITY_VIRUS_FOUND, ERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST, ERR_LICENSE_MAX_USERS_COUNT_REACHED, ERR_USER_HAS_NO_USER_TYPE, ERR_USER_TYPE_NO_ACCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DLP_LOCKED": {
                    "summary": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "description": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DLP_LOCKED",
                          "message": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_SCANNED": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_SCANNED",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_VIRUS_FOUND": {
                    "summary": "File is infected",
                    "description": "File is infected",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_VIRUS_FOUND",
                          "message": "File is infected"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST": {
                    "summary": "Distribution list user is not allowed to register",
                    "description": "Distribution list user is not allowed to register",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST",
                          "message": "Distribution list user is not allowed to register"
                        }
                      ]
                    }
                  },
                  "ERR_LICENSE_MAX_USERS_COUNT_REACHED": {
                    "summary": "License count has been reached",
                    "description": "License count has been reached",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_LICENSE_MAX_USERS_COUNT_REACHED",
                          "message": "License count has been reached"
                        }
                      ]
                    }
                  },
                  "ERR_USER_HAS_NO_USER_TYPE": {
                    "summary": "User has no profile",
                    "description": "User has no profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_HAS_NO_USER_TYPE",
                          "message": "User has no profile"
                        }
                      ]
                    }
                  },
                  "ERR_USER_TYPE_NO_ACCESS": {
                    "summary": "Permission denied",
                    "description": "Permission denied",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_TYPE_NO_ACCESS",
                          "message": "Permission denied"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_HYPERLINK, ERR_INPUT_INVALID_DATE, ERR_INPUT_REQUIRED, ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_HYPERLINK": {
                    "summary": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "description": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_HYPERLINK",
                          "message": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_INVALID_DATE": {
                    "summary": "The input is not a valid date.",
                    "description": "The input is not a valid date.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_DATE",
                          "message": "The input is not a valid date."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_REQUIRED",
                          "message": "Field is required"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/{id}/actions/scan": {
      "post": {
        "tags": [
          "folders"
        ],
        "summary": "Triggers on demand AV/DLP folder scan",
        "description": "Attempts to trigger an AV/DLP scan on requested folder.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "folderId:in",
            "description": "List of folder IDs of entities to scan. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fileId:in",
            "description": "List of file IDs of entities to scan. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/folders/{id}/actions/sendMessage": {
      "post": {
        "tags": [
          "mail",
          "folders"
        ],
        "summary": "Send message from a folder",
        "description": "Sends a message from the specified folder to members of the folder.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_MAX_VALUE, ERR_INPUT_HTML_TAGS_INVALID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_HTML_TAGS_INVALID": {
                    "summary": "Cannot contain HTML tags other than B, I, or U",
                    "description": "Cannot contain HTML tags other than B, I, or U",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_HTML_TAGS_INVALID",
                        "message": "Cannot contain HTML tags other than B, I, or U"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessage.Post"
              }
            }
          }
        }
      }
    },
    "/rest/folders/{id}/actions/setNotifications": {
      "put": {
        "tags": [
          "notifications"
        ],
        "summary": "Set/Update notifications",
        "description": "Set/Update notifications",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_NOT_INTEGER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_NOT_INTEGER": {
                    "summary": "Input is not a valid integer",
                    "description": "Input is not a valid integer",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_INTEGER",
                        "message": "Input is not a valid integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeNested",
            "description": "Set notification for nested folders as well",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserNotification.Post"
              }
            }
          }
        }
      }
    },
    "/rest/folders/{id}/comments": {
      "get": {
        "tags": [
          "comments",
          "folders"
        ],
        "summary": "List comments for the folder",
        "description": "Returns all comments made on this folder.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comment"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the parent folder",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "parentId",
            "description": "Unique identifier of the parent comment",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "parentId:in",
            "description": "Unique identifier of the parent comment. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "description": "Unique identifier of the comment author",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId:in",
            "description": "Unique identifier of the comment author. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "The creation date of the comment.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "The creation date of the comment.. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "The creation date of the comment.. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "The creation date of the comment.. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "The creation date of the comment.. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified",
            "description": "The last modification date of the comment.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gt",
            "description": "The last modification date of the comment.. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gte",
            "description": "The last modification date of the comment.. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lt",
            "description": "The last modification date of the comment.. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lte",
            "description": "The last modification date of the comment.. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "contents:contains",
            "description": "Content of the comment. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc",
                "parentId:asc",
                "parentId:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/folders/{id}/folders": {
      "get": {
        "tags": [
          "folders"
        ],
        "summary": "List children folders of specified parent",
        "description": "Return the list of folders in the specified folder including its metadata.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Folder"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_DLI_ADMIN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_DLI_ADMIN": {
                    "summary": "Authenticated user is not a DLI Admin",
                    "description": "Authenticated user is not a DLI Admin",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_DLI_ADMIN",
                        "message": "Authenticated user is not a DLI Admin"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the parent folder",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Folder name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Folder name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "description": "Unique identifier of Object creator",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId:in",
            "description": "Unique identifier of Object creator. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Object creation date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Object creation date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Object creation date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Object creation date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Object creation date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified",
            "description": "Object modification date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gt",
            "description": "Object modification date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gte",
            "description": "Object modification date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lt",
            "description": "Object modification date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lte",
            "description": "Object modification date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Indicates that object is deleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "expire",
            "description": "Expiration date",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "expire:gt",
            "description": "Expiration date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "expire:gte",
            "description": "Expiration date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "expire:lt",
            "description": "Expiration date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "expire:lte",
            "description": "Expiration date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fileLifetime",
            "description": "Folder lifetime",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fileLifetime:gt",
            "description": "Folder lifetime. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fileLifetime:gte",
            "description": "Folder lifetime. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fileLifetime:lt",
            "description": "Folder lifetime. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "fileLifetime:lte",
            "description": "Folder lifetime. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "secure",
            "description": "Folder secure flag",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "description:contains",
            "description": "Folder description. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "name:asc",
                "name:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locate_id",
            "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "summary": "Create a folder",
        "description": "### Description:\n  Creates a new folder under the specified parent folder.\n### Precondition:\n  User must have `folder_add` permission for the folder.\n### Response:\n  Folder is created\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderCreatePostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Folder created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder1"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_DENIED, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EXISTS",
                          "message": "Entity exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/{id}/members": {
      "post": {
        "summary": "Add members to a folder",
        "description": "### Description:\n   Add members to a folder\n### Precondition:\n  User must have `user_add` permission for the folder.\n### Response:\n  New members are added to the folder\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "updateIfExists",
            "required": false,
            "description": "If set to `true`, updates the member if they already exist and have a different folder role.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "downgradeNested",
            "required": false,
            "description": "If set to `true`, demote the user member role in all applicable nested folders.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderMemberPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Members were added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderFileAddMembers"
                }
              }
            }
          },
          "207": {
            "description": "Some members were added successfully, while others failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderFileAddMembers"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_IS_MY_DIR, ERR_ENTITY_IS_SYNC_DIR, ERR_ACCESS_USER, ERR_LICENSE_MAX_USERS_COUNT_REACHED, ERR_USER_HAS_NO_USER_TYPE, ERR_USER_TYPE_NO_ACCESS, ERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST, ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS, ERR_PROFILE_COLLABORATION_DISABLED, ERR_ENTITY_IS_OWNER, ERR_ENTITY_DELETED, ERR_CLIENT_OBJECT, ERR_PROFILE_SALESFORCE_OBJECT_DISABLED, ERR_PROFILE_SALESFORCE_OBJECT_ROLE_DISALLOWED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_MY_DIR": {
                    "summary": "Operation not permitted on Tray Folder",
                    "description": "Operation not permitted on Tray Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_MY_DIR",
                          "message": "Operation not permitted on Tray Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SYNC_DIR": {
                    "summary": "Operation not permitted on My Folder",
                    "description": "Operation not permitted on My Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SYNC_DIR",
                          "message": "Operation not permitted on My Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_LICENSE_MAX_USERS_COUNT_REACHED": {
                    "summary": "License count has been reached",
                    "description": "License count has been reached",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_LICENSE_MAX_USERS_COUNT_REACHED",
                          "message": "License count has been reached"
                        }
                      ]
                    }
                  },
                  "ERR_USER_HAS_NO_USER_TYPE": {
                    "summary": "User has no profile",
                    "description": "User has no profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_HAS_NO_USER_TYPE",
                          "message": "User has no profile"
                        }
                      ]
                    }
                  },
                  "ERR_USER_TYPE_NO_ACCESS": {
                    "summary": "Permission denied",
                    "description": "Permission denied",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_TYPE_NO_ACCESS",
                          "message": "Permission denied"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST": {
                    "summary": "Distribution list user is not allowed to register",
                    "description": "Distribution list user is not allowed to register",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST",
                          "message": "Distribution list user is not allowed to register"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS": {
                    "summary": "Target user has insufficient access permissions",
                    "description": "Target user has insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS",
                          "message": "Target user has insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_COLLABORATION_DISABLED": {
                    "summary": "User's profile has no collaboration access",
                    "description": "User's profile has no collaboration access",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_COLLABORATION_DISABLED",
                          "message": "User's profile has no collaboration access"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_OWNER": {
                    "summary": "Operation not permitted on owner member",
                    "description": "Operation not permitted on owner member",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_OWNER",
                          "message": "Operation not permitted on owner member"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_CLIENT_OBJECT": {
                    "summary": "Operation is not allowed on this client object",
                    "description": "Operation is not allowed on this client object",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_CLIENT_OBJECT",
                          "message": "Operation is not allowed on this client object"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SALESFORCE_OBJECT_DISABLED": {
                    "summary": "This Salesforce object is not enabled for this profile",
                    "description": "This Salesforce object is not enabled for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SALESFORCE_OBJECT_DISABLED",
                          "message": "This Salesforce object is not enabled for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SALESFORCE_OBJECT_ROLE_DISALLOWED": {
                    "summary": "This role is disallowed for this Salesforce object",
                    "description": "This role is disallowed for this Salesforce object",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SALESFORCE_OBJECT_ROLE_DISALLOWED",
                          "message": "This role is disallowed for this Salesforce object"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS, ERR_ENTITY_ROLE_IS_ASSIGNED, ERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EXISTS",
                          "message": "Entity exists"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_ROLE_IS_ASSIGNED": {
                    "summary": "Cannot assign already assigned role",
                    "description": "Cannot assign already assigned role",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_ROLE_IS_ASSIGNED",
                          "message": "Cannot assign already assigned role"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS": {
                    "summary": "Parent folder member exists",
                    "description": "Parent folder member exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS",
                          "message": "Parent folder member exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "get": {
        "summary": "List folder members.",
        "description": "### Description:\n  Return a list of folder members.\n### Precondition:\n  User must have `user_view` permission for the folder.\n### Response:\n  List of folder members are returned.\n### Sorting:\n  Sort string syntax `FIELD_NAME:ORDER`.\n\n  ORDER can be `asc` or `desc`.\n### Sorting options:\n  | FIELD_NAME | Description |\n  |------------|-------------|\n  | id         | The member ID |\n  | userId     | The user ID |\n  | groupId    | The group ID |\n  | roleId     | The role ID |\n  | rank       | The rank of the role |\n  | email      | The member's email |\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "email",
            "required": false,
            "description": "Filter results by email address.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "description": "Filter results by user ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "groupId",
            "required": false,
            "description": "Filter results by group ID.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "roleId",
            "required": false,
            "description": "Filter results by role ID.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "userId:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Filter by a comma-separated list of user IDs. (Recommended request size <= 100)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "groupId:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Filter by a comma-separated list of LDAP Group IDs. (Recommended request size <= 100)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "roleId:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Filter by a comma-separated list of role IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "description": "Filter by the object type.",
            "schema": {
              "type": "string",
              "enum": [
                "d",
                "f"
              ]
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Sorting options.",
            "schema": {
              "type": "string",
              "enum": [
                "id:asc",
                "id:desc",
                "userId:asc",
                "userId:desc",
                "groupId:asc",
                "groupId:desc",
                "roleId:asc",
                "roleId:desc",
                "rank:asc",
                "rank:desc",
                "email:asc",
                "email:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The folders members have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Members"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_TENANT_SUSPENDED, ERR_ACCESS_USER, ERR_ACCESS_DENIED, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_TENANT_SUSPENDED": {
                    "summary": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access.",
                    "description": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_TENANT_SUSPENDED",
                          "message": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access."
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_LICENSE_EXPIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_EXPIRED": {
                    "summary": "License has expired",
                    "description": "License has expired",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_LICENSE_EXPIRED",
                          "message": "License has expired"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/{id}/members/ldapGroup": {
      "get": {
        "tags": [
          "folders"
        ],
        "summary": "List LDAP group members in a folder",
        "description": "Returns a list of LDAP group members in the specified folder.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MemberGroup"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "groupId",
            "description": "The unique identifier of group.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "groupId:in",
            "description": "The unique identifier of group.. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "roleId",
            "description": "The unique identifier of role.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "roleId:in",
            "description": "The unique identifier of role.. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "groupId:asc",
                "groupId:desc",
                "roleId:asc",
                "roleId:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/folders/{id}/members/ldapGroup/{ldap_group_id}": {
      "get": {
        "tags": [
          "folders"
        ],
        "summary": "Return the specified LDAP group member in a folder",
        "description": "Returns the specified LDAP group member in a folder.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ldap_group_id",
            "description": "The unique identifier of the LDAP group member",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "put": {
        "tags": [
          "folders"
        ],
        "summary": "Update folder LDAP group members",
        "description": "Updates LDAP group members within the folder",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ldap_group_id",
            "description": "The unique identifier (UUID) of the LDAP group member.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "downgradeNested",
            "description": "Downgrade member role for nested folders",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberGroup.Put"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a folder LDAP group member",
        "description": "### Description:\nRemoves an LDAP member from the specified folder.\n\n### Precondition:\nThe user must have the `user_remove` permission for the folder.\n\n### Response:\nThe specified folder LDAP group member is successfully removed.\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "ldap_group_id",
            "required": true,
            "description": "The unique identifier of the LDAP group.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "downgradeNested",
            "required": false,
            "description": "If set to `true`, the user's role will be removed from all nested folders.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The folder LDAP group member was successfully removed from the folder."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_INPUT_IS_OWNER, ERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_IS_OWNER": {
                    "summary": "Can not set owner role",
                    "description": "Can not set owner role",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_IS_OWNER",
                          "message": "Can not set owner role"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS": {
                    "summary": "Parent folder member exists",
                    "description": "Parent folder member exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS",
                          "message": "Parent folder member exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/{id}/members/{member_user_id}": {
      "get": {
        "tags": [
          "folders"
        ],
        "summary": "Return folder user member",
        "description": "Returns the specified user member within the folder.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "member_user_id",
            "description": "The unique identifier (UUID) of the user member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "put": {
        "tags": [
          "folders"
        ],
        "summary": "Update folder user members",
        "description": "Updates the user members within the folder.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED, ERR_INPUT_INVALID_EMAIL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_INVALID_EMAIL": {
                    "summary": "Input is not a valid email",
                    "description": "Input is not a valid email",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_INVALID_EMAIL",
                        "message": "Input is not a valid email"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "member_user_id",
            "description": "The unique identifier of the user member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "downgradeNested",
            "description": "Downgrade member role for nested folders",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Member.Put"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a folder member",
        "description": "### Description:\nRemoves a member from the specified folder.\n\n### Precondition:\nThe user must have the `user_remove` permission for the folder.\n\n### Response:\nThe specified folder member is successfully removed.\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "member_user_id",
            "required": true,
            "description": "The unique identifier (UUID) of the user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "downgradeNested",
            "required": false,
            "description": "If set to `true`, the user's role will be removed from all nested folders.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The folder member was successfully removed from the folder."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_INPUT_IS_OWNER, ERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_IS_OWNER": {
                    "summary": "Can not set owner role",
                    "description": "Can not set owner role",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_IS_OWNER",
                          "message": "Can not set owner role"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS": {
                    "summary": "Parent folder member exists",
                    "description": "Parent folder member exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS",
                          "message": "Parent folder member exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/{id}/tasks": {
      "get": {
        "tags": [
          "folders",
          "tasks"
        ],
        "summary": "Get Tasks for a folder",
        "description": "Returns all tasks for a folder",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Folder object ID of the task to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "assigneeId",
            "description": "Assigned User unique identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "assigneeId:in",
            "description": "Assigned User unique identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "due",
            "description": "Task due date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "due:gt",
            "description": "Task due date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "due:gte",
            "description": "Task due date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "due:lt",
            "description": "Task due date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "due:lte",
            "description": "Task due date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "parentId",
            "description": "Parent Comment identifier",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "parentId:in",
            "description": "Parent Comment identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "description": "Identifier of User who created a Task",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId:in",
            "description": "Identifier of User who created a Task. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Task creation date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Task creation date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Task creation date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Task creation date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Task creation date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified",
            "description": "Task modification date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gt",
            "description": "Task modification date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gte",
            "description": "Task modification date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lt",
            "description": "Task modification date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lte",
            "description": "Task modification date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "contents:contains",
            "description": "Task content. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Task status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "D",
                "P",
                "C"
              ]
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Whether the task has been deleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "due:asc",
                "due:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/folders/{id}/tree": {
      "get": {
        "tags": [
          "folders"
        ],
        "summary": "Gets the folder path by its ID",
        "description": "Gets the folder path by its ID",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_DLI_ADMIN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_DLI_ADMIN": {
                    "summary": "Authenticated user is not a DLI Admin",
                    "description": "Authenticated user is not a DLI Admin",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_DLI_ADMIN",
                        "message": "Authenticated user is not a DLI Admin"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier (UUID) of the folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/folders/{parent_id}/actions/fileFromTemplate": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Create Microsoft Office document from template",
        "description": "Creates a blank Microsoft Office document from a template.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_LOCKED, ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE, ERR_ENTITY_RESTRICTED_TYPE_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE_GROUP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  },
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                        "message": "File extension is in exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM": {
                    "summary": "File extension is in custom exclusion extensions list",
                    "description": "File extension is in custom exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM",
                        "message": "File extension is in custom exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE",
                        "message": "The specified entity mime type is not allowed."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM": {
                    "summary": "The specified file type is in custom excluded file types list.",
                    "description": "The specified file type is in custom excluded file types list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM",
                        "message": "The specified file type is in custom excluded file types list."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_GROUP": {
                    "summary": "File mime type is in exclusion groups list.",
                    "description": "File mime type is in exclusion groups list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_GROUP",
                        "message": "File mime type is in exclusion groups list."
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_DATE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "parent_id",
            "description": "ID of the parent folder",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileNameRequest.Post"
              }
            }
          }
        }
      }
    },
    "/rest/folders/{parent}/files": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Upload a file",
        "description": "Uploads the specified file. Performs a streaming upload, where the specified file is sent in the request body, and additional metadata is provided via request headers.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED, ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE, ERR_ENTITY_RESTRICTED_TYPE_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE_GROUP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                        "message": "File extension is in exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM": {
                    "summary": "File extension is in custom exclusion extensions list",
                    "description": "File extension is in custom exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM",
                        "message": "File extension is in custom exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE",
                        "message": "The specified entity mime type is not allowed."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM": {
                    "summary": "The specified file type is in custom excluded file types list.",
                    "description": "The specified file type is in custom excluded file types list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM",
                        "message": "The specified file type is in custom excluded file types list."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_GROUP": {
                    "summary": "File mime type is in exclusion groups list.",
                    "description": "File mime type is in exclusion groups list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_GROUP",
                        "message": "File mime type is in exclusion groups list."
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "parent",
            "description": "The unique identifier (UUID) of the target folder.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-KW-Note",
            "description": "Indicates if the file should be uploaded as a note.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "The binary content of the file.",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "body"
                ]
              }
            }
          }
        }
      },
      "get": {
        "summary": "Return the list of files in a folder",
        "description": "### Description:\n  Returns the list of files within the specified folder.\n### Precondition:\n  User must have `properties_view` permission for the folder.\n### Response:\n  Returns a list of files within the specified folder.\n### Sorting:\n  Sort string syntax `FIELD_NAME:ORDER`.\n\n  ORDER can be `asc` or `desc`.\n### Sorting options:\n  | FIELD_NAME | Description |\n  |------------|-------------|\n  | name       | The name of the file |\n  | created    | The creation datetime of file |\n  | modified   | The last modified datetime of file |\n  | size       | The file size (for files) |\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "parent",
            "required": true,
            "description": "The unique identifier (UUID) of the parent folder.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "required": false,
            "description": "Filter by deletion status. If true, show only deleted items; if false, show non-deleted items; if not specified, show both deleted and non-deleted items.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "description": "Filter by the name of file within the folder.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "required": false,
            "description": "Search for files whose names contain the specified characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "description": "The unique identifier of the file creator.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Search for files created by the specified user IDs. (Recommended request size <= 100)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "created",
            "required": false,
            "description": "Search for files created on the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "required": false,
            "description": "Search for files created after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "required": false,
            "description": "Search for files created on or after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "required": false,
            "description": "Search for files created before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "required": false,
            "description": "Search for files created on or before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified",
            "required": false,
            "description": "Search for files modified on the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified:gt",
            "required": false,
            "description": "Search for files modified after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified:gte",
            "required": false,
            "description": "Search for files modified on or after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified:lt",
            "required": false,
            "description": "Search for files modified before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified:lte",
            "required": false,
            "description": "Search for files modified on or before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "expire",
            "required": false,
            "description": "Search for files that expire on the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "expire:gt",
            "required": false,
            "description": "Search for files that expire after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "expire:gte",
            "required": false,
            "description": "Search for files that expire on or after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "expire:lt",
            "required": false,
            "description": "Search for files that expire before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "expire:lte",
            "required": false,
            "description": "Search for files that expire on or before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "isPushed",
            "required": false,
            "description": "Search for files that have been pushed.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Sorting options.",
            "schema": {
              "type": "string",
              "enum": [
                "name:asc",
                "name:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc",
                "size:asc",
                "size:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of files in the folder is returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderChildrenFiles"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/hostnames": {
      "get": {
        "tags": [
          "hostnames"
        ],
        "summary": "List hostnames",
        "description": "Returns a list of hostnames",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Hostname"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "alias_name",
            "description": "Alias name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "alias_name:contains",
            "description": "Alias name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tenant_id",
            "description": "Tenant ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "tenant_id:gt",
            "description": "Tenant ID. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "tenant_id:gte",
            "description": "Tenant ID. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "tenant_id:lt",
            "description": "Tenant ID. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "tenant_id:lte",
            "description": "Tenant ID. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Alias name deleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "disabled",
            "description": "Alias name disabled",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "alias_name:asc",
                "alias_name:desc",
                "tenant_id:asc",
                "tenant_id:desc",
                "deleted:asc",
                "deleted:desc",
                "disabled:asc",
                "disabled:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "hostnames"
        ],
        "summary": "Deletes list of hostnames",
        "description": "Deletes list of hostnames.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "hostnames"
        ],
        "summary": "Create an alias hostname",
        "description": "Create an alias hostname.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hostname"
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED, ERR_INPUT_NOT_BOOLEAN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_NOT_BOOLEAN": {
                    "summary": "Input is not a valid boolean",
                    "description": "Input is not a valid boolean",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_BOOLEAN",
                        "message": "Input is not a valid boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hostname.Post"
              }
            }
          }
        }
      }
    },
    "/rest/hostnames/{id}": {
      "get": {
        "tags": [
          "hostnames"
        ],
        "summary": "Get hostname info from the hostname ID",
        "description": "Returns the details of the specified hostname.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hostname"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the hostname to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "hostnames"
        ],
        "summary": "Disable alias hostname",
        "description": "Disable the specified hostname.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the hostname to disable",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hostname.Put"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "hostnames"
        ],
        "summary": "Mark specified hostname as deleted.",
        "description": "Marks the specified hostname as deleted.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the hostname",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/jobs/{id}": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Retrieve information about scheduled job in queue.",
        "description": "Return job information for the specified job. e.g.: I want to check job status for copy Repositories Gateway file from tray",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the job",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "jobs"
        ],
        "summary": "Execute job",
        "description": "Execute job",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the job",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/languages": {
      "get": {
        "tags": [
          "languages"
        ],
        "summary": "List languages",
        "description": "Returns a list of available languages.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Language"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Language name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Language name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "symbol",
            "description": "Language symbol",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc",
                "symbol:asc",
                "symbol:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/languages/{id}": {
      "get": {
        "tags": [
          "languages"
        ],
        "summary": "Get a language",
        "description": "Returns the details of a specified language including language symbol, name, and link.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the language to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/ldapGroups": {
      "get": {
        "tags": [
          "ldapGroups"
        ],
        "summary": "Returns a list of LDAP groups.",
        "description": "Returns a list of LDAP groups that have been enabled through the kiteworks admin.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LdapGroup"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "LDAP group name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "LDAP group name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email",
            "description": "LDAP group Email",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email:contains",
            "description": "LDAP group Email. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc",
                "dn:asc",
                "dn:desc",
                "email:asc",
                "email:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "ldapGroups"
        ],
        "summary": "Create an LDAP group",
        "description": "Creates an LDAP group",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED, ERR_INPUT_INVALID_EMAIL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_INVALID_EMAIL": {
                    "summary": "Input is not a valid email",
                    "description": "Input is not a valid email",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_INVALID_EMAIL",
                        "message": "Input is not a valid email"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapGroup.Post"
              }
            }
          }
        }
      }
    },
    "/rest/ldapGroups/{id}": {
      "get": {
        "tags": [
          "ldapGroups"
        ],
        "summary": "Gets an LDAP group",
        "description": "Returns the details of a specified LDAP group.\n                  This includes the settings from the admin.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapGroup"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LDAP group to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "ldapGroups"
        ],
        "summary": "Updates an LDAP group",
        "description": "Updates an LDAP group",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LDAP to update",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapGroup.Put"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ldapGroups"
        ],
        "summary": "Deletes an LDAP group",
        "description": "Deletes an LDAP group",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the LDAP group to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/locations": {
      "post": {
        "tags": [
          "locations"
        ],
        "summary": "Create a location entry.",
        "description": "Creates a location entry by providing a name.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_SYSTEM_ADMIN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_SYSTEM_ADMIN": {
                    "summary": "Authenticated user is not a System Admin",
                    "description": "Authenticated user is not a System Admin",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_SYSTEM_ADMIN",
                        "message": "Authenticated user is not a System Admin"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_FORMAT, ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location.Post"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get locations",
        "description": "Get locations",
        "tags": [
          "locations"
        ],
        "responses": {
          "200": {
            "description": "Return list of locations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_FORMAT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_INVALID_FORMAT": {
                    "summary": "The input is invalid.",
                    "description": "The input is invalid.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_FORMAT",
                          "message": "The input is invalid."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/locations/{id}": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Return location name.",
        "description": "Returns the name of a specified location.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the location to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "locations"
        ],
        "summary": "Delete a location.",
        "description": "Delete the specified location.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_SYSTEM_ADMIN, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_SYSTEM_ADMIN": {
                    "summary": "Authenticated user is not a System Admin",
                    "description": "Authenticated user is not a System Admin",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_SYSTEM_ADMIN",
                        "message": "Authenticated user is not a System Admin"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the location to remove from",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/mail": {
      "get": {
        "summary": "Get messages in mail folders",
        "description": "### Description:\n  Gets a list of messages from your mailbox folders: Inbox, Sent & Tracked, Drafts, Trash, and Outbox. For each email, the list contains the email ID, date the email was sent and or sent status.\n### Precondition:\n  None.\n### Response:\n  Returns the list of messages in your mail folders.\n### Sorting:\n  Sort string syntax `FIELD_NAME:ORDER`.\n\n  ORDER can be `asc` or `desc`.\n### Sorting options:\n  | FIELD_NAME | Description |\n  |------------|-------------|\n  | id         | The id of the mail |\n  | date       | The sent date of the mail |\n  | status     | The current status of the mail |\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          },
          {
            "in": "query",
            "name": "senderId",
            "required": false,
            "description": "Unique identifier of the user who sent the email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "senderId:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Unique identifier of the user who sent the email. Search for results that match any of the specified values of this parameter. (Recommended request size <= 100)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "isRecipient",
            "required": false,
            "description": "Filter results to include only emails where the current user is a recipient.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "read",
            "required": false,
            "description": "Filter results based on whether the email has been read by the current user.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "date",
            "required": false,
            "description": "Filter results by the email creation date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "date:gt",
            "required": false,
            "description": "Filter results created after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "date:gte",
            "required": false,
            "description": "Filters emails created on or after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "date:lt",
            "required": false,
            "description": "Filter emails created before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "date:lte",
            "required": false,
            "description": "Filter emails created on or before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified_date",
            "required": false,
            "description": "Filter emails by the last modified date of the email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified_date:gt",
            "required": false,
            "description": "Filters emails modified after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified_date:gte",
            "required": false,
            "description": "Filters emails modified on or after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified_date:lt",
            "required": false,
            "description": "Filters emails modified before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified_date:lte",
            "required": false,
            "description": "Filters emails modified on or before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "required": false,
            "description": "Indicates whether the email has been deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "emailPackageId",
            "required": false,
            "description": "Filter results by the unique identifier of the email package.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "emailPackageId:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Filter results by email package identifiers. Matches any of the specified values.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "templateId",
            "required": false,
            "description": "Filter results by the unique identifier of the email template.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "templateId:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Filter results by email template identifiers. Matches any of the specified values.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Filter results by email status.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sent",
                  "draft",
                  "queued",
                  "error",
                  "self_send",
                  "pending_review",
                  "denied"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "isPreview",
            "required": false,
            "description": "Filter results to include only preview emails if set to true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "isUserSent",
            "required": false,
            "description": "Filter results to include only emails sent by the user if set to true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "bucket",
            "required": false,
            "description": "Filter results by the email bucket category.",
            "schema": {
              "type": "string",
              "enum": [
                "inbox",
                "draft",
                "outgoing",
                "sent",
                "trash"
              ]
            }
          },
          {
            "in": "query",
            "name": "returnCustomWebForm",
            "required": false,
            "description": "Includes emails with custom web forms in the results.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "customWebFormOnly",
            "required": false,
            "description": "Filters results to only include emails with custom web forms.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "trackingOnly",
            "required": false,
            "description": "Filters results to only include emails with tracking access.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "approvalRequestOnly",
            "required": false,
            "description": "Filters results to only include emails with approval requests.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "webFormId",
            "required": false,
            "description": "Filter results by unique identifier of the email web form.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Sorting options.",
            "schema": {
              "type": "string",
              "enum": [
                "id:asc",
                "id:desc",
                "date:asc",
                "date:desc",
                "status:asc",
                "status:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "sharedMailboxId",
            "required": false,
            "description": "Unique identifier of the shared mailbox. Filters results belonging to the shared mailbox.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the list of messages successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mails"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "delete": {
        "summary": "Delete draft messages",
        "description": "### Description:\n  Using email IDs, deletes up to 100 draft messages from your Drafts folder.\n### Precondition:\n  None.\n### Response:\n  Deletes the draft messages from the Drafts folder.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "emailId:in",
            "required": true,
            "explode": true,
            "style": "form",
            "description": "Comma-separated list of email IDs to be processed.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The email messages were successfully deleted."
          },
          "207": {
            "description": "Some emaik messages were deleted successfully, while others failed."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_NOT_SENDER, ERR_ACCESS_USER, ERR_ENTITY_EMAIL_IS_SENT, ERR_PROFILE_MAIL_DISABLED, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_NOT_SENDER": {
                    "summary": "Authenticated user is not the sender of the specified email",
                    "description": "Authenticated user is not the sender of the specified email",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_NOT_SENDER",
                          "message": "Authenticated user is not the sender of the specified email"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EMAIL_IS_SENT": {
                    "summary": "Email can no longer be deleted",
                    "description": "Email can no longer be deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EMAIL_IS_SENT",
                          "message": "Email can no longer be deleted"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_MAIL_DISABLED": {
                    "summary": "User's profile has no mail access",
                    "description": "User's profile has no mail access",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_MAIL_DISABLED",
                          "message": "User's profile has no mail access"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/actions/counters": {
      "get": {
        "summary": "Get number of messages in mail folders",
        "description": "### Description:\n  Gets the number of messages from your mailbox folders: Inbox, Sent & Tracked, Drafts, Trash, and Outbox.\n### Precondition:\n  None.\n### Response:\n  Returns the number of messages in each mail folder.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnCustomWebForm",
            "required": false,
            "description": "Indicates whether to include emails with custom web forms in the result.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the number of messages in each mail folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailCounters"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/actions/deletePermanent": {
      "patch": {
        "summary": "Delete messages",
        "description": "### Description:\n  Using email IDs, deletes messages from your Inbox and Sent folders. Depending on the system retention policy, the messages may be recoverable until permanently deleted by the system.\n### Preconditions:\n  Must be the sender or recipient of the messages.\n### Response:\n  Deletes the messages from your Inbox and Sent folders.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "emailId:in",
            "required": true,
            "explode": true,
            "style": "form",
            "description": "Comma-separated list of email IDs to be processed.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The emails were successfully permanently deleted."
          },
          "207": {
            "description": "Partially successful operation. Some emails could not be permanently deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationInteger"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_NOT_DELETED, ERR_ENTITY_EMAIL_IS_NOT_COMPLETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_DELETED": {
                    "summary": "Entity is not deleted",
                    "description": "Entity is not deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_DELETED",
                          "message": "Entity is not deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EMAIL_IS_NOT_COMPLETED": {
                    "summary": "Email is not completed",
                    "description": "Email is not completed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EMAIL_IS_NOT_COMPLETED",
                          "message": "Email is not completed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "410": {
            "description": "Gone<br /><br /><i>Possible error codes: </i>ERR_ENTITY_DELETED_PERMANENTLY",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_DELETED_PERMANENTLY": {
                    "summary": "Entity is deleted permanently",
                    "description": "Entity is deleted permanently",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED_PERMANENTLY",
                          "message": "Entity is deleted permanently"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/actions/distributionList": {
      "get": {
        "tags": [
          "mail"
        ],
        "summary": "Get email addresses from distribution list",
        "description": "Gets a list of email addresses from a distribution list.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistributionList"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "description": "The email address to check or expand.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "expand",
            "description": "Indicates whether to include the email addresses of distribution list members.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "emailId",
            "description": "If provided, the distribution list will include only members who have received this specific email.",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/mail/actions/read": {
      "patch": {
        "summary": "Mark messages as read",
        "description": "### Description:\n  Using email IDs, marks messages as read in your Inbox.\n### Preconditions:\n  Must be the sender or recipient of the messages.\n### Response:\n  Returns partial or success responses indicating messages that were marked as read.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "emailId:in",
            "required": true,
            "explode": true,
            "style": "form",
            "description": "Comma-separated list of email IDs to be processed.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The email messages were successfully marked as read."
          },
          "207": {
            "description": "Partially successful operation. Some email messages could not be marked as read.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationInteger"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/actions/recover": {
      "patch": {
        "summary": "Recover deleted messages",
        "description": "### Description:\n  Using email IDs, recovers deleted messages from your Trash folder.\n### Preconditions:\n  Must be the sender or recipient of the messages.\n### Response:\n  Returns partial or success responses indicating messages that were  moved to the Inbox folder.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "emailId:in",
            "required": true,
            "explode": true,
            "style": "form",
            "description": "Comma-separated list of email IDs to be processed.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The emails were successfully recovered."
          },
          "207": {
            "description": "Partially successful operation. Some emails could not be recovered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationInteger"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_NOT_DELETED, ERR_ENTITY_EMAIL_IS_NOT_COMPLETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_DELETED": {
                    "summary": "Entity is not deleted",
                    "description": "Entity is not deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_DELETED",
                          "message": "Entity is not deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EMAIL_IS_NOT_COMPLETED": {
                    "summary": "Email is not completed",
                    "description": "Email is not completed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EMAIL_IS_NOT_COMPLETED",
                          "message": "Email is not completed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "410": {
            "description": "Gone<br /><br /><i>Possible error codes: </i>ERR_ENTITY_DELETED_PERMANENTLY",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_DELETED_PERMANENTLY": {
                    "summary": "Entity is deleted permanently",
                    "description": "Entity is deleted permanently",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED_PERMANENTLY",
                          "message": "Entity is deleted permanently"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/actions/sendFile": {
      "post": {
        "summary": "Send files",
        "description": "### Description:\n  Creates an email message and sends the file attachments through Kiteworks.\n### Precondition:\n  Must be assigned a user profile with the ability to send mail.\n### Response:\n  Sends the files to recipients.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseSendMailPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Email created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_IS_DELETED_ATTACHMENT, ERR_ENTITY_IS_SECURE_FOLDER, ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED, ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED, ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED, ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED, ERR_PROFILE_RETURN_RECEIPT_DISABLED, ERR_PROFILE_RETURN_RECEIPT_ENABLED, ERR_PROFILE_SECURE_EMAIL_DISABLED, ERR_PROFILE_SELF_COPY_DISABLED, ERR_PROFILE_SELF_COPY_ENABLED, ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED, ERR_USER_HAS_NO_USER_TYPE, ERR_USER_TYPE_NO_ACCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_DELETED_ATTACHMENT": {
                    "summary": "Requested Attachment(s) is deleted",
                    "description": "Requested Attachment(s) is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_DELETED_ATTACHMENT",
                          "message": "Requested Attachment(s) is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED": {
                    "summary": "The mail cannot be sent without any recipients",
                    "description": "The mail cannot be sent without any recipients",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED",
                          "message": "The mail cannot be sent without any recipients"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED": {
                    "summary": "Email message body cannot be secured if email does not require authentication",
                    "description": "Email message body cannot be secured if email does not require authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED",
                          "message": "Email message body cannot be secured if email does not require authentication"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED": {
                    "summary": "This profile is not allowed to include fingerprint with sent files",
                    "description": "This profile is not allowed to include fingerprint with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED",
                          "message": "This profile is not allowed to include fingerprint with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED": {
                    "summary": "This profile cannot disable including fingerprint with sent files",
                    "description": "This profile cannot disable including fingerprint with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED",
                          "message": "This profile cannot disable including fingerprint with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_RETURN_RECEIPT_DISABLED": {
                    "summary": "This profile is not allowed to set receipt notification with sent files",
                    "description": "This profile is not allowed to set receipt notification with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_RETURN_RECEIPT_DISABLED",
                          "message": "This profile is not allowed to set receipt notification with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_RETURN_RECEIPT_ENABLED": {
                    "summary": "This profile cannot disable return receipt notification with sent files",
                    "description": "This profile cannot disable return receipt notification with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_RETURN_RECEIPT_ENABLED",
                          "message": "This profile cannot disable return receipt notification with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SECURE_EMAIL_DISABLED": {
                    "summary": "This profile is not allowed to send secure emails",
                    "description": "This profile is not allowed to send secure emails",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SECURE_EMAIL_DISABLED",
                          "message": "This profile is not allowed to send secure emails"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SELF_COPY_DISABLED": {
                    "summary": "This profile is not allowed to send copy to self",
                    "description": "This profile is not allowed to send copy to self",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SELF_COPY_DISABLED",
                          "message": "This profile is not allowed to send copy to self"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SELF_COPY_ENABLED": {
                    "summary": "Cannot disable self copy for this profile",
                    "description": "Cannot disable self copy for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SELF_COPY_ENABLED",
                          "message": "Cannot disable self copy for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED": {
                    "summary": "This profile is not allowed to send files to external users",
                    "description": "This profile is not allowed to send files to external users",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED",
                          "message": "This profile is not allowed to send files to external users"
                        }
                      ]
                    }
                  },
                  "ERR_USER_HAS_NO_USER_TYPE": {
                    "summary": "User has no profile",
                    "description": "User has no profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_HAS_NO_USER_TYPE",
                          "message": "User has no profile"
                        }
                      ]
                    }
                  },
                  "ERR_USER_TYPE_NO_ACCESS": {
                    "summary": "Permission denied",
                    "description": "Permission denied",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_TYPE_NO_ACCESS",
                          "message": "Permission denied"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_EXCEEDS_MAX_VALUE, ERR_INPUT_HYPERLINK, ERR_INPUT_INVALID_DATE, ERR_INPUT_PAST_DATE, ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_EXCEEDS_MAX_VALUE": {
                    "summary": "Field value exceeds maximum allowed value",
                    "description": "Field value exceeds maximum allowed value",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EXCEEDS_MAX_VALUE",
                          "message": "Field value exceeds maximum allowed value"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_HYPERLINK": {
                    "summary": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "description": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_HYPERLINK",
                          "message": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_INVALID_DATE": {
                    "summary": "The input is not a valid date.",
                    "description": "The input is not a valid date.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_DATE",
                          "message": "The input is not a valid date."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_PAST_DATE": {
                    "summary": "Field value should be future date",
                    "description": "Field value should be future date",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_PAST_DATE",
                          "message": "Field value should be future date"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/actions/sendFileExternal": {
      "post": {
        "summary": "Send files",
        "description": "### Description:\n  Creates an email message and sends the file attachments through Kiteworks.\n### Precondition:\n  Must be assigned a user profile with the ability to send mail.\n### Response:\n  Sends the files to recipients.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseSendMailPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Email created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_IS_DELETED_ATTACHMENT, ERR_ENTITY_IS_SECURE_FOLDER, ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED, ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED, ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED, ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED, ERR_PROFILE_RETURN_RECEIPT_DISABLED, ERR_PROFILE_RETURN_RECEIPT_ENABLED, ERR_PROFILE_SECURE_EMAIL_DISABLED, ERR_PROFILE_SELF_COPY_DISABLED, ERR_PROFILE_SELF_COPY_ENABLED, ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED, ERR_USER_HAS_NO_USER_TYPE, ERR_USER_TYPE_NO_ACCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_DELETED_ATTACHMENT": {
                    "summary": "Requested Attachment(s) is deleted",
                    "description": "Requested Attachment(s) is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_DELETED_ATTACHMENT",
                          "message": "Requested Attachment(s) is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED": {
                    "summary": "The mail cannot be sent without any recipients",
                    "description": "The mail cannot be sent without any recipients",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED",
                          "message": "The mail cannot be sent without any recipients"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED": {
                    "summary": "Email message body cannot be secured if email does not require authentication",
                    "description": "Email message body cannot be secured if email does not require authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED",
                          "message": "Email message body cannot be secured if email does not require authentication"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED": {
                    "summary": "This profile is not allowed to include fingerprint with sent files",
                    "description": "This profile is not allowed to include fingerprint with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED",
                          "message": "This profile is not allowed to include fingerprint with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED": {
                    "summary": "This profile cannot disable including fingerprint with sent files",
                    "description": "This profile cannot disable including fingerprint with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED",
                          "message": "This profile cannot disable including fingerprint with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_RETURN_RECEIPT_DISABLED": {
                    "summary": "This profile is not allowed to set receipt notification with sent files",
                    "description": "This profile is not allowed to set receipt notification with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_RETURN_RECEIPT_DISABLED",
                          "message": "This profile is not allowed to set receipt notification with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_RETURN_RECEIPT_ENABLED": {
                    "summary": "This profile cannot disable return receipt notification with sent files",
                    "description": "This profile cannot disable return receipt notification with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_RETURN_RECEIPT_ENABLED",
                          "message": "This profile cannot disable return receipt notification with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SECURE_EMAIL_DISABLED": {
                    "summary": "This profile is not allowed to send secure emails",
                    "description": "This profile is not allowed to send secure emails",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SECURE_EMAIL_DISABLED",
                          "message": "This profile is not allowed to send secure emails"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SELF_COPY_DISABLED": {
                    "summary": "This profile is not allowed to send copy to self",
                    "description": "This profile is not allowed to send copy to self",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SELF_COPY_DISABLED",
                          "message": "This profile is not allowed to send copy to self"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SELF_COPY_ENABLED": {
                    "summary": "Cannot disable self copy for this profile",
                    "description": "Cannot disable self copy for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SELF_COPY_ENABLED",
                          "message": "Cannot disable self copy for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED": {
                    "summary": "This profile is not allowed to send files to external users",
                    "description": "This profile is not allowed to send files to external users",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED",
                          "message": "This profile is not allowed to send files to external users"
                        }
                      ]
                    }
                  },
                  "ERR_USER_HAS_NO_USER_TYPE": {
                    "summary": "User has no profile",
                    "description": "User has no profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_HAS_NO_USER_TYPE",
                          "message": "User has no profile"
                        }
                      ]
                    }
                  },
                  "ERR_USER_TYPE_NO_ACCESS": {
                    "summary": "Permission denied",
                    "description": "Permission denied",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_TYPE_NO_ACCESS",
                          "message": "Permission denied"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_EXCEEDS_MAX_VALUE, ERR_INPUT_HYPERLINK, ERR_INPUT_INVALID_DATE, ERR_INPUT_PAST_DATE, ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_EXCEEDS_MAX_VALUE": {
                    "summary": "Field value exceeds maximum allowed value",
                    "description": "Field value exceeds maximum allowed value",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EXCEEDS_MAX_VALUE",
                          "message": "Field value exceeds maximum allowed value"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_HYPERLINK": {
                    "summary": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "description": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_HYPERLINK",
                          "message": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_INVALID_DATE": {
                    "summary": "The input is not a valid date.",
                    "description": "The input is not a valid date.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_DATE",
                          "message": "The input is not a valid date."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_PAST_DATE": {
                    "summary": "Field value should be future date",
                    "description": "Field value should be future date",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_PAST_DATE",
                          "message": "Field value should be future date"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/actions/trash": {
      "patch": {
        "summary": "Move messages to Trash",
        "description": "### Description:\n  Using email IDs, moves messages from your Inbox and Sent folders to the Trash folder.\n### Preconditions:\n  Must be the sender or recipient of the messages.\n### Response:\n  Deletes the messages from the Inbox and Sent folders.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "emailId:in",
            "required": true,
            "explode": true,
            "style": "form",
            "description": "Comma-separated list of email IDs to be processed.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The emails were successfully moved to trash."
          },
          "207": {
            "description": "Partially successful operation. Some emails could not be moved to trash.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationInteger"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_EMAIL_IS_NOT_COMPLETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EMAIL_IS_NOT_COMPLETED": {
                    "summary": "Email is not completed",
                    "description": "Email is not completed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EMAIL_IS_NOT_COMPLETED",
                          "message": "Email is not completed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/actions/unread": {
      "patch": {
        "summary": "Mark messages as unread",
        "description": "### Description:\n  Using email IDs, marks messages as read in your Inbox.\n### Preconditions:\n  Must be the sender or recipient of the messages.\n### Response:\n  Returns partial or success responses indicating messages that were marked as unread.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "emailId:in",
            "required": true,
            "explode": true,
            "style": "form",
            "description": "Comma-separated list of email IDs to be processed.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The email messages were successfully marked as unread."
          },
          "207": {
            "description": "Partially successful operation. Some email messages could not be marked as unread.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationInteger"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/actions/withdrawFiles/users/{userId}": {
      "delete": {
        "tags": [
          "mail"
        ],
        "summary": "Withdraw all files from the emails of deleted or demoted users",
        "description": "Withdraws all files from the emails of users who have been deleted or demoted.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The unique identifier of the user from whom to withdraw files.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "emailId:in",
            "description": "A list of email ids which will be processed",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/mail/{emailId}/attachments/actions/zip": {
      "get": {
        "tags": [
          "mail"
        ],
        "summary": "Download email attachments in ZIP format",
        "description": "Using email IDs, downloads a set of email attachments in ZIP format from your Inbox and Sent folders.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "emailId",
            "description": "The unique identifier of the email for downloading attachments as a ZIP file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "attachmentId:in",
            "description": "The unique identifier of the attachment.. Search for results that contain any of specified values of this parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "The name of the ZIP file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ref",
            "description": "The reference ID of the email (Mandatory if the email can be accessed without authentication).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "username",
            "description": "The email address of the user requesting the file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "utcOffset",
            "description": "The user's timezone offset in seconds. For example, UTC+08:00 = 28800 seconds.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/mail/{emailId}/attachments/actions/zipStatus": {
      "get": {
        "tags": [
          "mail"
        ],
        "summary": "Get email attachment security status",
        "description": "Using email IDs, gets the security scan results of email attachments in your Inbox and Sent folders, prior to downloading in ZIP format.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "emailId",
            "description": "The unique identifier of the email.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "attachmentId:in",
            "description": "The unique identifier of the attachment.. Search for results that contain any of specified values of this parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ref",
            "description": "The reference ID of the email (Mandatory if the email can be accessed without authentication).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/mail/{emailId}/attachments/report": {
      "get": {
        "tags": [
          "mail"
        ],
        "summary": "Get downloaded email attachment report",
        "description": "Using email IDs, generates a report listing email attachments that were downloaded by users.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "emailId",
            "description": "The unique identifier of the email.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/mail/{emailId}/attachments/reportCsv": {
      "get": {
        "tags": [
          "mail"
        ],
        "summary": "Get and export downloaded email attachment report",
        "description": "Using email IDs, generates a report listing email attachments that were downloaded by users and export the report to CSV format.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "emailId",
            "description": "The unique identifier of the email.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/mail/{emailId}/attachments/{id}/content": {
      "get": {
        "tags": [
          "mail"
        ],
        "summary": "Download email attachment",
        "description": "Downloads the specified file attached to a message.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "emailId",
            "description": "The unique identifier of the email containing the attachment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the attachment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Range",
            "description": "Range of bytes to download. e.g. `bytes=0-1024`",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ref",
            "description": "The reference code for the email. Required if the email can be accessed without authentication.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/mail/{emailId}/attachments/{id}/preview": {
      "get": {
        "tags": [
          "mail"
        ],
        "summary": "Get email attachment preview metadata",
        "description": "Gets file preview metadata about an email attachment, such as the permalink for previewing the file and if the file contains a watermark. Must be assigned the `view` permission for the file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preview"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "emailId",
            "description": "The unique identifier of the email containing the attachment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the attachment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ref",
            "description": "The reference ID of the email (Mandatory if the email can be accessed without authentication).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/mail/{id}": {
      "get": {
        "summary": "Get email metadata",
        "description": "### Description:\n  Gets metadata from the specified email message.\n### Preconditions:\n  None.\n### Response:\n  Returns the email metadata.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          },
          {
            "in": "query",
            "name": "ref",
            "required": false,
            "description": "The reference ID of the email (Mandatory if the email can be accessed without authentication).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "print_flag",
            "required": false,
            "description": "Indicates whether the user clicked to print the email.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The email was successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mail"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "delete": {
        "summary": "Delete draft message",
        "description": "### Description:\n  Deletes a message from your Drafts folder.\n### Preconditions:\n  None.\n### Response:\n  Deletes the draft message from the Drafts folder.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The draft email was successfully deleted."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_NOT_SENDER, ERR_ACCESS_USER, ERR_ENTITY_EMAIL_IS_SENT, ERR_PROFILE_MAIL_DISABLED, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_NOT_SENDER": {
                    "summary": "Authenticated user is not the sender of the specified email",
                    "description": "Authenticated user is not the sender of the specified email",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_NOT_SENDER",
                          "message": "Authenticated user is not the sender of the specified email"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EMAIL_IS_SENT": {
                    "summary": "Email can no longer be deleted",
                    "description": "Email can no longer be deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EMAIL_IS_SENT",
                          "message": "Email can no longer be deleted"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_MAIL_DISABLED": {
                    "summary": "User's profile has no mail access",
                    "description": "User's profile has no mail access",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_MAIL_DISABLED",
                          "message": "User's profile has no mail access"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/{id}/actions/sendFile": {
      "put": {
        "summary": "Update and send a draft message",
        "description": "### Description:\n  Updates and sends a draft message.\n### Precondition:\n  Must be assigned a user profile with the ability to send mail.\n### Response:\n  Sends the updated message to recipients.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseSendMailPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Draft email updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_NOT_SENDER, ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_EMAIL_NOT_DRAFT, ERR_ENTITY_IS_DELETED_ATTACHMENT, ERR_ENTITY_IS_SECURE_FOLDER, ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED, ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED, ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED, ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED, ERR_PROFILE_RETURN_RECEIPT_DISABLED, ERR_PROFILE_RETURN_RECEIPT_ENABLED, ERR_PROFILE_SECURE_EMAIL_DISABLED, ERR_PROFILE_SELF_COPY_DISABLED, ERR_PROFILE_SELF_COPY_ENABLED, ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED, ERR_USER_HAS_NO_USER_TYPE, ERR_USER_TYPE_NO_ACCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_NOT_SENDER": {
                    "summary": "Authenticated user is not the sender of the specified email",
                    "description": "Authenticated user is not the sender of the specified email",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_NOT_SENDER",
                          "message": "Authenticated user is not the sender of the specified email"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EMAIL_NOT_DRAFT": {
                    "summary": "The specified email can no longer be updated.",
                    "description": "The specified email can no longer be updated.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EMAIL_NOT_DRAFT",
                          "message": "The specified email can no longer be updated."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_DELETED_ATTACHMENT": {
                    "summary": "Requested Attachment(s) is deleted",
                    "description": "Requested Attachment(s) is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_DELETED_ATTACHMENT",
                          "message": "Requested Attachment(s) is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED": {
                    "summary": "The mail cannot be sent without any recipients",
                    "description": "The mail cannot be sent without any recipients",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED",
                          "message": "The mail cannot be sent without any recipients"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED": {
                    "summary": "Email message body cannot be secured if email does not require authentication",
                    "description": "Email message body cannot be secured if email does not require authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED",
                          "message": "Email message body cannot be secured if email does not require authentication"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED": {
                    "summary": "This profile is not allowed to include fingerprint with sent files",
                    "description": "This profile is not allowed to include fingerprint with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED",
                          "message": "This profile is not allowed to include fingerprint with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED": {
                    "summary": "This profile cannot disable including fingerprint with sent files",
                    "description": "This profile cannot disable including fingerprint with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED",
                          "message": "This profile cannot disable including fingerprint with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_RETURN_RECEIPT_DISABLED": {
                    "summary": "This profile is not allowed to set receipt notification with sent files",
                    "description": "This profile is not allowed to set receipt notification with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_RETURN_RECEIPT_DISABLED",
                          "message": "This profile is not allowed to set receipt notification with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_RETURN_RECEIPT_ENABLED": {
                    "summary": "This profile cannot disable return receipt notification with sent files",
                    "description": "This profile cannot disable return receipt notification with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_RETURN_RECEIPT_ENABLED",
                          "message": "This profile cannot disable return receipt notification with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SECURE_EMAIL_DISABLED": {
                    "summary": "This profile is not allowed to send secure emails",
                    "description": "This profile is not allowed to send secure emails",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SECURE_EMAIL_DISABLED",
                          "message": "This profile is not allowed to send secure emails"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SELF_COPY_DISABLED": {
                    "summary": "This profile is not allowed to send copy to self",
                    "description": "This profile is not allowed to send copy to self",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SELF_COPY_DISABLED",
                          "message": "This profile is not allowed to send copy to self"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SELF_COPY_ENABLED": {
                    "summary": "Cannot disable self copy for this profile",
                    "description": "Cannot disable self copy for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SELF_COPY_ENABLED",
                          "message": "Cannot disable self copy for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED": {
                    "summary": "This profile is not allowed to send files to external users",
                    "description": "This profile is not allowed to send files to external users",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED",
                          "message": "This profile is not allowed to send files to external users"
                        }
                      ]
                    }
                  },
                  "ERR_USER_HAS_NO_USER_TYPE": {
                    "summary": "User has no profile",
                    "description": "User has no profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_HAS_NO_USER_TYPE",
                          "message": "User has no profile"
                        }
                      ]
                    }
                  },
                  "ERR_USER_TYPE_NO_ACCESS": {
                    "summary": "Permission denied",
                    "description": "Permission denied",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_TYPE_NO_ACCESS",
                          "message": "Permission denied"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_EXCEEDS_MAX_VALUE, ERR_INPUT_HYPERLINK, ERR_INPUT_INVALID_DATE, ERR_INPUT_PAST_DATE, ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_EXCEEDS_MAX_VALUE": {
                    "summary": "Field value exceeds maximum allowed value",
                    "description": "Field value exceeds maximum allowed value",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EXCEEDS_MAX_VALUE",
                          "message": "Field value exceeds maximum allowed value"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_HYPERLINK": {
                    "summary": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "description": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_HYPERLINK",
                          "message": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_INVALID_DATE": {
                    "summary": "The input is not a valid date.",
                    "description": "The input is not a valid date.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_DATE",
                          "message": "The input is not a valid date."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_PAST_DATE": {
                    "summary": "Field value should be future date",
                    "description": "Field value should be future date",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_PAST_DATE",
                          "message": "Field value should be future date"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/{id}/actions/sendFileExternal": {
      "put": {
        "summary": "Update and send a draft message",
        "description": "### Description:\n  Updates and sends a draft message.\n### Precondition:\n  Must be assigned a user profile with the ability to send mail.\n### Response:\n  Sends the updated message to recipients.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseSendMailPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Draft email updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_NOT_SENDER, ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_EMAIL_NOT_DRAFT, ERR_ENTITY_IS_DELETED_ATTACHMENT, ERR_ENTITY_IS_SECURE_FOLDER, ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED, ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED, ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED, ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED, ERR_PROFILE_RETURN_RECEIPT_DISABLED, ERR_PROFILE_RETURN_RECEIPT_ENABLED, ERR_PROFILE_SECURE_EMAIL_DISABLED, ERR_PROFILE_SELF_COPY_DISABLED, ERR_PROFILE_SELF_COPY_ENABLED, ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED, ERR_USER_HAS_NO_USER_TYPE, ERR_USER_TYPE_NO_ACCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_NOT_SENDER": {
                    "summary": "Authenticated user is not the sender of the specified email",
                    "description": "Authenticated user is not the sender of the specified email",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_NOT_SENDER",
                          "message": "Authenticated user is not the sender of the specified email"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EMAIL_NOT_DRAFT": {
                    "summary": "The specified email can no longer be updated.",
                    "description": "The specified email can no longer be updated.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EMAIL_NOT_DRAFT",
                          "message": "The specified email can no longer be updated."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_DELETED_ATTACHMENT": {
                    "summary": "Requested Attachment(s) is deleted",
                    "description": "Requested Attachment(s) is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_DELETED_ATTACHMENT",
                          "message": "Requested Attachment(s) is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED": {
                    "summary": "The mail cannot be sent without any recipients",
                    "description": "The mail cannot be sent without any recipients",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED",
                          "message": "The mail cannot be sent without any recipients"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED": {
                    "summary": "Email message body cannot be secured if email does not require authentication",
                    "description": "Email message body cannot be secured if email does not require authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED",
                          "message": "Email message body cannot be secured if email does not require authentication"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED": {
                    "summary": "This profile is not allowed to include fingerprint with sent files",
                    "description": "This profile is not allowed to include fingerprint with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED",
                          "message": "This profile is not allowed to include fingerprint with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED": {
                    "summary": "This profile cannot disable including fingerprint with sent files",
                    "description": "This profile cannot disable including fingerprint with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED",
                          "message": "This profile cannot disable including fingerprint with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_RETURN_RECEIPT_DISABLED": {
                    "summary": "This profile is not allowed to set receipt notification with sent files",
                    "description": "This profile is not allowed to set receipt notification with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_RETURN_RECEIPT_DISABLED",
                          "message": "This profile is not allowed to set receipt notification with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_RETURN_RECEIPT_ENABLED": {
                    "summary": "This profile cannot disable return receipt notification with sent files",
                    "description": "This profile cannot disable return receipt notification with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_RETURN_RECEIPT_ENABLED",
                          "message": "This profile cannot disable return receipt notification with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SECURE_EMAIL_DISABLED": {
                    "summary": "This profile is not allowed to send secure emails",
                    "description": "This profile is not allowed to send secure emails",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SECURE_EMAIL_DISABLED",
                          "message": "This profile is not allowed to send secure emails"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SELF_COPY_DISABLED": {
                    "summary": "This profile is not allowed to send copy to self",
                    "description": "This profile is not allowed to send copy to self",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SELF_COPY_DISABLED",
                          "message": "This profile is not allowed to send copy to self"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SELF_COPY_ENABLED": {
                    "summary": "Cannot disable self copy for this profile",
                    "description": "Cannot disable self copy for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SELF_COPY_ENABLED",
                          "message": "Cannot disable self copy for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED": {
                    "summary": "This profile is not allowed to send files to external users",
                    "description": "This profile is not allowed to send files to external users",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED",
                          "message": "This profile is not allowed to send files to external users"
                        }
                      ]
                    }
                  },
                  "ERR_USER_HAS_NO_USER_TYPE": {
                    "summary": "User has no profile",
                    "description": "User has no profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_HAS_NO_USER_TYPE",
                          "message": "User has no profile"
                        }
                      ]
                    }
                  },
                  "ERR_USER_TYPE_NO_ACCESS": {
                    "summary": "Permission denied",
                    "description": "Permission denied",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_TYPE_NO_ACCESS",
                          "message": "Permission denied"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_EXCEEDS_MAX_VALUE, ERR_INPUT_HYPERLINK, ERR_INPUT_INVALID_DATE, ERR_INPUT_PAST_DATE, ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_EXCEEDS_MAX_VALUE": {
                    "summary": "Field value exceeds maximum allowed value",
                    "description": "Field value exceeds maximum allowed value",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EXCEEDS_MAX_VALUE",
                          "message": "Field value exceeds maximum allowed value"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_HYPERLINK": {
                    "summary": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "description": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_HYPERLINK",
                          "message": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_INVALID_DATE": {
                    "summary": "The input is not a valid date.",
                    "description": "The input is not a valid date.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_DATE",
                          "message": "The input is not a valid date."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_PAST_DATE": {
                    "summary": "Field value should be future date",
                    "description": "Field value should be future date",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_PAST_DATE",
                          "message": "Field value should be future date"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/{id}/attachments": {
      "get": {
        "summary": "Get email attachments for an mail message",
        "description": "### Description:\n  Using an email ID, gets a list of email attachments and their metadata.\n### Preconditions:\n  Must be the sender or recipient of the messages.\n### Response:\n  Returns the list of email attachments.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "ref",
            "required": false,
            "description": "The reference ID of the email (Mandatory if the email can be accessed without authentication).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The email attachments have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachments"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/{id}/attachments/{attachment_id}": {
      "get": {
        "summary": "Get email attachment by attachment ID",
        "description": "### Description:\n  Using a file attachment ID, gets the name of the file attached to the message and its metadata.\n### Preconditions:\n  Must be the sender or recipient of the message.\n### Response:\n  Returns the file name and metadata.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "attachment_id",
            "required": true,
            "description": "The unique identifier (UUID) of the attachment.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ref",
            "required": false,
            "description": "The reference ID of the email (Mandatory if the email can be accessed without authentication).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The email attachment has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/{id}/packages": {
      "get": {
        "summary": "Get email package",
        "description": "### Description:\n  Returns the package associated with a specified email.\n### Preconditions:\n  - The user must have access to the email.\n### Response:\n  - The requested email package is returned.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "ref",
            "required": false,
            "description": "The reference ID of the email (Mandatory if the email can be accessed without authentication).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The email package has been successfully returned."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/{id}/recipients": {
      "get": {
        "summary": "Get email recipients",
        "description": "### Description:\n  Gets a list of recipient email addresses from an email message.\n### Preconditions:\n  Must be the sender or recipient of the message.\n### Response:\n  Returns recipient email addresses.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          },
          {
            "in": "query",
            "name": "ref",
            "required": false,
            "description": "The reference ID of the email (Mandatory if the email can be accessed without authentication).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id:asc",
                "id:desc",
                "type:asc",
                "type:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "The recipient type -> 0: TO, 1: CC, 2: BCC",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32",
                "enum": [
                  0,
                  1,
                  2
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of mail recipients has been successfully returned."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mobileSyncItems": {
      "post": {
        "tags": [
          "mobileSync"
        ],
        "summary": "Set file as a mobile sync item",
        "description": "Set file as a mobile sync item.",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MobileSync.Post"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Returns a list of mobile sync items for current user",
        "description": "Returns a list of mobile sync items for current user",
        "tags": [
          "mobileSync"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          },
          {
            "in": "query",
            "name": "avStatus",
            "required": false,
            "description": "Search by avStatus",
            "schema": {
              "type": "string",
              "enum": [
                "allowed",
                "disallowed",
                "scanning"
              ]
            }
          },
          {
            "in": "query",
            "name": "dlpStatus",
            "required": false,
            "description": "Search by dlpStatus",
            "schema": {
              "type": "string",
              "enum": [
                "allowed",
                "disallowed",
                "scanning"
              ]
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created:asc",
                "created:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of mobile sync items for current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MobileSyncList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_TENANT_SUSPENDED, ERR_ACCESS_USER, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_TENANT_SUSPENDED": {
                    "summary": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access.",
                    "description": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_TENANT_SUSPENDED",
                          "message": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access."
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_LICENSE_EXPIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_EXPIRED": {
                    "summary": "License has expired",
                    "description": "License has expired",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_LICENSE_EXPIRED",
                          "message": "License has expired"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mobileSyncItems/{id}": {
      "delete": {
        "tags": [
          "mobileSync"
        ],
        "summary": "Remove mobile sync item",
        "description": "Removing mobile sync item",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the mobile sync item to be removed",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "get": {
        "summary": "Retrieve information about mobile sync item specified.",
        "description": "Retrieve information about mobile sync item specified.",
        "tags": [
          "mobileSync"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the entity.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mobile sync item specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MobileSync"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_TENANT_SUSPENDED, ERR_ACCESS_USER, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_TENANT_SUSPENDED": {
                    "summary": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access.",
                    "description": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_TENANT_SUSPENDED",
                          "message": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access."
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_LICENSE_EXPIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_LICENSE_EXPIRED": {
                    "summary": "License has expired",
                    "description": "License has expired",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_LICENSE_EXPIRED",
                          "message": "License has expired"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/notifications": {
      "get": {
        "tags": [
          "notifications"
        ],
        "summary": "List notifications",
        "description": "Returns list of notifications",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserNotification"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "description": "ID of user who will send email notifications to end users",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userId:in",
            "description": "ID of user who will send email notifications to end users. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "objectId",
            "description": "Id of folder included in Notification",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "objectId:in",
            "description": "Id of folder included in Notification. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fileAdded",
            "description": "Whether the notification is about the file added",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "commentAdded",
            "description": "Whether the notification is about the comment added",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "userId:asc",
                "userId:desc",
                "objectId:asc",
                "objectId:desc",
                "fileAdded:asc",
                "fileAdded:desc",
                "commentAdded:asc",
                "commentAdded:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/notifications/{object_id}": {
      "delete": {
        "tags": [
          "notifications"
        ],
        "summary": "Remove notification options",
        "description": "Remove notification option",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "description": "Object ID of the folder to remove notification options",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/permissions/comment/{comment_id}": {
      "get": {
        "tags": [
          "comments",
          "permissions"
        ],
        "summary": "Return the list of permissions available on a comment",
        "description": "Return available permissions",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permission"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "comment_id",
            "description": "Id of the comment",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "id",
            "description": "Unique action identifier",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "description": "Unique action identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Action name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Action name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "allowed",
            "description": "Determines if one has permissions to perform action",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "enabled",
            "description": "Determines if given action is available considering current object state (locked, deleted, etc)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/permissions/file/{file_id}": {
      "get": {
        "tags": [
          "files",
          "permissions"
        ],
        "summary": "Get file permissions",
        "description": "Gets the requestor\u2019s permissions for the specified file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permission"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "file_id",
            "description": "ID of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "id",
            "description": "Unique action identifier",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "description": "Unique action identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Action name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Action name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "allowed",
            "description": "Determines if one has permissions to perform action",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "enabled",
            "description": "Determines if given action is available considering current object state (locked, deleted, etc)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/permissions/files": {
      "get": {
        "tags": [
          "files",
          "permissions"
        ],
        "summary": "Get file permissions for a set of files",
        "description": "Gets the requestor's permissions for the specified files.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilePermissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "Search for results that contain any of specified values of this parameter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Action name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Action name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "allowed",
            "description": "Determines if one has permissions to perform action",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "enabled",
            "description": "Determines if given action is available considering current object state (locked, deleted, etc)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "action_id",
            "description": "Unique action identifier",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "action_id:in",
            "description": "Unique action identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/permissions/folder/{id}": {
      "get": {
        "summary": "List folder permissions",
        "description": "### Description:\n  Return the list of permissions associated with the specified folder.\n### Precondition:\n  The user must be a member of the folder.\n### Response:\n  Returns a list of available permissions for the specified folder.\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "actionId",
            "required": false,
            "description": "The unique identifier for the action.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "List of unique action identifiers. Search for results that match any of the specified values.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "description": "The name of the action.",
            "schema": {
              "type": "string",
              "enum": [
                "view",
                "download",
                "comment_view",
                "comment_add",
                "comment_edit",
                "comment_reply",
                "comment_delete",
                "task_view",
                "task_update_status",
                "notification_subscribe",
                "notification_unsubscribe",
                "properties_view",
                "file_send",
                "tray_add",
                "favorite_add",
                "file_copy",
                "mobile_sync",
                "file_preview_send",
                "folder_copy",
                "message_send",
                "task_add",
                "task_edit",
                "task_delete",
                "user_view",
                "children_view_deleted",
                "folder_add",
                "file_add",
                "folder_delete",
                "lock",
                "unlock",
                "file_recover",
                "version_view",
                "version_create",
                "version_promote",
                "version_delete",
                "file_delete",
                "file_edit",
                "properties_edit",
                "user_add",
                "user_edit",
                "user_remove",
                "rename",
                "folder_recover",
                "folder_permanent_delete",
                "sync_enable",
                "sync_disable",
                "file_permanent_delete",
                "user_add_external",
                "user_edit_external",
                "user_remove_external",
                "mobile_sync_push",
                "mobile_sync_unpush",
                "folder_move",
                "file_move",
                "top_shared_folder_delete"
              ]
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "required": false,
            "description": "Action name filter. Search for actions whose names contain the specified characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned the list of permissions for the specified folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderPermissionsRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/permissions/task/{task_id}": {
      "get": {
        "tags": [
          "permissions",
          "tasks"
        ],
        "summary": "Return the list of permissions available on a task",
        "description": "Return available permissions",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permission"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "task_id",
            "description": "Comment Id of the task",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "id",
            "description": "Unique action identifier",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "description": "Unique action identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Action name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Action name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "allowed",
            "description": "Determines if one has permissions to perform action",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "enabled",
            "description": "Determines if given action is available considering current object state (locked, deleted, etc)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/profiles": {
      "get": {
        "tags": [
          "profiles"
        ],
        "summary": "List user types (profiles)",
        "description": "Returns a list of user types (profiles) supported by kiteworks",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Profile"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Profile name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Profile name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "profiles"
        ],
        "summary": "Add custom profile",
        "description": "Add new custom profile cloned from built in profile",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_EXISTS",
                        "message": "Entity exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_NOT_IN_RANGE, ERR_INPUT_NOT_ALPHA_DASH, ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Profile.Post"
              }
            }
          }
        }
      }
    },
    "/rest/profiles/{id}": {
      "get": {
        "tags": [
          "profiles"
        ],
        "summary": "Return user type (profile) details",
        "description": "Returns the details of a specified user type. e.g.: Returns user type (profile) id and name.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user type (profile) to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "profiles"
        ],
        "summary": "Update profile",
        "description": "Update existing profile, Remove/Retain users data if Profile has no Collaboration Access",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_NOT_BOOLEAN, ERR_INPUT_ATTRIBUTE_FORBIDDEN, ERR_INPUT_REQUIRED, ERR_INPUT_NOT_STRING, ERR_INPUT_NOT_INTEGER, ERR_INPUT_MIN_VALUE, ERR_INPUT_NOT_IN_LIST, ERR_INPUT_MAX_VALUE, ERR_INPUT_NOT_LESS_THEN, ERR_INPUT_NOT_ALLOWED, ERR_INPUT_INVALID, ERR_INPUT_NOT_ARRAY",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_NOT_BOOLEAN": {
                    "summary": "Input is not a valid boolean",
                    "description": "Input is not a valid boolean",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_BOOLEAN",
                        "message": "Input is not a valid boolean"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_NOT_INTEGER": {
                    "summary": "Input is not a valid integer",
                    "description": "Input is not a valid integer",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_INTEGER",
                        "message": "Input is not a valid integer"
                      }
                    }
                  },
                  "ERR_INPUT_MIN_VALUE": {
                    "summary": "The specified input below the minimum allowed value.",
                    "description": "The specified input below the minimum allowed value.",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_MIN_VALUE",
                        "message": "The specified input below the minimum allowed value."
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the profile to be modified",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeaturesList.Put"
              }
            }
          }
        }
      }
    },
    "/rest/profiles/{id}/replace/{new_profile}": {
      "delete": {
        "tags": [
          "profiles"
        ],
        "summary": "Delete custom profile and set new profile instead of deleted profile",
        "description": "Delete custom profile and set new profile instead of deleted profile",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_NOT_BOOLEAN, ERR_INPUT_ATTRIBUTE_FORBIDDEN, ERR_INPUT_REQUIRED, ERR_INPUT_NOT_STRING",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_NOT_BOOLEAN": {
                    "summary": "Input is not a valid boolean",
                    "description": "Input is not a valid boolean",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_BOOLEAN",
                        "message": "Input is not a valid boolean"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the custom profile to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "new_profile",
            "description": "Id of the new profile to be assigned for affected users",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDemoteOptions.Post"
              }
            }
          }
        }
      }
    },
    "/rest/profiles/{id}/users": {
      "get": {
        "tags": [
          "profiles"
        ],
        "summary": "Return list of users with the specified type",
        "description": "Returns the list of users who have the specified type. e.g.:\n                  Return me the user names and email addresses of all the Restricted Users.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user type (profile) to retrieve users for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "email",
            "description": "Filter users based on their email address.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email:contains",
            "description": "Filter users based on their email address.. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Filter users based on their full name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Filter users based on their full name.. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "Filter users based on their metadata information.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "metadataContains",
            "description": "Filter users whose metadata contains the specified characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Filter users based on whether they have been deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "active",
            "description": "Filter users based on whether they are active in the system.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "verified",
            "description": "Filter users based on their verification status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "suspended",
            "description": "Filter users based on whether they are suspended.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "isRecipient",
            "description": "Filter users who are recipients of specific items.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "allowsCollaboration",
            "description": "Filter users whose profiles allow collaboration access.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Filter users based on the creation date of their account.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "created:asc",
                "created:desc",
                "email:asc",
                "email:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locate_id",
            "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "put": {
        "tags": [
          "profiles"
        ],
        "summary": "Bulk update user types (profiles)",
        "description": "Bulk update the types (profiles) of users.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_NOT_BOOLEAN, ERR_INPUT_ATTRIBUTE_FORBIDDEN, ERR_INPUT_REQUIRED, ERR_INPUT_NOT_STRING",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_NOT_BOOLEAN": {
                    "summary": "Input is not a valid boolean",
                    "description": "Input is not a valid boolean",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_BOOLEAN",
                        "message": "Input is not a valid boolean"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user type (profile).",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of user IDs to be assigned to the user type (profile).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDemoteOptions.Post"
              }
            }
          }
        }
      }
    },
    "/rest/public/mail/actions/sendFile": {
      "post": {
        "summary": "Send files",
        "description": "### Description:\n  Creates an email message and sends the file attachments through Kiteworks.\n### Precondition:\n  Must be assigned a user profile with the ability to send mail.\n### Response:\n  Sends the files to recipients.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseSendMailPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Email created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_IS_DELETED_ATTACHMENT, ERR_ENTITY_IS_SECURE_FOLDER, ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED, ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED, ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED, ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED, ERR_PROFILE_RETURN_RECEIPT_DISABLED, ERR_PROFILE_RETURN_RECEIPT_ENABLED, ERR_PROFILE_SECURE_EMAIL_DISABLED, ERR_PROFILE_SELF_COPY_DISABLED, ERR_PROFILE_SELF_COPY_ENABLED, ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED, ERR_USER_HAS_NO_USER_TYPE, ERR_USER_TYPE_NO_ACCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_DELETED_ATTACHMENT": {
                    "summary": "Requested Attachment(s) is deleted",
                    "description": "Requested Attachment(s) is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_DELETED_ATTACHMENT",
                          "message": "Requested Attachment(s) is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED": {
                    "summary": "The mail cannot be sent without any recipients",
                    "description": "The mail cannot be sent without any recipients",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED",
                          "message": "The mail cannot be sent without any recipients"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED": {
                    "summary": "Email message body cannot be secured if email does not require authentication",
                    "description": "Email message body cannot be secured if email does not require authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED",
                          "message": "Email message body cannot be secured if email does not require authentication"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED": {
                    "summary": "This profile is not allowed to include fingerprint with sent files",
                    "description": "This profile is not allowed to include fingerprint with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED",
                          "message": "This profile is not allowed to include fingerprint with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED": {
                    "summary": "This profile cannot disable including fingerprint with sent files",
                    "description": "This profile cannot disable including fingerprint with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED",
                          "message": "This profile cannot disable including fingerprint with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_RETURN_RECEIPT_DISABLED": {
                    "summary": "This profile is not allowed to set receipt notification with sent files",
                    "description": "This profile is not allowed to set receipt notification with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_RETURN_RECEIPT_DISABLED",
                          "message": "This profile is not allowed to set receipt notification with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_RETURN_RECEIPT_ENABLED": {
                    "summary": "This profile cannot disable return receipt notification with sent files",
                    "description": "This profile cannot disable return receipt notification with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_RETURN_RECEIPT_ENABLED",
                          "message": "This profile cannot disable return receipt notification with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SECURE_EMAIL_DISABLED": {
                    "summary": "This profile is not allowed to send secure emails",
                    "description": "This profile is not allowed to send secure emails",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SECURE_EMAIL_DISABLED",
                          "message": "This profile is not allowed to send secure emails"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SELF_COPY_DISABLED": {
                    "summary": "This profile is not allowed to send copy to self",
                    "description": "This profile is not allowed to send copy to self",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SELF_COPY_DISABLED",
                          "message": "This profile is not allowed to send copy to self"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SELF_COPY_ENABLED": {
                    "summary": "Cannot disable self copy for this profile",
                    "description": "Cannot disable self copy for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SELF_COPY_ENABLED",
                          "message": "Cannot disable self copy for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED": {
                    "summary": "This profile is not allowed to send files to external users",
                    "description": "This profile is not allowed to send files to external users",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED",
                          "message": "This profile is not allowed to send files to external users"
                        }
                      ]
                    }
                  },
                  "ERR_USER_HAS_NO_USER_TYPE": {
                    "summary": "User has no profile",
                    "description": "User has no profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_HAS_NO_USER_TYPE",
                          "message": "User has no profile"
                        }
                      ]
                    }
                  },
                  "ERR_USER_TYPE_NO_ACCESS": {
                    "summary": "Permission denied",
                    "description": "Permission denied",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_TYPE_NO_ACCESS",
                          "message": "Permission denied"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_EXCEEDS_MAX_VALUE, ERR_INPUT_HYPERLINK, ERR_INPUT_INVALID_DATE, ERR_INPUT_PAST_DATE, ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_EXCEEDS_MAX_VALUE": {
                    "summary": "Field value exceeds maximum allowed value",
                    "description": "Field value exceeds maximum allowed value",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EXCEEDS_MAX_VALUE",
                          "message": "Field value exceeds maximum allowed value"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_HYPERLINK": {
                    "summary": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "description": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_HYPERLINK",
                          "message": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_INVALID_DATE": {
                    "summary": "The input is not a valid date.",
                    "description": "The input is not a valid date.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_DATE",
                          "message": "The input is not a valid date."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_PAST_DATE": {
                    "summary": "Field value should be future date",
                    "description": "Field value should be future date",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_PAST_DATE",
                          "message": "Field value should be future date"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/public/mail/{id}/actions/sendFile": {
      "put": {
        "summary": "Update and send a draft message",
        "description": "### Description:\n  Updates and sends a draft message.\n### Precondition:\n  Must be assigned a user profile with the ability to send mail.\n### Response:\n  Sends the updated message to recipients.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseSendMailPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Draft email updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_NOT_SENDER, ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_EMAIL_NOT_DRAFT, ERR_ENTITY_IS_DELETED_ATTACHMENT, ERR_ENTITY_IS_SECURE_FOLDER, ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED, ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED, ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED, ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED, ERR_PROFILE_RETURN_RECEIPT_DISABLED, ERR_PROFILE_RETURN_RECEIPT_ENABLED, ERR_PROFILE_SECURE_EMAIL_DISABLED, ERR_PROFILE_SELF_COPY_DISABLED, ERR_PROFILE_SELF_COPY_ENABLED, ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED, ERR_USER_HAS_NO_USER_TYPE, ERR_USER_TYPE_NO_ACCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_NOT_SENDER": {
                    "summary": "Authenticated user is not the sender of the specified email",
                    "description": "Authenticated user is not the sender of the specified email",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_NOT_SENDER",
                          "message": "Authenticated user is not the sender of the specified email"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EMAIL_NOT_DRAFT": {
                    "summary": "The specified email can no longer be updated.",
                    "description": "The specified email can no longer be updated.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EMAIL_NOT_DRAFT",
                          "message": "The specified email can no longer be updated."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_DELETED_ATTACHMENT": {
                    "summary": "Requested Attachment(s) is deleted",
                    "description": "Requested Attachment(s) is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_DELETED_ATTACHMENT",
                          "message": "Requested Attachment(s) is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED": {
                    "summary": "The mail cannot be sent without any recipients",
                    "description": "The mail cannot be sent without any recipients",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED",
                          "message": "The mail cannot be sent without any recipients"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED": {
                    "summary": "Email message body cannot be secured if email does not require authentication",
                    "description": "Email message body cannot be secured if email does not require authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED",
                          "message": "Email message body cannot be secured if email does not require authentication"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED": {
                    "summary": "This profile is not allowed to include fingerprint with sent files",
                    "description": "This profile is not allowed to include fingerprint with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED",
                          "message": "This profile is not allowed to include fingerprint with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED": {
                    "summary": "This profile cannot disable including fingerprint with sent files",
                    "description": "This profile cannot disable including fingerprint with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED",
                          "message": "This profile cannot disable including fingerprint with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_RETURN_RECEIPT_DISABLED": {
                    "summary": "This profile is not allowed to set receipt notification with sent files",
                    "description": "This profile is not allowed to set receipt notification with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_RETURN_RECEIPT_DISABLED",
                          "message": "This profile is not allowed to set receipt notification with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_RETURN_RECEIPT_ENABLED": {
                    "summary": "This profile cannot disable return receipt notification with sent files",
                    "description": "This profile cannot disable return receipt notification with sent files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_RETURN_RECEIPT_ENABLED",
                          "message": "This profile cannot disable return receipt notification with sent files"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SECURE_EMAIL_DISABLED": {
                    "summary": "This profile is not allowed to send secure emails",
                    "description": "This profile is not allowed to send secure emails",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SECURE_EMAIL_DISABLED",
                          "message": "This profile is not allowed to send secure emails"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SELF_COPY_DISABLED": {
                    "summary": "This profile is not allowed to send copy to self",
                    "description": "This profile is not allowed to send copy to self",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SELF_COPY_DISABLED",
                          "message": "This profile is not allowed to send copy to self"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SELF_COPY_ENABLED": {
                    "summary": "Cannot disable self copy for this profile",
                    "description": "Cannot disable self copy for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SELF_COPY_ENABLED",
                          "message": "Cannot disable self copy for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED": {
                    "summary": "This profile is not allowed to send files to external users",
                    "description": "This profile is not allowed to send files to external users",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED",
                          "message": "This profile is not allowed to send files to external users"
                        }
                      ]
                    }
                  },
                  "ERR_USER_HAS_NO_USER_TYPE": {
                    "summary": "User has no profile",
                    "description": "User has no profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_HAS_NO_USER_TYPE",
                          "message": "User has no profile"
                        }
                      ]
                    }
                  },
                  "ERR_USER_TYPE_NO_ACCESS": {
                    "summary": "Permission denied",
                    "description": "Permission denied",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_TYPE_NO_ACCESS",
                          "message": "Permission denied"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_EXCEEDS_MAX_VALUE, ERR_INPUT_HYPERLINK, ERR_INPUT_INVALID_DATE, ERR_INPUT_PAST_DATE, ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_EXCEEDS_MAX_VALUE": {
                    "summary": "Field value exceeds maximum allowed value",
                    "description": "Field value exceeds maximum allowed value",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EXCEEDS_MAX_VALUE",
                          "message": "Field value exceeds maximum allowed value"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_HYPERLINK": {
                    "summary": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "description": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_HYPERLINK",
                          "message": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_INVALID_DATE": {
                    "summary": "The input is not a valid date.",
                    "description": "The input is not a valid date.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_DATE",
                          "message": "The input is not a valid date."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_PAST_DATE": {
                    "summary": "Field value should be future date",
                    "description": "Field value should be future date",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_PAST_DATE",
                          "message": "Field value should be future date"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/requestFile/{ref}": {
      "delete": {
        "tags": [
          "requestFile"
        ],
        "summary": "Expire the request file",
        "description": "Expire the request file by setting its status to deleted.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestFile"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "description": "The unique reference of the Request File upload link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "summary": "Returns Request File Info by ref",
        "description": "### Description:\n  Retrieves detailed information about a Request File using the provided reference (ref).\n### Precondition:\n  The user must have valid authentication and appropriate access to view the request file information.\n### Response:\n  Returns the details of the specified request file, including its associated metadata and status.\n",
        "tags": [
          "requestFile"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "required": true,
            "description": "The unique reference of the Request File upload link.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "read",
            "required": false,
            "description": "Indicates whether to log the view event. Defaults to true.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Request File Info, including the details of the specified request file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestFile"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_REQUEST_FILE, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_REQUEST_FILE": {
                    "summary": "Operation not permitted. This request requires authorization",
                    "description": "Operation not permitted. This request requires authorization",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_REQUEST_FILE",
                          "message": "Operation not permitted. This request requires authorization"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_REQUEST_FILE_EXPIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_REQUEST_FILE_EXPIRED": {
                    "summary": "The request file has expired",
                    "description": "The request file has expired",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_REQUEST_FILE_EXPIRED",
                          "message": "The request file has expired"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/requestFile/{ref}/actions/file": {
      "post": {
        "tags": [
          "files",
          "requestFile"
        ],
        "summary": "Upload a file requested by user",
        "description": "Uploads the specified file to a folder or inbox in response to a request from another user.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE, ERR_ENTITY_RESTRICTED_TYPE_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE_GROUP, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                        "message": "File extension is in exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM": {
                    "summary": "File extension is in custom exclusion extensions list",
                    "description": "File extension is in custom exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM",
                        "message": "File extension is in custom exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE",
                        "message": "The specified entity mime type is not allowed."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM": {
                    "summary": "The specified file type is in custom excluded file types list.",
                    "description": "The specified file type is in custom excluded file types list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM",
                        "message": "The specified file type is in custom excluded file types list."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_GROUP": {
                    "summary": "File mime type is in exclusion groups list.",
                    "description": "File mime type is in exclusion groups list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_GROUP",
                        "message": "File mime type is in exclusion groups list."
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_DATE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "description": "The unique reference of the Request File upload link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "The binary content of the file.",
                    "type": "string",
                    "format": "binary"
                  },
                  "clientCreated": {
                    "description": "The date and time when the file was created on the client side.",
                    "type": "string"
                  },
                  "clientModified": {
                    "description": "The date and time when the file was last modified on the client side.",
                    "type": "string"
                  }
                },
                "required": [
                  "body"
                ]
              }
            }
          }
        }
      }
    },
    "/rest/requestFile/{ref}/comment/{object_id}": {
      "post": {
        "tags": [
          "files",
          "requestFile"
        ],
        "summary": "Add comment to a file requested by user",
        "description": "Uses a unique ID of a Request File upload link to add a comment to a specified file that was uploaded to a folder or inbox upon request.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_MAX_VALUE, ERR_INPUT_HTML_TAGS_INVALID, ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_HTML_TAGS_INVALID": {
                    "summary": "Cannot contain HTML tags other than B, I, or U",
                    "description": "Cannot contain HTML tags other than B, I, or U",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_HTML_TAGS_INVALID",
                        "message": "Cannot contain HTML tags other than B, I, or U"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "description": "The unique reference of the Request File upload link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "object_id",
            "description": "Object ID of the file being commented on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment.Post"
              }
            }
          }
        }
      }
    },
    "/rest/requestFile/{ref}/preview/{object_id}": {
      "get": {
        "tags": [
          "requestFile"
        ],
        "summary": "Retrieve information about the file preview.",
        "description": "Retrieve information about the file preview attached to the request file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preview"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "description": "The unique reference of the Request File upload link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "object_id",
            "description": "ID of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/requestFile/{ref}/sources": {
      "get": {
        "tags": [
          "requestFile"
        ],
        "summary": "Retrieve Request File attached files included by the requester",
        "description": "Returns attached files included by the requester.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestFileSource"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "description": "The unique reference of the Request File upload link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/requestFile/{ref}/sources/{object_id}": {
      "get": {
        "tags": [
          "requestFile"
        ],
        "summary": "Read file info",
        "description": "Retrieve detailed properties of a specific source file using its reference.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Content"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "description": "The unique reference of the Request File upload link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "object_id",
            "description": "ID of the source file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/requestFile/{ref}/sources/{object_id}/content": {
      "get": {
        "tags": [
          "files",
          "requestFile"
        ],
        "summary": "Download files from folder in request files to folder message",
        "description": "Downloads the specified file that was made available to recipients in a request files to folder message.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Content"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "description": "The unique reference of the Request File upload link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "object_id",
            "description": "The unique identifier of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Range",
            "description": "Range of bytes to download. e.g. `bytes=0-1024`",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/requestFile/{ref}/uploads": {
      "get": {
        "tags": [
          "requestFile"
        ],
        "summary": "Retrieve Request File uploaded files by the logged-in uploader",
        "description": "Returns the list of files uploaded by the currently logged-in uploader for a specific Request File.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestFileUpload"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "description": "The unique reference of the Request File upload link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/requestFile/{ref}/uploads/{object_id}": {
      "get": {
        "tags": [
          "requestFile"
        ],
        "summary": "Read uploaded file info",
        "description": "Retrieve detailed information about an uploaded file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Content"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "description": "The unique reference of the Request File upload link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "object_id",
            "description": "ID of the uploaded file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "requestFile"
        ],
        "summary": "Delete uploaded file",
        "description": "Delete a specific file that has been uploaded as part of a request.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Content"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_LOCKED, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_LOCKED": {
                    "summary": "File is locked",
                    "description": "File is locked",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_LOCKED",
                        "message": "File is locked"
                      }
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "description": "The unique reference of the Request File upload link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "object_id",
            "description": "ID of the uploaded file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/requestFile/{ref}/uploads/{object_id}/content": {
      "get": {
        "tags": [
          "files",
          "requestFile"
        ],
        "summary": "Download files uploaded to request files to folder or inbox message",
        "description": "Downloads the specified file that was uploaded to a request files to folder or inbox message.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Content"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "description": "The unique reference of the Request File upload link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "object_id",
            "description": "The unique identifier of the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Range",
            "description": "Range of bytes to download. e.g. `bytes=0-1024`",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "List user roles",
        "description": "Returns a list of available user roles. e.g.:\n                   kiteworks default roles are Manager, Collaborator, Downloader, Viewer, Uploader.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Role name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Role name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "disabled",
            "description": "Whether Role is disabled",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Type of role",
            "schema": {
              "type": "string",
              "enum": [
                "d",
                "f"
              ]
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc",
                "rank:asc",
                "rank:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/roles/{id}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get a role",
        "description": "Returns the details of a specified role including the mask that indicates\n                  what functionality this role is allowed to do.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the role to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/search": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Return lists of files/folders/emails from search results",
        "description": "Return lists of files/folders/emails from search results",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Search"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "objectId",
            "description": "Id of folder to search",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "content",
            "description": "Search by content",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "content:contains",
            "description": "Search by content. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "content:startswith",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "description": "Search by description",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description:contains",
            "description": "Search by description. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description:startswith",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "user",
            "description": "Search by user",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified",
            "description": "Search by modified date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gt",
            "description": "Search by modified date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gte",
            "description": "Search by modified date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lt",
            "description": "Search by modified date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lte",
            "description": "Search by modified date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Search by created date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Search by created date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Search by created date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Search by created date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Search by created date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "locked",
            "description": "Search by lock status",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locked:gt",
            "description": "Search by lock status. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locked:gte",
            "description": "Search by lock status. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locked:lt",
            "description": "Search by lock status. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locked:lte",
            "description": "Search by lock status. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filesize",
            "description": "Search by file size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filesize:gt",
            "description": "Search by file size. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filesize:gte",
            "description": "Search by file size. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filesize:lt",
            "description": "Search by file size. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filesize:lte",
            "description": "Search by file size. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "file_type",
            "description": "Search by file type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "Documents",
                "Spreadsheets",
                "Presentations",
                "Images",
                "PDF",
                "Multimedia",
                "Text"
              ]
            }
          },
          {
            "in": "query",
            "name": "email_type",
            "description": "Search by email type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "Inbox",
                "Draft",
                "Sent"
              ]
            }
          },
          {
            "in": "query",
            "name": "path",
            "description": "Search files/folders by path. If this is specified, other search criteria is no longer valid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "path:contains",
            "description": "Search files/folders by path. If this is specified, other search criteria is no longer valid.. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "searchType",
            "description": "Search type: f(files), d(directories), m(mails) or  k(kitepoint)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "f",
                "d",
                "m",
                "k"
              ]
            }
          },
          {
            "in": "query",
            "name": "searchFilter",
            "description": "Search all or only shared folders",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "shared"
              ]
            }
          },
          {
            "in": "query",
            "name": "fls_only",
            "description": "Search by file shared to me",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sharedMailboxId",
            "description": "Id of shared mailbox to search",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "name:asc",
                "name:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc",
                "score:asc",
                "score:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/settings/passwordPolicy": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get Password Policy",
        "description": "Returns the password policy settings",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordPolicy"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false
      }
    },
    "/rest/settings/system": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get system settings",
        "description": "Returns system settings",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settings"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false
      }
    },
    "/rest/shortLinks/{ref}": {
      "get": {
        "tags": [
          "shortLinks"
        ],
        "summary": "Short Link",
        "description": "Returns properties of a short link including the associated entity ID.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shortlink"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "description": "The ref value of the short link",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/sourceTypes": {
      "get": {
        "tags": [
          "sourceTypes"
        ],
        "summary": "List all ECM source types",
        "description": "Returns a list of available ECM source types.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SourceType"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "mode",
            "description": "Mode",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc"
              ]
            }
          }
        ]
      }
    },
    "/rest/sourceTypes/{id}": {
      "get": {
        "tags": [
          "sourceTypes"
        ],
        "summary": "Returns requested ECM source type",
        "description": "Returns requested source type.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceType"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the sourceType to be retrieved",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/sources": {
      "post": {
        "tags": [
          "sources"
        ],
        "summary": "Add user ECM source",
        "description": "Add user source.",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source.Post"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Return user's sources",
        "description": "Return user's sources",
        "tags": [
          "sources"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "include_kw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "include_container",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "search_type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return user's sources successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sources"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_DENIED, ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS": {
                    "summary": "Target user has insufficient access permissions",
                    "description": "Target user has insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS",
                          "message": "Target user has insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/sources/actions/downloadByTransaction": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Download a file from Repositories Gateway source by transaction ID",
        "description": "Uses the specified file's transaction ID specified in the Swagger Editor to download the file from its Repositories Gateway source. To get file transaction IDs, use POST /rest/sources/{id}/actions/initiateDownload.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KPTransferStatus"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "transactionId",
            "description": "Transaction ID of download",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/sources/actions/files/{id}": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Upload a file version to Repositories Gateway source",
        "description": "Uploads a new version of the specified file to its Repositories Gateway source.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KPTransferStatus"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE, ERR_ENTITY_RESTRICTED_TYPE_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE_GROUP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                        "message": "File extension is in exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM": {
                    "summary": "File extension is in custom exclusion extensions list",
                    "description": "File extension is in custom exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM",
                        "message": "File extension is in custom exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE",
                        "message": "The specified entity mime type is not allowed."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM": {
                    "summary": "The specified file type is in custom excluded file types list.",
                    "description": "The specified file type is in custom excluded file types list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM",
                        "message": "The specified file type is in custom excluded file types list."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_GROUP": {
                    "summary": "File mime type is in exclusion groups list.",
                    "description": "File mime type is in exclusion groups list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_GROUP",
                        "message": "File mime type is in exclusion groups list."
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "kp file id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "The binary content of the file.",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "body"
                ]
              }
            }
          }
        }
      }
    },
    "/rest/sources/actions/lock": {
      "patch": {
        "tags": [
          "sources"
        ],
        "summary": "Lock Repositories Gateway files",
        "description": "Lock Repositories Gateway files",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/sources/actions/unlock": {
      "patch": {
        "tags": [
          "sources"
        ],
        "summary": "Unlock Repositories Gateway files",
        "description": "Unlock Repositories Gateway files",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "A comma-separated list of unique identifiers for the entities to be processed.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/sources/auth": {
      "post": {
        "tags": [
          "sources"
        ],
        "summary": "Login to cloud source",
        "description": "Get tokens after ECM auth",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudSourceLogin.Post"
              }
            }
          }
        }
      }
    },
    "/rest/sources/files/actions/transferStatus": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Get kp transfer status.",
        "description": "Get status of transfer to Repositories Gateway",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/KPTransferStatus"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "transactionId",
            "description": "Transaction ID of download",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "transactionId:in",
            "description": "Transaction ID of download. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/sources/files/{id}": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Get info of an Repositories Gateway file.",
        "description": "Get info of an Repositories Gateway file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceFile"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of Repositories Gateway file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "sources"
        ],
        "summary": "Delete an Repositories Gateway file.",
        "description": "Delete an Repositories Gateway file.",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_FILE_IS_IN_USE_BY_OTHER_USER, ERR_FILE_IS_IN_USE_BY_CURRENT_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_FILE_IS_IN_USE_BY_OTHER_USER": {
                    "summary": "Repositories Gateway file is used by other user",
                    "description": "Repositories Gateway file is used by other user",
                    "value": {
                      "errors": {
                        "code": "ERR_FILE_IS_IN_USE_BY_OTHER_USER",
                        "message": "Repositories Gateway file is used by other user"
                      }
                    }
                  },
                  "ERR_FILE_IS_IN_USE_BY_CURRENT_USER": {
                    "summary": "Repositories Gateway file is used by you",
                    "description": "Repositories Gateway file is used by you",
                    "value": {
                      "errors": {
                        "code": "ERR_FILE_IS_IN_USE_BY_CURRENT_USER",
                        "message": "Repositories Gateway file is used by you"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of Repositories Gateway file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "forceDelete",
            "description": "If set to True user can delete file which only in his use",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/sources/folders/{id}": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Get info of an Repositories Gateway folder.",
        "description": "Get info of an Repositories Gateway folder.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceFolder"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of Repositories Gateway folder",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "sources"
        ],
        "summary": "Delete an Repositories Gateway folder.",
        "description": "Delete an Repositories Gateway folder.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of Repositories Gateway folder",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/sources/{id}": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Returns requested ECM source",
        "description": "Returns requested source.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the source to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "sources"
        ],
        "summary": "Deletes specified source",
        "description": "Deletes specified source.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the source to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/sources/{id}/actions/file": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Upload a file to Repositories Gateway source",
        "description": "Uploads the specified file to its Repositories Gateway source.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KPTransferStatus"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE, ERR_ENTITY_RESTRICTED_TYPE_CUSTOM, ERR_ENTITY_RESTRICTED_TYPE_GROUP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                        "message": "File extension is in exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM": {
                    "summary": "File extension is in custom exclusion extensions list",
                    "description": "File extension is in custom exclusion extensions list",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM",
                        "message": "File extension is in custom exclusion extensions list"
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE",
                        "message": "The specified entity mime type is not allowed."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM": {
                    "summary": "The specified file type is in custom excluded file types list.",
                    "description": "The specified file type is in custom excluded file types list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_CUSTOM",
                        "message": "The specified file type is in custom excluded file types list."
                      }
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE_GROUP": {
                    "summary": "File mime type is in exclusion groups list.",
                    "description": "File mime type is in exclusion groups list.",
                    "value": {
                      "errors": {
                        "code": "ERR_ENTITY_RESTRICTED_TYPE_GROUP",
                        "message": "File mime type is in exclusion groups list."
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "kp folder id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "The binary content of the file.",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "body"
                ]
              }
            }
          }
        }
      }
    },
    "/rest/sources/{id}/actions/initiateDownload": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Download a file asynchronously from Repositories Gateway source",
        "description": "Performs an asynchronous download of the specified file from its Repositories Gateway source. Improves responsiveness and efficiency, especially for large files.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KPTransferStatus"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the file from Repositories Gateway Source.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/sources/{id}/auth": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Get url with redirect to cloud ECM auth",
        "description": "Get url with redirect to cloud ECM auth",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EcmAuth"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The source ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "sources"
        ],
        "summary": "Login to on-premise source",
        "description": "Login to on-premise source",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The source ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnPremiseSourceLogin.Post"
              }
            }
          }
        }
      }
    },
    "/rest/sources/{id}/authStatus": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Get cloud ECM auth status",
        "description": "Get cloud ECM auth status",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The source ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/sources/{id}/children": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Returns the content of the specified ECM source",
        "description": "Returns the content of the requested source.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SourceContent"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the source folder to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Object name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Object name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "description": "Object description",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description:contains",
            "description": "Object description. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Object creation date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Object creation date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Object creation date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Object creation date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Object creation date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified",
            "description": "Object modification date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gt",
            "description": "Object modification date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gte",
            "description": "Object modification date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lt",
            "description": "Object modification date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lte",
            "description": "Object modification date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Indicates that object is deleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Object type to return",
            "schema": {
              "type": "string",
              "enum": [
                "f",
                "d"
              ]
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc",
                "size:asc",
                "size:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/sources/{id}/content": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Download a file from repositories gateway source",
        "description": "Downloads the specified file from its repositories gateway source.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Content"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Repositories Gateway file id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/sources/{id}/externalEdit": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Get access token for external file edit.",
        "description": "Retrieve refresh token for external file edit.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshToken"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the file",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/sources/{id}/folders": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Returns the list of folders of the specified ECM folder",
        "description": "Returns the content of the requested source.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SourceContent"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the source folder to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Object name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Object name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "description": "Object description",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description:contains",
            "description": "Object description. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Object creation date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Object creation date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Object creation date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Object creation date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Object creation date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified",
            "description": "Object modification date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gt",
            "description": "Object modification date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gte",
            "description": "Object modification date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lt",
            "description": "Object modification date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lte",
            "description": "Object modification date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Indicates that object is deleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc",
                "size:asc",
                "size:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/sources/{id}/preview": {
      "get": {
        "tags": [
          "sources",
          "files"
        ],
        "summary": "Get file preview metadata for a file in Repositories Gateway source",
        "description": "Gets file preview metadata about the specified file in a Repositories Gateway source, such as the permalink for previewing the file and whether the file contains a watermark. Must be assigned the `view` permission for the file.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KitepointPreview"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the file from Repositories Gateway Source.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/sources/{parent}/files": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Returns the list of files of the specified ECM folder",
        "description": "Returns the list of files of the requested ECM folder.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SourceContent"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "parent",
            "description": "ID of the source folder to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Object name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Object name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "description": "Object description",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description:contains",
            "description": "Object description. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Object creation date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Object creation date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Object creation date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Object creation date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Object creation date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified",
            "description": "Object modification date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gt",
            "description": "Object modification date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gte",
            "description": "Object modification date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lt",
            "description": "Object modification date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lte",
            "description": "Object modification date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Indicates that object is deleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc",
                "size:asc",
                "size:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/tasks": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Gets all tasks for current user",
        "description": "Gets all tasks for current user",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "assigneeId",
            "description": "Assigned User unique identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "assigneeId:in",
            "description": "Assigned User unique identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "due",
            "description": "Task due date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "due:gt",
            "description": "Task due date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "due:gte",
            "description": "Task due date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "due:lt",
            "description": "Task due date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "due:lte",
            "description": "Task due date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "parentId",
            "description": "Parent Comment identifier",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "parentId:in",
            "description": "Parent Comment identifier. Search for results that contain any of specified values of this parameter.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Task creation date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Task creation date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Task creation date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Task creation date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Task creation date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified",
            "description": "Task modification date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gt",
            "description": "Task modification date. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:gte",
            "description": "Task modification date. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lt",
            "description": "Task modification date. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "modified:lte",
            "description": "Task modification date. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "contents:contains",
            "description": "Task content. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Task status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "D",
                "P",
                "C"
              ]
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Whether the task has been deleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "assigned",
            "description": "Show assigned to",
            "schema": {
              "type": "string",
              "enum": [
                "me",
                "others",
                "both"
              ]
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "due:asc",
                "due:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/tasks/{id}": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get Task by ID",
        "description": "Returns the details of a task based on ID",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the task to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "put": {
        "tags": [
          "tasks"
        ],
        "summary": "Update Task",
        "description": "Updates the details of a task",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the task to update",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task.Put"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "summary": "Delete a Task",
        "description": "Deletes a task",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the task to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/uploads": {
      "get": {
        "tags": [
          "uploads"
        ],
        "summary": "Retrieve all user upload sessions",
        "description": "Returns all upload sessions associated with the user.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Upload"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locate_id",
            "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/uploads/config": {
      "get": {
        "tags": [
          "uploads"
        ],
        "summary": "Get upload server configuration",
        "description": "Returns the details of the upload server configuration",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcfsConfig"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false
      }
    },
    "/rest/uploads/{id}": {
      "get": {
        "tags": [
          "uploads"
        ],
        "summary": "Get upload session",
        "description": "Returns the details of the specified upload session.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the upload session",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "uploads"
        ],
        "summary": "Terminate upload session",
        "description": "Terminates the upload session.",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the upload session.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a list of Users",
        "description": "Returns a list of Users in the system. The user must be an administrator with access to `User Management.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "description": "Filter users based on their email address.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email:contains",
            "description": "Filter users based on their email address.. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Filter users based on their full name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Filter users based on their full name.. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "Filter users based on their metadata information.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "metadataContains",
            "description": "Filter users whose metadata contains the specified characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "Filter users based on whether they have been deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "active",
            "description": "Filter users based on whether they are active in the system.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "verified",
            "description": "Filter users based on their verification status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "suspended",
            "description": "Filter users based on whether they are suspended.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "isRecipient",
            "description": "Filter users who are recipients of specific items.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "allowsCollaboration",
            "description": "Filter users whose profiles allow collaboration access.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "created",
            "description": "Filter users based on the creation date of their account.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value greater than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value greater or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value less than specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "description": "Filter users based on the creation date of their account.. Search for result that has this parameter value less or equal to the specified.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "created:asc",
                "created:desc",
                "email:asc",
                "email:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "locate_id",
            "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a User",
        "description": "Creates a new User in the system by specifying an email address and name.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_EMAIL, ERR_INPUT_REQUIRED, ERR_INPUT_PASSWORD_COMPLEXITY_ERROR, ERR_INPUT_NOT_NUMERIC, ERR_INPUT_MIN_VALUE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_INVALID_EMAIL": {
                    "summary": "Input is not a valid email",
                    "description": "Input is not a valid email",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_INVALID_EMAIL",
                        "message": "Input is not a valid email"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR": {
                    "summary": "Password does not meet complexity requirements",
                    "description": "Password does not meet complexity requirements",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR",
                        "message": "Password does not meet complexity requirements"
                      }
                    }
                  },
                  "ERR_INPUT_MIN_VALUE": {
                    "summary": "The specified input below the minimum allowed value.",
                    "description": "The specified input below the minimum allowed value.",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_MIN_VALUE",
                        "message": "The specified input below the minimum allowed value."
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "description": "Return information about newly created entity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User.Post"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes Users",
        "description": "Mark the specified users as deleted. The size of request User UUID is limited (recommend <= 100)",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_NOT_BOOLEAN, ERR_INPUT_ATTRIBUTE_FORBIDDEN, ERR_INPUT_REQUIRED, ERR_INPUT_NOT_STRING",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_NOT_BOOLEAN": {
                    "summary": "Input is not a valid boolean",
                    "description": "Input is not a valid boolean",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_BOOLEAN",
                        "message": "Input is not a valid boolean"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "description": "List of the users id which will be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "retainToUser",
            "description": "The ID of the new owner to whom the data will be transferred, applicable when `retainData` and/or `retainPermissionToSharedData` are set to true.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "remoteWipe",
            "description": "Indicates whether to remotely wipe data from both desktop and mobile devices.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "deleteUnsharedData",
            "description": "Indicates whether data owned by the user should be deleted. This is required and must be set to True if `retainData` is False, and vice versa.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "retainData",
            "description": "Indicates whether data should be retained and transferred to another user. This is required and must be True if `deleteUnsharedData` is False, and vice versa.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "retainPermissionToSharedData",
            "description": "Indicates whether permissions to shared folder should be retained.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "withdrawFileLinks",
            "description": "Indicates whether files sent by deleted or demoted users should be withdrawn.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "withdrawRequestFiles",
            "description": "Indicates whether request files sent by deleted or demoted users should be withdrawn.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/users/actions/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "User login",
        "description": "Handles user login by accepting the user credentials (username and password).",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin.Post"
              }
            }
          }
        }
      }
    },
    "/rest/users/aliveToken": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates token state",
        "description": "Updates current session state to be not outdated any more",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false
      }
    },
    "/rest/users/ldapSearch": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Find users in LDAP by input supplied",
        "description": "Returns a list of Users in LDAP by the input supplied.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapSearchResults"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "value",
            "description": "The user's email or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/users/me": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update the current user's details",
        "description": "Updates the details of the currently authenticated user. For example, change their name or password.",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_PASSWORD_COMPLEXITY_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR": {
                    "summary": "Password does not meet complexity requirements",
                    "description": "Password does not meet complexity requirements",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR",
                        "message": "Password does not meet complexity requirements"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserNamePassword.Put"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retrieve details of the currently logged-in user",
        "description": "Fetches the details of the currently authenticated user, including their email address and name.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMe"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false
      }
    },
    "/rest/users/me/forcedPasswordChange": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Change the password for current user after expired",
        "description": "Change the password for current user after password expired",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_PASSWORD_COMPLEXITY_ERROR, ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR": {
                    "summary": "Password does not meet complexity requirements",
                    "description": "Password does not meet complexity requirements",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR",
                        "message": "Password does not meet complexity requirements"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserForcedPasswordChange.Put"
              }
            }
          }
        }
      }
    },
    "/rest/users/me/mobileNumber": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update mobile number of the current user",
        "description": "Update mobile number of the current user",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED, ERR_INPUT_INVALID_FORMAT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserMobileNumberPassword.Put"
              }
            }
          }
        }
      }
    },
    "/rest/users/me/quota": {
      "get": {
        "summary": "Retrieve user quota",
        "description": "### Overview:\n  Retrieves the user quota details.\n### Precondition:\n  The user profile must have \"Collaboration Allowed\" enabled or have mail access.\n### Outcome:\n  Returns the user's quota information.\n",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user quota is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserQuota"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br /><br /><i>Possible error codes: </i>ERR_ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_NOT_FOUND": {
                    "summary": "Entity does not exist",
                    "description": "Entity does not exist",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_FOUND",
                          "message": "Entity does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/users/me/tfa/auth": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Two Factor Authentication",
        "description": "Two Factor Authentication",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTfa.Post"
              }
            }
          }
        }
      }
    },
    "/rest/users/me/tfa/challenge": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Two Factor Authentication",
        "description": "Two Factor Authentication",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "referral",
            "description": "Referral URL",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/users/me/tfa/config": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Two Factor Authentication",
        "description": "Two Factor Authentication",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false
      }
    },
    "/rest/users/me/tfa/resetTotpSecret": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Reset secret key for time-based OTP of the current user",
        "description": "Reset secret key for time-based OTP of the current user",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_PASSWORD_COMPLEXITY_ERROR, ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR": {
                    "summary": "Password does not meet complexity requirements",
                    "description": "Password does not meet complexity requirements",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR",
                        "message": "Password does not meet complexity requirements"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTfaTotpResetSecret.Post"
              }
            }
          }
        }
      }
    },
    "/rest/users/me/tfa/setupTotpSecret": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Setup secret key for Time-based OTP of the current user",
        "description": "Setup secret key for Time-based OTP of the current user",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false
      }
    },
    "/rest/users/me/tfa/verifyTotpSecret": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Verify code for finalising secret key for timed-based OTP",
        "description": "Verify code for finalising secret key for timed-based OTP",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTfaTotpVerifySecret.Post"
              }
            }
          }
        }
      }
    },
    "/rest/users/me/tfaSetup": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Setup 2FA settings",
        "description": "Updates the 2FA settings for the current user",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTfa.Put"
              }
            }
          }
        }
      }
    },
    "/rest/users/me/tos": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Terms of Service",
        "description": "Terms of Service",
        "responses": {
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Terms of Service",
        "description": "Terms of Service",
        "responses": {
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTos.Post"
              }
            }
          }
        }
      }
    },
    "/rest/users/preauth": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "User login preauth",
        "description": "User login preauth.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPreauth.Post"
              }
            }
          }
        }
      }
    },
    "/rest/users/register": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Register a User",
        "description": "Registers a new User in the system by specifying an email address and password.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_EMAIL, ERR_INPUT_REQUIRED, ERR_INPUT_PASSWORD_COMPLEXITY_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_INVALID_EMAIL": {
                    "summary": "Input is not a valid email",
                    "description": "Input is not a valid email",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_INVALID_EMAIL",
                        "message": "Input is not a valid email"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR": {
                    "summary": "Password does not meet complexity requirements",
                    "description": "Password does not meet complexity requirements",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR",
                        "message": "Password does not meet complexity requirements"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegister.Post"
              }
            }
          }
        }
      }
    },
    "/rest/users/requestPasswordReset": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Request for password reset",
        "description": "Request for password reset of existing user",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_EMAIL, ERR_INPUT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_INVALID_EMAIL": {
                    "summary": "Input is not a valid email",
                    "description": "Input is not a valid email",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_INVALID_EMAIL",
                        "message": "Input is not a valid email"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequestPasswordReset.Post"
              }
            }
          }
        }
      }
    },
    "/rest/users/resetPassword": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Reset password",
        "description": "Reset password of an existing user",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_REQUIRED, ERR_INPUT_PASSWORD_COMPLEXITY_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  },
                  "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR": {
                    "summary": "Password does not meet complexity requirements",
                    "description": "Password does not meet complexity requirements",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR",
                        "message": "Password does not meet complexity requirements"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserResetPassword.Post"
              }
            }
          }
        }
      }
    },
    "/rest/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User",
        "description": "Returns the details of the specified user (this includes email address and name)",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a User",
        "description": "Mark the specified user as deleted. This user will still be returned in the GET Users query.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content<br /><br /><i>Possible error codes: </i>ERR_INPUT_NOT_BOOLEAN, ERR_INPUT_ATTRIBUTE_FORBIDDEN, ERR_INPUT_REQUIRED, ERR_INPUT_NOT_STRING",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_NOT_BOOLEAN": {
                    "summary": "Input is not a valid boolean",
                    "description": "Input is not a valid boolean",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_NOT_BOOLEAN",
                        "message": "Input is not a valid boolean"
                      }
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": {
                        "code": "ERR_INPUT_REQUIRED",
                        "message": "Field is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "retainToUser",
            "description": "The ID of the new owner to whom the data will be transferred, applicable when `retainData` and/or `retainPermissionToSharedData` are set to true.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "remoteWipe",
            "description": "Indicates whether to remotely wipe data from both desktop and mobile devices.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "deleteUnsharedData",
            "description": "Indicates whether data owned by the user should be deleted. This is required and must be set to True if `retainData` is False, and vice versa.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "retainData",
            "description": "Indicates whether data should be retained and transferred to another user. This is required and must be True if `deleteUnsharedData` is False, and vice versa.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "retainPermissionToSharedData",
            "description": "Indicates whether permissions to shared folder should be retained.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "withdrawFileLinks",
            "description": "Indicates whether files sent by deleted or demoted users should be withdrawn.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "withdrawRequestFiles",
            "description": "Indicates whether request files sent by deleted or demoted users should be withdrawn.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/users/{id}/adminRoles": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Return admin roles of the specified user id.",
        "description": "Returns the details of all adminroles\n                  (active and deleted users) with the specified user id.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AdminRole"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user to retrieve admin role",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full",
                "compact"
              ]
            }
          }
        ]
      }
    },
    "/rest/users/{id}/devices": {
      "get": {
        "tags": [
          "devices"
        ],
        "summary": "List devices for a user",
        "description": "Return a list of devices for a specific user",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Device"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user whose devices to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/users/{id}/profileImage": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Uploads a profile image",
        "description": "Uploads an image file to use as profile image",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "The binary content of the file.",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "body"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a profile image",
        "description": "Deletes the user's current profile image.",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/rest/users/{id}/settings": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User Settings",
        "description": "Returns the user settings",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settings"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user to retrieve settings for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update User Settings",
        "description": "Updates the settings for the specified user",
        "responses": {
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user to update settings for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Settings.Put"
              }
            }
          }
        }
      }
    },
    "/rest/webForms": {
      "get": {
        "tags": [
          "webForms"
        ],
        "summary": "List web forms",
        "description": "Returns a list of web forms available to current user.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WebForm"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Web form name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "description": "Web form name. Search for result that contains specified characters in this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Sorting options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "name:asc",
                "name:desc",
                "last_modified:asc",
                "last_modified:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/webForms/{id}": {
      "get": {
        "tags": [
          "webForms"
        ],
        "summary": "Get a web form",
        "description": "Returns the details of a specified web form",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebForm"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": {
                        "code": "ERR_ACCESS_USER",
                        "message": "Insufficient access permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the web form to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "with",
            "description": "With parameters",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "full_with_links",
                "full"
              ]
            }
          }
        ]
      }
    },
    "/rest/wopi/containers/{folder}/token": {
      "post": {
        "tags": [
          "wopi"
        ],
        "summary": "Generate WopiAccessToken for folder",
        "description": "Generate WopiAccessToken for folder",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WopiAccessToken"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "folder",
            "description": "The unique identifier of the folder.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/wopi/files/{file}/token": {
      "post": {
        "tags": [
          "wopi"
        ],
        "summary": "Generate WopiAccessToken for file",
        "description": "Generate WopiAccessToken for file",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WopiAccessToken"
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        },
        "deprecated": false,
        "parameters": [
          {
            "in": "path",
            "name": "file",
            "description": "ID of the file",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/rest/files/actions/content/link/{ref}": {
      "get": {
        "summary": "Download a file via a reference link",
        "description": "### Description:\n  Downloads a form that must be filled out as required by a risk policy, prior to downloading the specified file to a folder.\n### Precondition:\n  Must be assigned the `download` permission for the file.\n### Response:\n  The file content is streamed to the user.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "required": true,
            "description": "The unique reference for the download link.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file download request by reference link was successful.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_DLP_LOCKED, ERR_ENTITY_IS_SECURE_FOLDER, ERR_ENTITY_NOT_SCANNED, ERR_ENTITY_VIRUS_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DLP_LOCKED": {
                    "summary": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "description": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DLP_LOCKED",
                          "message": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_SCANNED": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_SCANNED",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_VIRUS_FOUND": {
                    "summary": "File is infected",
                    "description": "File is infected",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_VIRUS_FOUND",
                          "message": "File is infected"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/{id}/actions/initiateUpload": {
      "post": {
        "summary": "Initiates a file chunk upload session for a file to be added to the folder and returns an upload link",
        "description": "### Description:\n  This endpoint creates an upload session for a file to be added to the specified folder.\n  Once the session is created, an upload link is returned, which can be used for uploading the file in chunks.\n### Precondition:\n  The user must have `file_add` permission for the folder where the file will be uploaded.\n### Response:\n  The upload session is successfully created, allowing for the subsequent chunk uploads to be added to the folder.\n",
        "tags": [
          "uploads"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateUploadPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Upload session successfully created, and an upload link is returned for chunk uploads to be added to the folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DLP_LOCKED, ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_NOT_SCANNED, ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_VIRUS_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DLP_LOCKED": {
                    "summary": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "description": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DLP_LOCKED",
                          "message": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_SCANNED": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_SCANNED",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                          "message": "File extension is in exclusion extensions list"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_VIRUS_FOUND": {
                    "summary": "File is infected",
                    "description": "File is infected",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_VIRUS_FOUND",
                          "message": "File is infected"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_NO_STORAGE_AVAILABLE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_NO_STORAGE_AVAILABLE": {
                    "summary": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "description": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_NO_STORAGE_AVAILABLE",
                          "message": "Folder owner's remaining storage quota does not permit for a file upload of this size."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_DATE, ERR_INPUT_INVALID_FORMAT, ERR_INPUT_MAX_VALUE, ERR_INPUT_MIN_VALUE, ERR_INVALID_PARAMETER, ERR_SYSTEM_NO_STORAGE_AVAILABLE, ERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_INVALID_DATE": {
                    "summary": "The input is not a valid date.",
                    "description": "The input is not a valid date.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_DATE",
                          "message": "The input is not a valid date."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_INVALID_FORMAT": {
                    "summary": "The input is invalid.",
                    "description": "The input is invalid.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_FORMAT",
                          "message": "The input is invalid."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_MAX_VALUE": {
                    "summary": "The specified input exceed the maximum allowed value.",
                    "description": "The specified input exceed the maximum allowed value.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_MAX_VALUE",
                          "message": "The specified input exceed the maximum allowed value."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_MIN_VALUE": {
                    "summary": "The specified input below the minimum allowed value.",
                    "description": "The specified input below the minimum allowed value.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_MIN_VALUE",
                          "message": "The specified input below the minimum allowed value."
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_NO_STORAGE_AVAILABLE": {
                    "summary": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "description": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_NO_STORAGE_AVAILABLE",
                          "message": "Folder owner's remaining storage quota does not permit for a file upload of this size."
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS": {
                    "summary": "No available storage hosts",
                    "description": "No available storage hosts",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS",
                          "message": "No available storage hosts"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/requestFile/{ref}/actions/initiateUpload": {
      "post": {
        "summary": "Initiates a file chunk upload session for a file to be uploaded to a request file and returns an upload link",
        "description": "### Description:\n  This endpoint creates an upload session for a file to be uploaded to a request file.\n  Once the session is created, an upload link is returned, which can be used for uploading the file in chunks.\n### Precondition:\n  The user must have access to the request file for uploading.\n### Response:\n  The upload session is successfully created, allowing for the subsequent chunk uploads to be associated with the request file.\n",
        "tags": [
          "uploads"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "required": true,
            "description": "The unique reference of the Request File upload link.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateUploadPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Upload session successfully created, and an upload link is returned for chunk uploads to be associated with the request file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_REQUEST_FILE_UPLOAD_LIMIT_REACHED, ERR_ENTITY_RESTRICTED_EXTENSION",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_REQUEST_FILE_UPLOAD_LIMIT_REACHED": {
                    "summary": "Upload limit has reached.",
                    "description": "Upload limit has reached.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_REQUEST_FILE_UPLOAD_LIMIT_REACHED",
                          "message": "Upload limit has reached."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                          "message": "File extension is in exclusion extensions list"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_NO_STORAGE_AVAILABLE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_NO_STORAGE_AVAILABLE": {
                    "summary": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "description": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_NO_STORAGE_AVAILABLE",
                          "message": "Folder owner's remaining storage quota does not permit for a file upload of this size."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_DATE, ERR_INPUT_INVALID_FORMAT, ERR_INPUT_MAX_VALUE, ERR_INPUT_MIN_VALUE, ERR_INVALID_PARAMETER, ERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_INVALID_DATE": {
                    "summary": "The input is not a valid date.",
                    "description": "The input is not a valid date.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_DATE",
                          "message": "The input is not a valid date."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_INVALID_FORMAT": {
                    "summary": "The input is invalid.",
                    "description": "The input is invalid.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_FORMAT",
                          "message": "The input is invalid."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_MAX_VALUE": {
                    "summary": "The specified input exceed the maximum allowed value.",
                    "description": "The specified input exceed the maximum allowed value.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_MAX_VALUE",
                          "message": "The specified input exceed the maximum allowed value."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_MIN_VALUE": {
                    "summary": "The specified input below the minimum allowed value.",
                    "description": "The specified input below the minimum allowed value.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_MIN_VALUE",
                          "message": "The specified input below the minimum allowed value."
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS": {
                    "summary": "No available storage hosts",
                    "description": "No available storage hosts",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS",
                          "message": "No available storage hosts"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/{id}/actions/initiateUpload": {
      "post": {
        "summary": "Initiates a file chunk upload session for an email attachment and returns an upload link",
        "description": "### Description:\n  This endpoint creates an upload session for a file to be attached to an email.\n  Once the session is created, an upload link is returned, which can be used for uploading the attachment in chunks.\n### Precondition:\n  The user must be the sender of the mail.\n### Response:\n  The upload session is successfully created, allowing for the subsequent chunk uploads to be associated with the email attachment.\n",
        "tags": [
          "uploads"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateUploadPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Upload session successfully created, and an upload link is returned for chunk uploads to be associated with the email attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_RESTRICTED_EXTENSION",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                          "message": "File extension is in exclusion extensions list"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_NO_STORAGE_AVAILABLE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_NO_STORAGE_AVAILABLE": {
                    "summary": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "description": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_NO_STORAGE_AVAILABLE",
                          "message": "Folder owner's remaining storage quota does not permit for a file upload of this size."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_DATE, ERR_INPUT_INVALID_FORMAT, ERR_INPUT_MAX_VALUE, ERR_INPUT_MIN_VALUE, ERR_INVALID_PARAMETER, ERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_INVALID_DATE": {
                    "summary": "The input is not a valid date.",
                    "description": "The input is not a valid date.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_DATE",
                          "message": "The input is not a valid date."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_INVALID_FORMAT": {
                    "summary": "The input is invalid.",
                    "description": "The input is invalid.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_FORMAT",
                          "message": "The input is invalid."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_MAX_VALUE": {
                    "summary": "The specified input exceed the maximum allowed value.",
                    "description": "The specified input exceed the maximum allowed value.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_MAX_VALUE",
                          "message": "The specified input exceed the maximum allowed value."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_MIN_VALUE": {
                    "summary": "The specified input below the minimum allowed value.",
                    "description": "The specified input below the minimum allowed value.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_MIN_VALUE",
                          "message": "The specified input below the minimum allowed value."
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS": {
                    "summary": "No available storage hosts",
                    "description": "No available storage hosts",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS",
                          "message": "No available storage hosts"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/{id}/actions/initiateUpload": {
      "post": {
        "summary": "Initiates a file chunk upload session to add a new version of a specified file and returns an upload link",
        "description": "### Description:\n  This endpoint creates an upload session to add a new version of an existing file.\n  Once the session is created, an upload link is returned, which can be used for uploading the new file version in chunks.\n### Precondition:\n  The user must have `version_created` permission to the specified file.\n### Response:\n  The upload session is successfully created, allowing for the subsequent chunk uploads to be stored as a new version of the specified file.\n",
        "tags": [
          "uploads"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateUploadPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Upload session successfully created, and an upload link is returned for chunk uploads to be stored as a new version of the specified file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DLP_LOCKED, ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_NOT_SCANNED, ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_VIRUS_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DLP_LOCKED": {
                    "summary": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "description": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DLP_LOCKED",
                          "message": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_SCANNED": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_SCANNED",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                          "message": "File extension is in exclusion extensions list"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_VIRUS_FOUND": {
                    "summary": "File is infected",
                    "description": "File is infected",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_VIRUS_FOUND",
                          "message": "File is infected"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_NO_STORAGE_AVAILABLE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_NO_STORAGE_AVAILABLE": {
                    "summary": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "description": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_NO_STORAGE_AVAILABLE",
                          "message": "Folder owner's remaining storage quota does not permit for a file upload of this size."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_DATE, ERR_INPUT_INVALID_FORMAT, ERR_INPUT_MAX_VALUE, ERR_INPUT_MIN_VALUE, ERR_INVALID_PARAMETER, ERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_INVALID_DATE": {
                    "summary": "The input is not a valid date.",
                    "description": "The input is not a valid date.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_DATE",
                          "message": "The input is not a valid date."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_INVALID_FORMAT": {
                    "summary": "The input is invalid.",
                    "description": "The input is invalid.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_FORMAT",
                          "message": "The input is invalid."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_MAX_VALUE": {
                    "summary": "The specified input exceed the maximum allowed value.",
                    "description": "The specified input exceed the maximum allowed value.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_MAX_VALUE",
                          "message": "The specified input exceed the maximum allowed value."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_MIN_VALUE": {
                    "summary": "The specified input below the minimum allowed value.",
                    "description": "The specified input below the minimum allowed value.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_MIN_VALUE",
                          "message": "The specified input below the minimum allowed value."
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS": {
                    "summary": "No available storage hosts",
                    "description": "No available storage hosts",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS",
                          "message": "No available storage hosts"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/{id}/actions/withdrawFiles": {
      "post": {
        "summary": "Withdraw files from a sent message",
        "description": "### Description:\n  Using an email ID, withdraws specified attachments from the message.\n### Notes:\n  - The message itself is not withdrawn. Only the links to its file attachments are deactivated so that the files are no longer accessible to the original recipients. The files remain in the system until they expire.\n  - If a recipient forwarded the message prior to its withdrawal, links to email attachments remain active for those recipients until the file attachments expire in the system.\n### Preconditions:\n  Must be the sender of the message.\n### Response:\n  Withdraws email attachments from the sent message.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "required": true,
            "explode": true,
            "style": "form",
            "description": "A comma-separated list of attachment IDs to be withdrawn.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "sharedMailboxId",
            "required": false,
            "description": "The unique identifier of the Shared Mailbox. If provided, the operation will be performed within the specified Shared Mailbox context.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Attachments withdrawn successfully."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_NOT_SENDER, ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_IS_DELETED_ATTACHMENT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_NOT_SENDER": {
                    "summary": "Authenticated user is not the sender of the specified email",
                    "description": "Authenticated user is not the sender of the specified email",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_NOT_SENDER",
                          "message": "Authenticated user is not the sender of the specified email"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_DELETED_ATTACHMENT": {
                    "summary": "Requested Attachment(s) is deleted",
                    "description": "Requested Attachment(s) is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_DELETED_ATTACHMENT",
                          "message": "Requested Attachment(s) is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/{id}/actions/copy": {
      "post": {
        "summary": "Save email attachments to Kiteworks folder",
        "description": "### Description:\n  Saves emailed attachments to a folder.\n### Preconditions:\n  Must be assigned the `file_copy` permission for the files being copied and `file_add` permission for the specified folder.\n### Response:\n  Saves the email attachments to the specified folder. If duplicate files exist, appends a number to saved file names.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "required": true,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "description": "",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DestinationFolderIdRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attachment files are copied successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_NOT_SENDER, ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_IS_DELETED_ATTACHMENT, ERR_ENTITY_IS_MY_DIR, ERR_ENTITY_IS_SECURE_FOLDER, ERR_ENTITY_RESTRICTED_EXTENSION, ERR_ENTITY_RESTRICTED_TYPE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_NOT_SENDER": {
                    "summary": "Authenticated user is not the sender of the specified email",
                    "description": "Authenticated user is not the sender of the specified email",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_NOT_SENDER",
                          "message": "Authenticated user is not the sender of the specified email"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_DELETED_ATTACHMENT": {
                    "summary": "Requested Attachment(s) is deleted",
                    "description": "Requested Attachment(s) is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_DELETED_ATTACHMENT",
                          "message": "Requested Attachment(s) is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_MY_DIR": {
                    "summary": "Operation not permitted on Tray Folder",
                    "description": "Operation not permitted on Tray Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_MY_DIR",
                          "message": "Operation not permitted on Tray Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_EXTENSION": {
                    "summary": "File extension is in exclusion extensions list",
                    "description": "File extension is in exclusion extensions list",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_EXTENSION",
                          "message": "File extension is in exclusion extensions list"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_TYPE",
                          "message": "The specified entity mime type is not allowed."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/{id}/actions/sendTrackingReport": {
      "post": {
        "summary": "Send tracked activity report from sent message",
        "description": "### Description:\n  Emails a tracked activity report from a sent message.\n### Preconditions:\n  Must be the sender of the mail and have tracking access.\n### Response:\n  Sends the tracking report to the current user's Inbox.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The tracking report was sent successfully."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_NOT_SENDER, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_NOT_SENDER": {
                    "summary": "Authenticated user is not the sender of the specified email",
                    "description": "Authenticated user is not the sender of the specified email",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_NOT_SENDER",
                          "message": "Authenticated user is not the sender of the specified email"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/attachments": {
      "delete": {
        "summary": "Withdraw multiple files from messages in Sent and Drafts folder",
        "description": "### Description:\n  Using attachment IDs, withdraws specified attachments from messages in the current user's Sent and Drafts folders.\n### Notes:\n  - The message itself is not withdrawn. Only the links to its file attachments are deactivated so that the files are no longer accessible to the original recipients. The files remain in the system until they expire.\n  - If a recipient forwarded the message prior to its withdrawal, links to email attachments remain active for those recipients until the file attachments expire in the system.\n### Preconditions:\n  Must be the sender of the message.\n### Response:\n  Withdraws email attachments from sent and draft messages.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "required": true,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "description": "",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The specified attachments were successfully withdrawn."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "get": {
        "summary": "Get email attachments sent by current user",
        "description": "### Description:\n  Using an email ID, gets a list of files attached to a message in the current user's Inbox or Drafts folder. Includes file metadata.\n### Preconditions:\n  Must be the current user's messages.\n### Response:\n  Returns the list of email attachments.\n### Sorting:\n    Sort string syntax `FIELD_NAME:ORDER`.\n\n  ORDER can be `asc` or `desc`.\n### Sorting options:\n  | FIELD_NAME | Description |\n  |------------|-------------|\n  | id         | The mail id |\n  | subject    | The mail subject |\n  | sent_date  | The mail sent date |\n  | modified_date | The last modified date of the mail |\n  | type       | The type of the mail. Can be 'sent', 'draft' or 'request' |\n  | size       | The file size |\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "bucket",
            "required": false,
            "description": "Specifies the email bucket to filter attachments from.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Sorting order. Default is 'id:desc'.",
            "schema": {
              "type": "string",
              "enum": [
                "id:asc",
                "id:desc",
                "subject:asc",
                "subject:desc",
                "sent_date:asc",
                "sent_date:desc",
                "modified_date:asc",
                "modified_date:desc",
                "type:asc",
                "type:desc",
                "size:asc",
                "size:desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of email attachments was returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailAttachments"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/actions/withdraw": {
      "post": {
        "summary": "Withdraw messages from Sent and Drafts folders",
        "description": "### Description:\n  Using email IDs, withdraws the messages from the current user's Sent and Drafts folders.\n### Notes:\n  - The message itself is not withdrawn. Only the links to its file attachments are deactivated so that the files are no longer accessible to the original recipients. The files remain in the system until they expire.\n  - If a recipient forwarded the message prior to its withdrawal, links to email attachments remain active for those recipients until the file attachments expire in the system.\n### Preconditions:\n  Must be the sender of the messages.\n### Response:\n  Withdraws email attachments from the specified messages.\n",
        "tags": [
          "mail"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailWithdrawRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email messages were withdrawn successfully."
          },
          "207": {
            "description": "Partially successful operation, some email messages could not be withdrawn.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationInteger"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_EMAIL_IS_NOT_COMPLETED, ERR_ACCESS_NOT_SENDER, ERR_MAIL_BODY_UNSECURED, ERR_ENTITY_IS_EMAIL_CONTENT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EMAIL_IS_NOT_COMPLETED": {
                    "summary": "Email is not completed",
                    "description": "Email is not completed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EMAIL_IS_NOT_COMPLETED",
                          "message": "Email is not completed"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_NOT_SENDER": {
                    "summary": "Authenticated user is not the sender of the specified email",
                    "description": "Authenticated user is not the sender of the specified email",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_NOT_SENDER",
                          "message": "Authenticated user is not the sender of the specified email"
                        }
                      ]
                    }
                  },
                  "ERR_MAIL_BODY_UNSECURED": {
                    "summary": "Mail body is unsecured.",
                    "description": "Mail body is unsecured.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_MAIL_BODY_UNSECURED",
                          "message": "Mail body is unsecured."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_EMAIL_CONTENT": {
                    "summary": "Operation not permitted on email content",
                    "description": "Operation not permitted on email content",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_EMAIL_CONTENT",
                          "message": "Operation not permitted on email content"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/{id}/scanStatus": {
      "get": {
        "summary": "Get email message security  status",
        "description": "### Description:\n  Gets the security scan results of a mail job. Depending on system scan policies, content and email attachments are scanned for anti-virus, data loss prevention, and advanced threat protection.\n### Preconditions:\n  Must be the sender or recipient of the message.\n### Response:\n  Returns the security scan status of the message and email attachments.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mail attachments (if any) and content have passed AV/DLP scanning successfully."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_EMAIL_IS_DRAFT, ERR_ENTITY_EMAIL_SCANNING, ERR_ENTITY_EMAIL_SCANNING_DISALLOWED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EMAIL_IS_DRAFT": {
                    "summary": "The action cannot be performed on draft.",
                    "description": "The action cannot be performed on draft.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EMAIL_IS_DRAFT",
                          "message": "The action cannot be performed on draft."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EMAIL_SCANNING": {
                    "summary": "One or more files, or the email, are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files, or the email, are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EMAIL_SCANNING",
                          "message": "One or more files, or the email, are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_EMAIL_SCANNING_DISALLOWED": {
                    "summary": "One or more files, or the email, are blocked by system policy.",
                    "description": "One or more files, or the email, are blocked by system policy.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EMAIL_SCANNING_DISALLOWED",
                          "message": "One or more files, or the email, are blocked by system policy."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/{id}/trackings/me": {
      "delete": {
        "summary": "Remove message tracking",
        "description": "### Description:\n  Removes the current user's access to tracking a message.\n### Preconditions:\n  Must be the recipient of the email and have tracking access.\n### Response:\n  Removes the user\u2019s tracking access to the specified message.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The email tracking has been successfully removed."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/{id}/settings": {
      "put": {
        "summary": "Update message tracking access",
        "description": "### Description:\n  Updates tracking access in a sent message.\n### Preconditions:\n  Must be the sender of the message and have tracking access.\n### Response:\n  Adds or removes tracking access for specified users.\n",
        "tags": [
          "mail"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the email.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMailSettingPutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mail settings updated successfully"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_NOT_INTERNAL_DOMAIN, ERR_INSUFFICIENT_TRACKING_PERMISSIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_NOT_INTERNAL_DOMAIN": {
                    "summary": "The email is not internal domain",
                    "description": "The email is not internal domain",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_NOT_INTERNAL_DOMAIN",
                          "message": "The email is not internal domain"
                        }
                      ]
                    }
                  },
                  "ERR_INSUFFICIENT_TRACKING_PERMISSIONS": {
                    "summary": "This profile is not allowed to give tracking access due to insufficient permissions",
                    "description": "This profile is not allowed to give tracking access due to insufficient permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INSUFFICIENT_TRACKING_PERMISSIONS",
                          "message": "This profile is not allowed to give tracking access due to insufficient permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/users/me/recent": {
      "get": {
        "summary": "Return user's recent items",
        "description": "### Overview:\n  Retrieves the user's recent items.\n### Precondition:\n  The user profile must have \"Collaboration Allowed\" enabled.\n### Outcome:\n  Returns the list of the user's recent items.\n",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "enum": [
                "d",
                "f"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successfully processed and recent items returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Folder"
                      },
                      {
                        "$ref": "#/components/schemas/File"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "post": {
        "summary": "Adding objects to user's recent items",
        "description": "Adding objects to user's recent items",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecentObjectsPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully updated user's recent items"
          },
          "207": {
            "description": "Partially updated user's recent items"
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/users/me/recent/{id}": {
      "delete": {
        "summary": "Delete user's recent item",
        "description": "Delete user's recent item",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the entity.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted successfully"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/users/me/pins": {
      "delete": {
        "summary": "Delete user pin",
        "description": "Delete user pin",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserMePinsPostRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully pinned item"
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "post": {
        "summary": "Add item to user pin",
        "description": "Add item to user pin",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserMePinsPostRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully pinned item"
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/users/actions/import": {
      "post": {
        "summary": "Bulk import users via CSV file",
        "description": "### Overview:\n  Import users in bulk using a CSV file.\n### Precondition:\n  The user must be an administrator with access to `User Management`.\n### Response:\n  The users will be either created or updated.\n",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "format": "binary",
                    "description": "The CSV file containing the users to be imported."
                  },
                  "updateIfExists": {
                    "type": "boolean",
                    "description": "If true, existing users will be updated with the new settings."
                  },
                  "sendNotification": {
                    "type": "boolean",
                    "description": "If true, a notification email will be sent to each newly created user."
                  },
                  "partialSuccess": {
                    "type": "boolean",
                    "description": "If true, only validated users will be imported, while others will be rejected."
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users have been successfully imported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserImport"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_ADMIN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_ADMIN": {
                    "summary": "Insufficient admin access permissions",
                    "description": "Insufficient admin access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_ADMIN",
                          "message": "Insufficient admin access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_FORMAT, ERR_INVALID_ARGUMENT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_INVALID_FORMAT": {
                    "summary": "The input is invalid.",
                    "description": "The input is invalid.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_FORMAT",
                          "message": "The input is invalid."
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_ARGUMENT": {
                    "summary": "Invalid Argument",
                    "description": "Invalid Argument",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_ARGUMENT",
                          "message": "Invalid Argument"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/users/actions/getDistributionList": {
      "get": {
        "summary": "Return user which is LDAP distribution list",
        "description": "Return user which is LDAP distribution list",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "email:in",
            "required": true,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "email"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successfully processed\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDistributionList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_DENIED, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/users/actions/deleteTotpSecret": {
      "post": {
        "summary": "Delete TOTP secret",
        "description": "Delete TOTP secret",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminDeleteTOTPSecretRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TOTP secret is deleted successfully"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_ADMIN, ERR_ACCESS_USER, ERR_ADMIN_ROLE_RANK_RESTRICTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_ADMIN": {
                    "summary": "Insufficient admin access permissions",
                    "description": "Insufficient admin access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_ADMIN",
                          "message": "Insufficient admin access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ADMIN_ROLE_RANK_RESTRICTED": {
                    "summary": "Action is restricted due to admin role rank",
                    "description": "Action is restricted due to admin role rank",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ADMIN_ROLE_RANK_RESTRICTED",
                          "message": "Action is restricted due to admin role rank"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br /><br /><i>Possible error codes: </i>ERR_ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_NOT_FOUND": {
                    "summary": "Entity does not exist",
                    "description": "Entity does not exist",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_FOUND",
                          "message": "Entity does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_INVALID_FORMAT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_INVALID_FORMAT": {
                    "summary": "The input is invalid.",
                    "description": "The input is invalid.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_FORMAT",
                          "message": "The input is invalid."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/users/me/concurrent/challenge": {
      "get": {
        "description": "Get last concurrent session info to be terminated",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "The concurrent session info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMeConcurrentChallenge"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_AUTH_WRONG_LOGIN_STATE, ERR_CONCURRENT_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_WRONG_LOGIN_STATE": {
                    "summary": "Wrong login state",
                    "description": "Wrong login state",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_WRONG_LOGIN_STATE",
                          "message": "Wrong login state"
                        }
                      ]
                    }
                  },
                  "ERR_CONCURRENT_NOT_FOUND": {
                    "summary": "Concurrent session does not exist",
                    "description": "Concurrent session does not exist",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_CONCURRENT_NOT_FOUND",
                          "message": "Concurrent session does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/users/me/concurrent/auth": {
      "post": {
        "description": "Confirm to terminate concurrent sessions",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "Terminated or cancelled terminating concurrent sessions"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_AUTH_WRONG_LOGIN_STATE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_WRONG_LOGIN_STATE": {
                    "summary": "Wrong login state",
                    "description": "Wrong login state",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_WRONG_LOGIN_STATE",
                          "message": "Wrong login state"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/mail/actions/requestFile": {
      "post": {
        "summary": "Request files to inbox",
        "description": "### Description:\n  Sends a request files to inbox message.\n### Precondition:\n  Must be assigned a user profile with the ability to request files to inbox.\n### Response:\n  Sends the message requesting files to your inbox.\n",
        "tags": [
          "requestFile"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFileToInboxPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request File to Inbox request has been successfully created."
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST, ERR_LICENSE_MAX_USERS_COUNT_REACHED, ERR_SYSTEM_REQUEST_FILE_DISABLED, ERR_USER_HAS_NO_USER_TYPE, ERR_USER_TYPE_NO_ACCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST": {
                    "summary": "Distribution list user is not allowed to register",
                    "description": "Distribution list user is not allowed to register",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST",
                          "message": "Distribution list user is not allowed to register"
                        }
                      ]
                    }
                  },
                  "ERR_LICENSE_MAX_USERS_COUNT_REACHED": {
                    "summary": "License count has been reached",
                    "description": "License count has been reached",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_LICENSE_MAX_USERS_COUNT_REACHED",
                          "message": "License count has been reached"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_REQUEST_FILE_DISABLED": {
                    "summary": "Request file feature is not enabled on this system.",
                    "description": "Request file feature is not enabled on this system.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_REQUEST_FILE_DISABLED",
                          "message": "Request file feature is not enabled on this system."
                        }
                      ]
                    }
                  },
                  "ERR_USER_HAS_NO_USER_TYPE": {
                    "summary": "User has no profile",
                    "description": "User has no profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_HAS_NO_USER_TYPE",
                          "message": "User has no profile"
                        }
                      ]
                    }
                  },
                  "ERR_USER_TYPE_NO_ACCESS": {
                    "summary": "Permission denied",
                    "description": "Permission denied",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_TYPE_NO_ACCESS",
                          "message": "Permission denied"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_HYPERLINK, ERR_INPUT_INVALID_DATE, ERR_INPUT_REQUIRED, ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_HYPERLINK": {
                    "summary": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "description": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_HYPERLINK",
                          "message": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_INVALID_DATE": {
                    "summary": "The input is not a valid date.",
                    "description": "The input is not a valid date.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_INVALID_DATE",
                          "message": "The input is not a valid date."
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_REQUIRED": {
                    "summary": "Field is required",
                    "description": "Field is required",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_REQUIRED",
                          "message": "Field is required"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/requestFile/{ref}/reply": {
      "post": {
        "summary": "Reply to Request File",
        "description": "### Description:\n  Processes a reply to a specific Request File.\n### Precondition:\n  The user must be authenticated and have the proper access to reply to the specified request file.\n### Response:\n  The reply to the request file is processed, and a successful response is returned with the status of the action.\n",
        "tags": [
          "requestFile"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "required": true,
            "description": "The unique reference of the Request File upload link.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFileReplyPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The reply to the Request File has been successfully processed."
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_REQUEST_FILE_NO_FILE_UPLOADED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_REQUEST_FILE_NO_FILE_UPLOADED": {
                    "summary": "No file has been uploaded for the request file",
                    "description": "No file has been uploaded for the request file",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_REQUEST_FILE_NO_FILE_UPLOADED",
                          "message": "No file has been uploaded for the request file"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_HYPERLINK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_HYPERLINK": {
                    "summary": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "description": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_HYPERLINK",
                          "message": "Not allowed hyperlink domain. Hyperlink domain should not different from anchored text domain."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/preview/file/{id}": {
      "get": {
        "summary": "View a file in Repositories Gateway source",
        "description": "Views the specified file in its Repositories Gateway source. Must be assigned the `view` permission for the file.",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the entity.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The preview content is generated successfully"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS": {
                    "summary": "Target user has insufficient access permissions",
                    "description": "Target user has insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS",
                          "message": "Target user has insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/actions/move": {
      "post": {
        "summary": "Move multiple folders",
        "description": "### Description:\n   Moves multiple folders to a new destination folder.\n### Precondition:\n  User must have `folder_move` permission for the folders being moved.\n  User must have `folder_add` permission for the destination folder.\n### Response:\n  Folders are moved\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipleFolderIdRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Folders successfully moved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationMoveFolders"
                }
              }
            }
          },
          "207": {
            "description": "Partially successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationMoveFolders"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_FOLDER_QUOTA_EXCEEDED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_FOLDER_QUOTA_EXCEEDED": {
                    "summary": "Folder's remaining storage quota does not permit for a file upload or operation of this size.",
                    "description": "Folder's remaining storage quota does not permit for a file upload or operation of this size.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_FOLDER_QUOTA_EXCEEDED",
                          "message": "Folder's remaining storage quota does not permit for a file upload or operation of this size."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/{id}/quota": {
      "get": {
        "summary": "Return the folder quota",
        "description": "### Description:\n   Returns the quota information for a specific folder.\n### Precondition:\n  User must have `file_add` permission for the folder.\n### Response:\n  The folder quota is returned\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "fileId",
            "required": false,
            "description": "The unique identifier (UUID) of the file.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The folder quota has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderQuota"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED, ERR_ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_FOUND": {
                    "summary": "Entity does not exist",
                    "description": "Entity does not exist",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_FOUND",
                          "message": "Entity does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/{id}/children": {
      "get": {
        "summary": "List folder children",
        "description": "### Description:\n  Returns the list of folder children, where folders are fetched first, followed by files.\n### Precondition:\n  User must have `properties_view` permission for the folder.\n### Response:\n  Returns a list of folders and files within the specified folder.\n### Sorting:\n  Sort string syntax `FIELD_NAME:ORDER`.\n\n  ORDER can be `asc` or `desc`.\n### Sorting options:\n  | FIELD_NAME | Description |\n  |------------|-------------|\n  | name       | The name of the folder or file |\n  | created    | The creation datetime of the folder or file |\n  | modified   | The last modified datetime of the folder or file |\n  | size       | The number of items in the folder (for folders) or the file size (for files) |\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "required": false,
            "description": "Filter by deletion status. If true, show only deleted items; if false, show non-deleted items; if not specified, show both deleted and non-deleted items.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Sorting options.",
            "schema": {
              "type": "string",
              "enum": [
                "name:asc",
                "name:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc",
                "size:asc",
                "size:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "extensions",
            "required": false,
            "description": "A comma-delimited list of file extensions to include in the filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "regex",
            "required": false,
            "description": "A regular expression pattern used to filter files by their names or other attributes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "description": "Filter by the name of the folder or file within the folder.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fileId",
            "required": false,
            "description": "Filter by a specific file ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of folder children.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Folder"
                      },
                      {
                        "$ref": "#/components/schemas/File"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/top": {
      "get": {
        "summary": "List top level folders",
        "description": "### Description:\n  Returns the list of top level folders.\n### Precondition:\n  The user profile must have \"Collaboration Allowed\" enabled.\n### Response:\n  Lists of top level folders are returned.\n### Sorting:\n  Sort string syntax `FIELD_NAME:ORDER`.\n\n  ORDER can be `asc` or `desc`.\n### Sorting options:\n  | FIELD_NAME | Description |\n  |------------|-------------|\n  | name       | The name of the folder |\n  | created    | The creation datetime of the folder |\n  | modified   | The last modified datetime of the folder |\n  | size       | The number of items in the folder |\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "deleted",
            "required": false,
            "description": "Filter by deletion status. If true, show only deleted items; if false, show non-deleted items; if not specified, show both deleted and non-deleted items.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Sorting options.",
            "schema": {
              "type": "string",
              "enum": [
                "name:asc",
                "name:desc",
                "created:asc",
                "created:desc",
                "modified:asc",
                "modified:desc",
                "size:asc",
                "size:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The top level folders have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folders"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/{id}": {
      "delete": {
        "summary": "Delete a folder",
        "description": "### Description:\n  Deletes a specified folder.\n### Precondition:\n  User must have `folder_delete` permission for the folder.\n### Response:\n  The folder is deleted\n## Additional Information:\n  The folder will be automatically deleted after a set number of days as configured by the administrator.\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The folder has been succesfully deleted."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_TENANT_SUSPENDED, ERR_ACCESS_DENIED, ERR_ENTITY_IS_SYNC_DIR, ERR_ENTITY_IS_MY_DIR, ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_IS_NOT_UPDATABLE, ERR_ENTITY_IS_SECURE_FOLDER, ERR_ENTITY_CONTAINS_LOCKED_FILES, ERR_ACCESS_USER, ERR_PROFILE_COLLABORATION_DISABLED, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_TENANT_SUSPENDED": {
                    "summary": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access.",
                    "description": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_TENANT_SUSPENDED",
                          "message": "Access to the service is restricted by the service provider. Contact your administrator for updates on restoring normal access."
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SYNC_DIR": {
                    "summary": "Operation not permitted on My Folder",
                    "description": "Operation not permitted on My Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SYNC_DIR",
                          "message": "Operation not permitted on My Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_MY_DIR": {
                    "summary": "Operation not permitted on Tray Folder",
                    "description": "Operation not permitted on Tray Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_MY_DIR",
                          "message": "Operation not permitted on Tray Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_NOT_UPDATABLE": {
                    "summary": "Can not update folder",
                    "description": "Can not update folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_NOT_UPDATABLE",
                          "message": "Can not update folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_CONTAINS_LOCKED_FILES": {
                    "summary": "Folder contains locked files",
                    "description": "Folder contains locked files",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_CONTAINS_LOCKED_FILES",
                          "message": "Folder contains locked files"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_COLLABORATION_DISABLED": {
                    "summary": "User's profile has no collaboration access",
                    "description": "User's profile has no collaboration access",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_COLLABORATION_DISABLED",
                          "message": "User's profile has no collaboration access"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "get": {
        "summary": "Return the folder",
        "description": "### Description:\n  Return the folder corresponding to the provided ID.\n### Precondition:\n  User must have `properties_view` permission for the folder.\n### Response:\n  The folder is returned\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The folder has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder1"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_FILTER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_FILTER": {
                    "summary": "Filter validation failed",
                    "description": "Filter validation failed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_FILTER",
                          "message": "Filter validation failed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_DENIED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "410": {
            "description": "Gone<br /><br /><i>Possible error codes: </i>ERR_ENTITY_DELETED_PERMANENTLY",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_DELETED_PERMANENTLY": {
                    "summary": "Entity is deleted permanently",
                    "description": "Entity is deleted permanently",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED_PERMANENTLY",
                          "message": "Entity is deleted permanently"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "put": {
        "summary": "Update a folder",
        "description": "### Description:\n  Updates a folder\n### Precondition:\n  User must have `properties_edit` permission for the folder.\n### Response:\n  The folder is updated\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderUpdatePutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The folder has been updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder1"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_DENIED, ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EXISTS",
                          "message": "Entity exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/{id}/activities": {
      "get": {
        "summary": "Return folder activities",
        "description": "### Description:\nReturn the activities of a specified folder.\n\n### Precondition:\nThe user must have the `user_view` permission for the folder.\n\n### Response:\nReturns the folder activities.\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "noDayBack",
            "required": false,
            "description": "Number of days to look back when searching for activities.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "startTime",
            "required": false,
            "description": "Start time of the search range, represented as a Unix timestamp.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "endTime",
            "required": false,
            "description": "End time of the search range, represented as a Unix timestamp.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "startDate",
            "required": false,
            "description": "Start date of the search range.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "required": false,
            "description": "End date of the search range.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "description": "Filter activities to show either all or only the user\u2019s own activities.",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "my"
              ]
            }
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "description": "Search activities by email body, subject, sender, or recipients.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "description": "Specifies the type of activity to filter.",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "content_changes",
                "file_changes",
                "folder_changes",
                "kitepoint",
                "mail",
                "tasks",
                "comments",
                "folder_activities"
              ]
            }
          },
          {
            "in": "query",
            "name": "transactionId",
            "required": false,
            "description": "Transaction ID associated with the activities.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Defines the sorting order of the results.",
            "schema": {
              "type": "string",
              "enum": [
                "id:asc",
                "id:desc",
                "created:asc",
                "created:desc",
                "event_name:asc",
                "event_name:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "nested",
            "required": false,
            "description": "If set to `true`, includes activities from nested folders.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "fileId",
            "required": false,
            "description": "Specifies a file ID within the folder to filter activities related to that file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully return folder activities.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/{id}/activities/actions/exportCSV": {
      "get": {
        "summary": "Export folder activities",
        "description": "### Description:\nExports the activities of a folder in CSV format.\n\n### Precondition:\nThe user must have the `user_view` permission for the folder.\n\n### Response:\nThe folder activities are returned in CSV format.\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "noDayBack",
            "required": false,
            "description": "Number of days to look back when searching for activities.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "startTime",
            "required": false,
            "description": "Start time of the search range, represented as a Unix timestamp.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "endTime",
            "required": false,
            "description": "End time of the search range, represented as a Unix timestamp.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "startDate",
            "required": false,
            "description": "Start date of the search range.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "required": false,
            "description": "End date of the search range.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "description": "Filter activities to show either all or only the user\u2019s own activities.",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "my"
              ]
            }
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "description": "Search activities by email body, subject, sender, or recipients.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "description": "Specifies the type of activity to filter.",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "content_changes",
                "file_changes",
                "folder_changes",
                "kitepoint",
                "mail",
                "tasks",
                "comments",
                "folder_activities"
              ]
            }
          },
          {
            "in": "query",
            "name": "transactionId",
            "required": false,
            "description": "Transaction ID associated with the activities.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Defines the sorting order of the results.",
            "schema": {
              "type": "string",
              "enum": [
                "id:asc",
                "id:desc",
                "created:asc",
                "created:desc",
                "event_name:asc",
                "event_name:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "nested",
            "required": false,
            "description": "If set to `true`, includes activities from nested folders.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "fileId",
            "required": false,
            "description": "Specifies a file ID within the folder to filter activities related to that file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully initiated the folder activities export.",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/folders": {
      "put": {
        "summary": "Bulk update folders",
        "description": "### Description:\nUpdates multiple folders in the single request.\n\n### Precondition:\nThe user must be an administrator with access to `Files And Folders`.\n\n### Response:\nThe specified folders are updated.\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminFolderPutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Folders were updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folders"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_DLP_LOCKED, ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_IS_MY_DIR, ERR_ENTITY_IS_SYNC_DIR, ERR_ENTITY_NOT_SCANNED, ERR_ENTITY_VIRUS_FOUND, ERR_PROFILE_COLLABORATION_DISABLED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DLP_LOCKED": {
                    "summary": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "description": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DLP_LOCKED",
                          "message": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_MY_DIR": {
                    "summary": "Operation not permitted on Tray Folder",
                    "description": "Operation not permitted on Tray Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_MY_DIR",
                          "message": "Operation not permitted on Tray Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SYNC_DIR": {
                    "summary": "Operation not permitted on My Folder",
                    "description": "Operation not permitted on My Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SYNC_DIR",
                          "message": "Operation not permitted on My Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_SCANNED": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_SCANNED",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_VIRUS_FOUND": {
                    "summary": "File is infected",
                    "description": "File is infected",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_VIRUS_FOUND",
                          "message": "File is infected"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_COLLABORATION_DISABLED": {
                    "summary": "User's profile has no collaboration access",
                    "description": "User's profile has no collaboration access",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_COLLABORATION_DISABLED",
                          "message": "User's profile has no collaboration access"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_EXCEEDS_MAX_VALUE, ERR_INPUT_PAST_DATE, ERR_INVALID_PARAMETER, ERR_SYSTEM_EXTEND_FILE_EXPIRATION_DISABLED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_EXCEEDS_MAX_VALUE": {
                    "summary": "Field value exceeds maximum allowed value",
                    "description": "Field value exceeds maximum allowed value",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EXCEEDS_MAX_VALUE",
                          "message": "Field value exceeds maximum allowed value"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_PAST_DATE": {
                    "summary": "Field value should be future date",
                    "description": "Field value should be future date",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_PAST_DATE",
                          "message": "Field value should be future date"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_EXTEND_FILE_EXPIRATION_DISABLED": {
                    "summary": "Extending file expiration is not allowed",
                    "description": "Extending file expiration is not allowed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_EXTEND_FILE_EXPIRATION_DISABLED",
                          "message": "Extending file expiration is not allowed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/folders/{id}/members/me": {
      "delete": {
        "summary": "Remove oneself as a folder member",
        "description": "### Description:\nRemoves the current user from the specified folder.\n\n### Precondition:\nThe user must be a member of the folder.\n\n### Response:\nThe current user is removed from the folder.\n",
        "tags": [
          "folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "downgradeNested",
            "required": false,
            "description": "If set to `true`, the user's role will be removed from all nested folders.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user was successfully removed from the folder."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_INPUT_IS_OWNER, ERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_IS_OWNER": {
                    "summary": "Can not set owner role",
                    "description": "Can not set owner role",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_IS_OWNER",
                          "message": "Can not set owner role"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS": {
                    "summary": "Parent folder member exists",
                    "description": "Parent folder member exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS",
                          "message": "Parent folder member exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/devices/me/actions/logout": {
      "delete": {
        "summary": "Logout current user",
        "description": "Logout current user",
        "tags": [
          "devices"
        ],
        "responses": {
          "200": {
            "description": "Logout successfully\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Logout"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/members": {
      "post": {
        "summary": "Share files",
        "description": "### Description:\n  Shares specified files with multiple users.\n### Precondition:\n  Must be assigned the `user_add` permission for the folder.\n### Response:\n  Shares the files with the specified users.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "updateIfExists",
            "required": false,
            "description": "If set to `true`, updates the member if they already exist and have a different folder role.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "description": "If set to `true`, the operation will continue for the valid items even if some items result in failure.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "downgradeNested",
            "required": false,
            "description": "If set to `true`, demote the user member role in all applicable nested folders.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileMembersPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "All files were successfully shared with the specified users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderFileAddMembers"
                }
              }
            }
          },
          "207": {
            "description": "Files were partially shared with users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderFileAddMembers"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_IS_MY_DIR, ERR_ENTITY_IS_SYNC_DIR, ERR_ENTITY_IS_SECURE_FOLDER, ERR_ACCESS_USER, ERR_LICENSE_MAX_USERS_COUNT_REACHED, ERR_USER_HAS_NO_USER_TYPE, ERR_USER_TYPE_NO_ACCESS, ERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST, ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS, ERR_PROFILE_COLLABORATION_DISABLED, ERR_ENTITY_IS_OWNER, ERR_ENTITY_DELETED, ERR_CLIENT_OBJECT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_MY_DIR": {
                    "summary": "Operation not permitted on Tray Folder",
                    "description": "Operation not permitted on Tray Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_MY_DIR",
                          "message": "Operation not permitted on Tray Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SYNC_DIR": {
                    "summary": "Operation not permitted on My Folder",
                    "description": "Operation not permitted on My Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SYNC_DIR",
                          "message": "Operation not permitted on My Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_SECURE_FOLDER": {
                    "summary": "Operation not permitted on restricted Folder.",
                    "description": "Operation not permitted on restricted Folder.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_SECURE_FOLDER",
                          "message": "Operation not permitted on restricted Folder."
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_LICENSE_MAX_USERS_COUNT_REACHED": {
                    "summary": "License count has been reached",
                    "description": "License count has been reached",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_LICENSE_MAX_USERS_COUNT_REACHED",
                          "message": "License count has been reached"
                        }
                      ]
                    }
                  },
                  "ERR_USER_HAS_NO_USER_TYPE": {
                    "summary": "User has no profile",
                    "description": "User has no profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_HAS_NO_USER_TYPE",
                          "message": "User has no profile"
                        }
                      ]
                    }
                  },
                  "ERR_USER_TYPE_NO_ACCESS": {
                    "summary": "Permission denied",
                    "description": "Permission denied",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_TYPE_NO_ACCESS",
                          "message": "Permission denied"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST": {
                    "summary": "Distribution list user is not allowed to register",
                    "description": "Distribution list user is not allowed to register",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST",
                          "message": "Distribution list user is not allowed to register"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS": {
                    "summary": "Target user has insufficient access permissions",
                    "description": "Target user has insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS",
                          "message": "Target user has insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_COLLABORATION_DISABLED": {
                    "summary": "User's profile has no collaboration access",
                    "description": "User's profile has no collaboration access",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_COLLABORATION_DISABLED",
                          "message": "User's profile has no collaboration access"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_OWNER": {
                    "summary": "Operation not permitted on owner member",
                    "description": "Operation not permitted on owner member",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_OWNER",
                          "message": "Operation not permitted on owner member"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_CLIENT_OBJECT": {
                    "summary": "Operation is not allowed on this client object",
                    "description": "Operation is not allowed on this client object",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_CLIENT_OBJECT",
                          "message": "Operation is not allowed on this client object"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS, ERR_ENTITY_ROLE_IS_ASSIGNED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EXISTS",
                          "message": "Entity exists"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_ROLE_IS_ASSIGNED": {
                    "summary": "Cannot assign already assigned role",
                    "description": "Cannot assign already assigned role",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_ROLE_IS_ASSIGNED",
                          "message": "Cannot assign already assigned role"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/shared": {
      "get": {
        "summary": "Get shared files",
        "description": "### Description:\n  Gets a list of files that have been shared with the user. For each file, the file name, size, and date the file was shared is returned.\n### Precondition:\n  If the user is assigned the Restricted profile, the \"Collaboration Allowed\" setting must be turned to get results.\n### Response:\n  Returns the list of files that have been shared with the user.\n### Sorting:\n  Sorting can be applied using two query parameters: `orderBy` for the field name,\n  and `orderType` for the sort order, which can be either `asc` or `desc`.\n### Sorting field options:\n  | FIELD_NAME | Description |\n  |------------|-------------|\n  | name       | The name of the file |\n  | size       | The size of the file |\n  | shared     | The datetime when the file was shared |\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Sorting field.",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "size",
                "shared"
              ]
            }
          },
          {
            "in": "query",
            "name": "orderType",
            "required": false,
            "description": "Sorting order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully return files shared with the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/{id}/members/me": {
      "delete": {
        "summary": "Remove access to shared file",
        "description": "### Description:\n  Removes the current user's access to the specified file that was shared with them.\n### Precondition:\n  The file must have been shared with the user.\n### Response:\n  Removes the user\u2019s access to the shared file.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been successfully removed from the file."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/previewSupport": {
      "get": {
        "summary": "Get file preview status",
        "description": "### Description:\n  Gets the status of the specified file to determine if the file type is supported for preview.\n### Precondition:\n  Must be assigned the `view` permission for the folder.\n### Response:\n  Returns confirmation as to whether the file type is supported for preview.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "required": true,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of unique identifiers (UUIDs) of the files supported for preview.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilePreviewSupport"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_FILTER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_FILTER": {
                    "summary": "Filter validation failed",
                    "description": "Filter validation failed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_FILTER",
                          "message": "Filter validation failed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/files": {
      "put": {
        "summary": "Update files",
        "description": "### Description:\n  Updates the metadata of multiple files at the same time.\n### Precondition:\n  Must be an administrator with access to the Files and Folders page in the Kiteworks Admin Console.\n### Response:\n  Updates the selected files.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminFilePutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The files have been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Files"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_ENTITY_DLP_LOCKED, ERR_ENTITY_IS_ATTACHMENT, ERR_ENTITY_NOT_SCANNED, ERR_ENTITY_VIRUS_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DLP_LOCKED": {
                    "summary": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "description": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DLP_LOCKED",
                          "message": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_ATTACHMENT": {
                    "summary": "Operation not permitted on attachment",
                    "description": "Operation not permitted on attachment",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_ATTACHMENT",
                          "message": "Operation not permitted on attachment"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_SCANNED": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_SCANNED",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_VIRUS_FOUND": {
                    "summary": "File is infected",
                    "description": "File is infected",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_VIRUS_FOUND",
                          "message": "File is infected"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_EXCEEDS_MAX_VALUE, ERR_INPUT_PAST_DATE, ERR_INVALID_PARAMETER, ERR_SYSTEM_EXTEND_FILE_EXPIRATION_DISABLED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_EXCEEDS_MAX_VALUE": {
                    "summary": "Field value exceeds maximum allowed value",
                    "description": "Field value exceeds maximum allowed value",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_EXCEEDS_MAX_VALUE",
                          "message": "Field value exceeds maximum allowed value"
                        }
                      ]
                    }
                  },
                  "ERR_INPUT_PAST_DATE": {
                    "summary": "Field value should be future date",
                    "description": "Field value should be future date",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_PAST_DATE",
                          "message": "Field value should be future date"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_EXTEND_FILE_EXPIRATION_DISABLED": {
                    "summary": "Extending file expiration is not allowed",
                    "description": "Extending file expiration is not allowed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_EXTEND_FILE_EXPIRATION_DISABLED",
                          "message": "Extending file expiration is not allowed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/files/actions/downloadLink": {
      "post": {
        "summary": "Get link for downloading files and folders",
        "description": "### Description:\n  Generates a link for downloading specified folders and files.\n### Precondition:\n  Must be assigned the download permission for the specified files and folders.\n### Response:\n  A download link is generated and returned.\n  Returns the link for downloading the files and folders, once files complete security scans. Depending on system scan policies, files will be scanned for anti-virus, data loss prevention, and advanced threat protection.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "partialSuccess",
            "required": false,
            "description": "Indicates whether the operation should proceed if some files/folders fail the check.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "extensions",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Filter results to include only files with the specified comma-seperated list of extensions.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostFileZipStatusBodyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The download link has been successfully generated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadLink"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_FILTER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_FILTER": {
                    "summary": "Filter validation failed",
                    "description": "Filter validation failed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_FILTER",
                          "message": "Filter validation failed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/files/{id}/actions/rescan": {
      "post": {
        "summary": "Scan a file for security",
        "description": "### Description:\n  Runs a security scan on the specified file.\n### Precondition:\n  Must authenticate as an administrator with a role allowing for manually scanning files for security.\n### Response:\n  Scans the selected file for security. Depending on system scan policies, the file is scanned for anti-virus, data loss prevention, and advanced threat protection.\n",
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The file has been successfully submitted for rescan.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminFileRescan"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_ADMIN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_ADMIN": {
                    "summary": "Insufficient admin access permissions",
                    "description": "Insufficient admin access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_ADMIN",
                          "message": "Insufficient admin access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br /><br /><i>Possible error codes: </i>ERR_ENTITY_FILE_IS_NOT_FOUND, ERR_ENABLED_SCANNING_SERVICE_IS_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_FILE_IS_NOT_FOUND": {
                    "summary": "The file is not found",
                    "description": "The file is not found",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_FILE_IS_NOT_FOUND",
                          "message": "The file is not found"
                        }
                      ]
                    }
                  },
                  "ERR_ENABLED_SCANNING_SERVICE_IS_NOT_FOUND": {
                    "summary": "No enabled scanning service is found",
                    "description": "No enabled scanning service is found",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENABLED_SCANNING_SERVICE_IS_NOT_FOUND",
                          "message": "No enabled scanning service is found"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_SCANNING_IN_PROGRESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SCANNING_IN_PROGRESS": {
                    "summary": "Scanning in progress. Please rescan later.",
                    "description": "Scanning in progress. Please rescan later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SCANNING_IN_PROGRESS",
                          "message": "Scanning in progress. Please rescan later."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/externalDL": {
      "delete": {
        "summary": "Delete external DL",
        "description": "Delete external DL",
        "tags": [
          "externalDL"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalDLUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deleted external DL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalDLs"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_DENIED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "get": {
        "summary": "Get external DL",
        "description": "Get external DL",
        "tags": [
          "externalDL"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return external DL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalDLs"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_DENIED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "post": {
        "summary": "Add external DL",
        "description": "Add external DL",
        "tags": [
          "externalDL"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalDLUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added external DL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalDLs"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_DENIED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_DENIED": {
                    "summary": "Your access is denied.",
                    "description": "Your access is denied.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_DENIED",
                          "message": "Your access is denied.",
                          "redirectUrl": "/login?code=3317"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/sources/{id}/query": {
      "get": {
        "summary": "SharePoint Sites Search api",
        "description": "search SharePoint sites",
        "tags": [
          "search"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the entity.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "include_kw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "include_container",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "search_type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSharePointSitesResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_AUTH_EC_UPDATE_TOKEN, ERR_SPO_SEARCH",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_EC_UPDATE_TOKEN": {
                    "summary": "Token update/receive required",
                    "description": "Token update/receive required",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_EC_UPDATE_TOKEN",
                          "message": "Token update/receive required"
                        }
                      ]
                    }
                  },
                  "ERR_SPO_SEARCH": {
                    "summary": "Unable to call SPO Search API",
                    "description": "Unable to call SPO Search API",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SPO_SEARCH",
                          "message": "Unable to call SPO Search API"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/sharedMailboxes": {
      "delete": {
        "summary": "Delete shared mailboxes",
        "description": "Delete shared mailboxes",
        "tags": [
          "sharedMailbox"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Shared mailbox user id list  (Recommended request size <= 100)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The sharedMailboxes are deleted."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED, ERR_ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_FOUND": {
                    "summary": "Entity does not exist",
                    "description": "Entity does not exist",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_FOUND",
                          "message": "Entity does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_ADMIN, ERR_ACCESS_USER, ERR_ADMIN_ROLE_RANK_RESTRICTED, ERR_LICENSE_MAX_USERS_COUNT_REACHED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_ADMIN": {
                    "summary": "Insufficient admin access permissions",
                    "description": "Insufficient admin access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_ADMIN",
                          "message": "Insufficient admin access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ADMIN_ROLE_RANK_RESTRICTED": {
                    "summary": "Action is restricted due to admin role rank",
                    "description": "Action is restricted due to admin role rank",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ADMIN_ROLE_RANK_RESTRICTED",
                          "message": "Action is restricted due to admin role rank"
                        }
                      ]
                    }
                  },
                  "ERR_LICENSE_MAX_USERS_COUNT_REACHED": {
                    "summary": "License count has been reached",
                    "description": "License count has been reached",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_LICENSE_MAX_USERS_COUNT_REACHED",
                          "message": "License count has been reached"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "get": {
        "summary": "Get shared mailbox list by user id list",
        "description": "Get shared mailbox list by user id list",
        "tags": [
          "sharedMailbox"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "modified:asc",
                "modified:desc",
                "active:asc",
                "active:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Shared mailbox user id list  (Recommended request size <= 100)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return shared mailboxes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedMailboxList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "post": {
        "summary": "Add shared mailbox record",
        "description": "Add shared mailbox",
        "tags": [
          "sharedMailbox"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharedMailboxPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Shared Mailbox is added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedMailbox"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_ADMIN, ERR_ACCESS_USER, ERR_ADMIN_ROLE_RANK_RESTRICTED, ERR_NOT_INTERNAL_DOMAIN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_ADMIN": {
                    "summary": "Insufficient admin access permissions",
                    "description": "Insufficient admin access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_ADMIN",
                          "message": "Insufficient admin access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ADMIN_ROLE_RANK_RESTRICTED": {
                    "summary": "Action is restricted due to admin role rank",
                    "description": "Action is restricted due to admin role rank",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ADMIN_ROLE_RANK_RESTRICTED",
                          "message": "Action is restricted due to admin role rank"
                        }
                      ]
                    }
                  },
                  "ERR_NOT_INTERNAL_DOMAIN": {
                    "summary": "The email is not internal domain",
                    "description": "The email is not internal domain",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_NOT_INTERNAL_DOMAIN",
                          "message": "The email is not internal domain"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large<br /><br /><i>Possible error codes: </i>ERR_SYSTEM_NO_STORAGE_AVAILABLE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_SYSTEM_NO_STORAGE_AVAILABLE": {
                    "summary": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "description": "Folder owner's remaining storage quota does not permit for a file upload of this size.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_NO_STORAGE_AVAILABLE",
                          "message": "Folder owner's remaining storage quota does not permit for a file upload of this size."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER, ERR_CANNOT_RETAIN_DATA_TO_THE_SAME_USER, ERR_USER_IS_NOT_INTERNAL_DL_OR_INTERNAL_ACCOUNT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  },
                  "ERR_CANNOT_RETAIN_DATA_TO_THE_SAME_USER": {
                    "summary": "Deleted/demoted user data cannot be retain to himself",
                    "description": "Deleted/demoted user data cannot be retain to himself",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_CANNOT_RETAIN_DATA_TO_THE_SAME_USER",
                          "message": "Deleted/demoted user data cannot be retain to himself"
                        }
                      ]
                    }
                  },
                  "ERR_USER_IS_NOT_INTERNAL_DL_OR_INTERNAL_ACCOUNT": {
                    "summary": "User is not internal distribution list or internal domain",
                    "description": "User is not internal distribution list or internal domain",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_USER_IS_NOT_INTERNAL_DL_OR_INTERNAL_ACCOUNT",
                          "message": "User is not internal distribution list or internal domain"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/sharedMailboxes/{id}": {
      "patch": {
        "summary": "Update shared mailbox members",
        "description": "Update shared mailbox members",
        "tags": [
          "sharedMailbox"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharedMailboxPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shared Mailbox is updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedMailbox"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_ADMIN, ERR_ACCESS_USER, ERR_ADMIN_ROLE_RANK_RESTRICTED, ERR_NOT_INTERNAL_DOMAIN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_ADMIN": {
                    "summary": "Insufficient admin access permissions",
                    "description": "Insufficient admin access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_ADMIN",
                          "message": "Insufficient admin access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ADMIN_ROLE_RANK_RESTRICTED": {
                    "summary": "Action is restricted due to admin role rank",
                    "description": "Action is restricted due to admin role rank",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ADMIN_ROLE_RANK_RESTRICTED",
                          "message": "Action is restricted due to admin role rank"
                        }
                      ]
                    }
                  },
                  "ERR_NOT_INTERNAL_DOMAIN": {
                    "summary": "The email is not internal domain",
                    "description": "The email is not internal domain",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_NOT_INTERNAL_DOMAIN",
                          "message": "The email is not internal domain"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/sharedMailboxes": {
      "get": {
        "summary": "Get current user's shared mailboxes",
        "description": "Get current user's shared mailboxes",
        "tags": [
          "sharedMailbox"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "modified:asc",
                "modified:desc",
                "active:asc",
                "active:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "id:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Shared mailbox user id list  (Recommended request size <= 100)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return shared mailboxes of current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedMailboxList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_NOT_INTERNAL_DOMAIN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_NOT_INTERNAL_DOMAIN": {
                    "summary": "The email is not internal domain",
                    "description": "The email is not internal domain",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_NOT_INTERNAL_DOMAIN",
                          "message": "The email is not internal domain"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "patch": {
        "summary": "Update current user's shared mailbox active status",
        "description": "Update current user's shared mailbox active status",
        "tags": [
          "sharedMailbox"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharedMailboxStatusPatchRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Shared Mailbox status is updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedMailboxList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_NOT_INTERNAL_DOMAIN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_NOT_INTERNAL_DOMAIN": {
                    "summary": "The email is not internal domain",
                    "description": "The email is not internal domain",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_NOT_INTERNAL_DOMAIN",
                          "message": "The email is not internal domain"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_MAX_ACTIVED_SHAREDMAILBOX",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_MAX_ACTIVED_SHAREDMAILBOX": {
                    "summary": "Maximum activated shared mailbox reached",
                    "description": "Maximum activated shared mailbox reached",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_MAX_ACTIVED_SHAREDMAILBOX",
                          "message": "Maximum activated shared mailbox reached"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/sharedMailboxes/mail/actions/counters": {
      "get": {
        "summary": "Get current user's shared mailboxes counters",
        "description": "Get current user's shared mailboxes counters",
        "tags": [
          "sharedMailbox"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "Shared mailbox user id list  (Recommended request size <= 100)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return shared mailboxes counters of current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailCountersList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/sharedMailboxes/{id}/settings": {
      "get": {
        "summary": "Get current user's shared mailboxes setting",
        "description": "Get current user's shared mailboxes setting",
        "tags": [
          "sharedMailbox"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return shared mailboxes setting of current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedMailboxSetting"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/sharedMailboxes/{id}/webForms": {
      "get": {
        "summary": "List web forms available to shared mailboxes",
        "description": "Returns a list of web forms available to shared mailboxes",
        "tags": [
          "sharedMailbox"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return shared mailboxes setting of current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebFormList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/cards": {
      "get": {
        "summary": "Get list of cards",
        "description": "Get list of cards",
        "tags": [
          "cards"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "type:in",
            "required": true,
            "explode": true,
            "style": "form",
            "description": "Type of cards to retrieve. Available card type(s): content_encryption,email_json_migration,event_log_partitioning_migration,system_security_scanning,events_table_monitor,appadmin_db,sysadmin_db,sysadmin_hosts,epg_warnings",
            "schema": {
              "type": "array",
              "enum": [
                "content_encryption",
                "email_json_migration",
                "event_log_partitioning_migration",
                "system_security_scanning",
                "events_table_monitor",
                "appadmin_db",
                "sysadmin_db",
                "sysadmin_hosts",
                "epg_warnings"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of cards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/cards/details": {
      "get": {
        "summary": "Get list of cards",
        "description": "Get list of cards",
        "tags": [
          "cards"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "type:in",
            "required": true,
            "explode": true,
            "style": "form",
            "description": "Type of cards to retrieve. Available card type(s): content_encryption,email_json_migration,event_log_partitioning_migration,system_security_scanning,events_table_monitor,appadmin_db,sysadmin_db,sysadmin_hosts,epg_warnings",
            "schema": {
              "type": "array",
              "enum": [
                "content_encryption",
                "email_json_migration",
                "event_log_partitioning_migration",
                "system_security_scanning",
                "events_table_monitor",
                "appadmin_db",
                "sysadmin_db",
                "sysadmin_hosts",
                "epg_warnings"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of cards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/cards/actions": {
      "post": {
        "summary": "Post an action to take on a specific card",
        "description": "Post an action to take on a specific card",
        "tags": [
          "cards"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardActionPostRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Action has been accepted"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br /><br /><i>Possible error codes: </i>ERR_ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_NOT_FOUND": {
                    "summary": "Entity does not exist",
                    "description": "Entity does not exist",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_FOUND",
                          "message": "Entity does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/userSshPublicKeys/create": {
      "post": {
        "summary": "Create new SSH public key record for current login user",
        "description": "Create new SSH public key record for current login user",
        "tags": [
          "userSshPublicKeys"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "description": "The name of SSH Public key",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "publicKey",
            "required": true,
            "description": "SSH Public key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "New created ssh public key record"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_PROFILE_SFTP_DISABLED, ERR_SYSTEM_ROLE_SFTP_DISABLED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SFTP_DISABLED": {
                    "summary": "SFTP is not enabled for this profile",
                    "description": "SFTP is not enabled for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SFTP_DISABLED",
                          "message": "SFTP is not enabled for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_ROLE_SFTP_DISABLED": {
                    "summary": "SFTP role is not enabled on server",
                    "description": "SFTP role is not enabled on server",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_ROLE_SFTP_DISABLED",
                          "message": "SFTP role is not enabled on server"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER, ERR_SSH_PUBLIC_KEY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  },
                  "ERR_SSH_PUBLIC_KEY_EXISTS": {
                    "summary": "Same ssh public key name exists",
                    "description": "Same ssh public key name exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SSH_PUBLIC_KEY_EXISTS",
                          "message": "Same ssh public key name exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/userSshPublicKeys/generate": {
      "post": {
        "summary": "Generate a new ssh public/private key pair",
        "description": "Generate a new ssh public/private key pair",
        "tags": [
          "userSshPublicKeys"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "description": "The name of SSH Public key",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "passphrase",
            "required": false,
            "description": "The passphrase of SSH Public key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Return new generated public/private key pair",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGeneratedSshPublicKeyKey"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_PROFILE_SFTP_DISABLED, ERR_SYSTEM_ROLE_SFTP_DISABLED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SFTP_DISABLED": {
                    "summary": "SFTP is not enabled for this profile",
                    "description": "SFTP is not enabled for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SFTP_DISABLED",
                          "message": "SFTP is not enabled for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_ROLE_SFTP_DISABLED": {
                    "summary": "SFTP role is not enabled on server",
                    "description": "SFTP role is not enabled on server",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_ROLE_SFTP_DISABLED",
                          "message": "SFTP role is not enabled on server"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER, ERR_SSH_PUBLIC_KEY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  },
                  "ERR_SSH_PUBLIC_KEY_EXISTS": {
                    "summary": "Same ssh public key name exists",
                    "description": "Same ssh public key name exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SSH_PUBLIC_KEY_EXISTS",
                          "message": "Same ssh public key name exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/userSshPublicKeys/{id}": {
      "delete": {
        "summary": "Delete current user's ssh public keys",
        "description": "Delete current user's ssh public keys",
        "tags": [
          "userSshPublicKeys"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the entity.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ssh key is marked as deleted successfully"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DELETED, ERR_PROFILE_SFTP_DISABLED, ERR_SYSTEM_ROLE_SFTP_DISABLED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DELETED": {
                    "summary": "Entity is deleted",
                    "description": "Entity is deleted",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DELETED",
                          "message": "Entity is deleted"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SFTP_DISABLED": {
                    "summary": "SFTP is not enabled for this profile",
                    "description": "SFTP is not enabled for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SFTP_DISABLED",
                          "message": "SFTP is not enabled for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_ROLE_SFTP_DISABLED": {
                    "summary": "SFTP role is not enabled on server",
                    "description": "SFTP role is not enabled on server",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_ROLE_SFTP_DISABLED",
                          "message": "SFTP role is not enabled on server"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/userSshPublicKeys": {
      "get": {
        "summary": "Get user's ssh public keys",
        "description": "Get list of ssh public keys",
        "tags": [
          "userSshPublicKeys"
        ],
        "responses": {
          "200": {
            "description": "Return list of ssh public keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSshPublicKeyList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_PROFILE_SFTP_DISABLED, ERR_SYSTEM_ROLE_SFTP_DISABLED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SFTP_DISABLED": {
                    "summary": "SFTP is not enabled for this profile",
                    "description": "SFTP is not enabled for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SFTP_DISABLED",
                          "message": "SFTP is not enabled for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_ROLE_SFTP_DISABLED": {
                    "summary": "SFTP role is not enabled on server",
                    "description": "SFTP role is not enabled on server",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_ROLE_SFTP_DISABLED",
                          "message": "SFTP role is not enabled on server"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/users/{id}/userSshPublicKeys": {
      "get": {
        "summary": "Admin get user's ssh public keys",
        "description": "Admin get user's ssh public keys",
        "tags": [
          "userSshPublicKeys"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of ssh public keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserSshPublicKeyList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_PROFILE_SFTP_DISABLED, ERR_SYSTEM_ROLE_SFTP_DISABLED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SFTP_DISABLED": {
                    "summary": "SFTP is not enabled for this profile",
                    "description": "SFTP is not enabled for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SFTP_DISABLED",
                          "message": "SFTP is not enabled for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_ROLE_SFTP_DISABLED": {
                    "summary": "SFTP role is not enabled on server",
                    "description": "SFTP role is not enabled on server",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_ROLE_SFTP_DISABLED",
                          "message": "SFTP role is not enabled on server"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/users/{id}/userSshPublicKeys/create": {
      "post": {
        "summary": "Admin create new SSH public key record for user",
        "description": "Admin create new SSH public key record for user",
        "tags": [
          "userSshPublicKeys"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSshPublicKeysPostCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New created ssh public key record"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_PROFILE_SFTP_DISABLED, ERR_SYSTEM_ROLE_SFTP_DISABLED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SFTP_DISABLED": {
                    "summary": "SFTP is not enabled for this profile",
                    "description": "SFTP is not enabled for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SFTP_DISABLED",
                          "message": "SFTP is not enabled for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_ROLE_SFTP_DISABLED": {
                    "summary": "SFTP role is not enabled on server",
                    "description": "SFTP role is not enabled on server",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_ROLE_SFTP_DISABLED",
                          "message": "SFTP role is not enabled on server"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER, ERR_SSH_PUBLIC_KEY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  },
                  "ERR_SSH_PUBLIC_KEY_EXISTS": {
                    "summary": "Same ssh public key name exists",
                    "description": "Same ssh public key name exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SSH_PUBLIC_KEY_EXISTS",
                          "message": "Same ssh public key name exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/users/{id}/userSshPublicKeys/generate": {
      "post": {
        "summary": "Admin generate a new ssh public/private key pair for user",
        "description": "Admin generate a new ssh public/private key pair for user",
        "tags": [
          "userSshPublicKeys"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSshPublicKeysPostGenerateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return new generated public/private key pair",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGeneratedSshPublicKeyKey"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_PROFILE_SFTP_DISABLED, ERR_SYSTEM_ROLE_SFTP_DISABLED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_PROFILE_SFTP_DISABLED": {
                    "summary": "SFTP is not enabled for this profile",
                    "description": "SFTP is not enabled for this profile",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_SFTP_DISABLED",
                          "message": "SFTP is not enabled for this profile"
                        }
                      ]
                    }
                  },
                  "ERR_SYSTEM_ROLE_SFTP_DISABLED": {
                    "summary": "SFTP role is not enabled on server",
                    "description": "SFTP role is not enabled on server",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SYSTEM_ROLE_SFTP_DISABLED",
                          "message": "SFTP role is not enabled on server"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER, ERR_SSH_PUBLIC_KEY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  },
                  "ERR_SSH_PUBLIC_KEY_EXISTS": {
                    "summary": "Same ssh public key name exists",
                    "description": "Same ssh public key name exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_SSH_PUBLIC_KEY_EXISTS",
                          "message": "Same ssh public key name exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/contacts": {
      "get": {
        "summary": "Get contacts list",
        "description": "Get contacts list",
        "tags": [
          "contacts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Sorting options. Accepts id, name. Sample format is id:asc",
            "schema": {
              "type": "string",
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc",
                "lastContactDate:asc",
                "lastContactDate:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return contacts list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_FILTER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_FILTER": {
                    "summary": "Filter validation failed",
                    "description": "Filter validation failed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_FILTER",
                          "message": "Filter validation failed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "post": {
        "summary": "Create a contact entry",
        "description": "Creates a kiteworks contact entry that includes a contact name and email address.",
        "tags": [
          "contacts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return newly created contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EXISTS",
                          "message": "Entity exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/contacts/{id}": {
      "delete": {
        "summary": "Deletes a contact entry",
        "description": "Delete a contact entry from the kiteworks contact list for this user.",
        "tags": [
          "contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the entity.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The contact is deleted"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "get": {
        "summary": "Get a contact",
        "description": "Returns the details of a specified kiteworks contact. e.g. I want the email address and name of this contact.",
        "tags": [
          "contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the entity.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "put": {
        "summary": "Update a contact entry",
        "description": "Update a kiteworks contact. The email address and name can be changed.",
        "tags": [
          "contacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the entity.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The contact is updated"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EXISTS",
                          "message": "Entity exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/groups": {
      "get": {
        "summary": "List kiteworks groups",
        "description": "Returns the list of kiteworks groups for this user, including the email address of each member in the group.",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name:contains",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Sorting options. Accepts id, name. Sample format is id:asc",
            "schema": {
              "type": "string",
              "enum": [
                "id:asc",
                "id:desc",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return groups list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_FILTER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_FILTER": {
                    "summary": "Filter validation failed",
                    "description": "Filter validation failed",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_FILTER",
                          "message": "Filter validation failed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "post": {
        "summary": "Create a group entry",
        "description": "Create a group of users",
        "tags": [
          "groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return newly created group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EXISTS",
                          "message": "Entity exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/groups/{id}": {
      "delete": {
        "summary": "Deletes a group entry",
        "description": "Delete a group",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the entity.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The group is deleted"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "get": {
        "summary": "Return users for the specified group",
        "description": "Returns the list of users for the specified group.",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the entity.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "put": {
        "summary": "Update a group entry",
        "description": "Update a group",
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the entity.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The group is updated"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict<br /><br /><i>Possible error codes: </i>ERR_ENTITY_EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ENTITY_EXISTS": {
                    "summary": "Entity exists",
                    "description": "Entity exists",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_EXISTS",
                          "message": "Entity exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/clients/action/eventLog": {
      "post": {
        "summary": "Post event logs from client",
        "description": "Post event logs from client",
        "tags": [
          "clientEventLogs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkClientEventLogsPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "event_logs has been added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCustomEventLog"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/query": {
      "get": {
        "summary": "Perform a search query",
        "description": "### Overview:\n  Search for files, folders, or emails based on query parameters.\n### Precondition:\n  - The user must be authenticated.\n### Response:\n  - Returns a list of matching files, folders, or emails.\n### Sorting:\n  Sorting can be applied using two query parameters: `orderBy` for the field name,\n  and `orderType` for the sort order, which can be either `asc` or `desc`.\n### Sorting field options:\n  | FIELD_NAME | Description |\n  |------------|-------------|\n  | score      | The search relevance score |\n  | name       | The name of the folder or file |\n  | created    | The creation datetime of the folder or file |\n  | modified   | The last modified datetime of the folder or file |\n",
        "tags": [
          "search"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "in": "query",
            "name": "includeContent",
            "required": true,
            "description": "Indicates whether it is a full-text search or a database search.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "searchType",
            "required": true,
            "explode": true,
            "style": "form",
            "description": "List of comma-separated search types (e.g., files: \"f\", folders: \"d\", emails: \"e\").",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "query",
            "required": false,
            "description": "Search query string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "objectId",
            "required": false,
            "description": "Search within a specific folder ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created",
            "required": false,
            "description": "Exact creation date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created:gt",
            "required": false,
            "description": "Created after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created:gte",
            "required": false,
            "description": "Created on or after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created:lt",
            "required": false,
            "description": "Created before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "created:lte",
            "required": false,
            "description": "Created on or before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified",
            "required": false,
            "description": "Exact modified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified:gt",
            "required": false,
            "description": "Modified after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified:gte",
            "required": false,
            "description": "Modified on or after the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified:lt",
            "required": false,
            "description": "Modified before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modified:lte",
            "required": false,
            "description": "Modified on or before the specified date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fileSize",
            "required": false,
            "description": "Exact file size in bytes.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "fileSize:gt",
            "required": false,
            "description": "File size greater than the specified value.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "fileSize:gte",
            "required": false,
            "description": "File size greater than or equal to the specified value.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "fileSize:lt",
            "required": false,
            "description": "File size less than the specified value.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "fileSize:lte",
            "required": false,
            "description": "File size less than or equal to the specified value.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "user",
            "required": false,
            "description": "User email of the folder creator.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fileType",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "List of comma-separated file types to filter search results.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "flsOnly",
            "required": false,
            "description": "If true, only includes files shared with the user.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sharedMailboxId",
            "required": false,
            "description": "Shared mailbox ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Sort by a specific field",
            "schema": {
              "type": "string",
              "enum": [
                "score",
                "name",
                "created",
                "modified"
              ]
            }
          },
          {
            "in": "query",
            "name": "orderType",
            "required": false,
            "description": "Sorting order.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "nameOnly",
            "required": false,
            "description": "If true, searches only for file/folder names.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "subject",
            "required": false,
            "description": "Email subject filter.",
            "schema": {
              "type": "string",
              "maxLength": 998
            }
          },
          {
            "in": "query",
            "name": "senderId",
            "required": false,
            "description": "Sender ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "recipientId",
            "required": false,
            "description": "Recipient ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fileName",
            "required": false,
            "description": "File name filter.",
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "in": "query",
            "name": "folderName",
            "required": false,
            "description": "Folder name filter.",
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "in": "query",
            "name": "fileContent",
            "required": false,
            "description": "Search within file content.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "spellCheck",
            "required": false,
            "description": "If true, provides spelling suggestions for the search query.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "bucket",
            "required": false,
            "description": "Search within a specific email bucket.",
            "schema": {
              "type": "string",
              "enum": [
                "inbox",
                "sent"
              ]
            }
          },
          {
            "in": "query",
            "name": "path",
            "required": false,
            "description": "Search within a specific folder path.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_PROFILE_COLLABORATION_DISABLED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_PROFILE_COLLABORATION_DISABLED": {
                    "summary": "User's profile has no collaboration access",
                    "description": "User's profile has no collaboration access",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_PROFILE_COLLABORATION_DISABLED",
                          "message": "User's profile has no collaboration access"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/accessVerifications/{id}/approval/{requirement_id}": {
      "get": {
        "summary": "Get access verification",
        "description": "Get access verification",
        "tags": [
          "accessVerifications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Access Verification ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "requirement_id",
            "required": true,
            "description": "Requirement ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return access verification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessVerification"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "patch": {
        "summary": "Submit approval decision for approval flow",
        "description": "Submit approval decision for approval flow",
        "tags": [
          "accessVerifications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Access Verification ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "requirement_id",
            "required": true,
            "description": "Requirement ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessVerificationApprovalPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_ACCESS_VERIFICATION_RESPONSE, ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_ACCESS_VERIFICATION_RESPONSE": {
                    "summary": "Access verification response is invalid",
                    "description": "Access verification response is invalid",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_ACCESS_VERIFICATION_RESPONSE",
                          "message": "Access verification response is invalid"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/accessVerifications/{id}": {
      "get": {
        "summary": "Get access verification",
        "description": "Get access verification",
        "tags": [
          "accessVerifications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return access verification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessVerification"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "post": {
        "summary": "Submit access verification",
        "description": "Submit access verification",
        "tags": [
          "accessVerifications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessVerificationPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return download link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadLink"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_ACCESS_VERIFICATION_RESPONSE, ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_ACCESS_VERIFICATION_RESPONSE": {
                    "summary": "Access verification response is invalid",
                    "description": "Access verification response is invalid",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_ACCESS_VERIFICATION_RESPONSE",
                          "message": "Access verification response is invalid"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/accessVerifications/requirement/{id}": {
      "post": {
        "summary": "Submit access verification requirement",
        "description": "Submit access verification requirement",
        "tags": [
          "accessVerifications"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessVerificationRequirementPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns access verifications that are verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifiedAccessVerificationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_ACCESS_VERIFICATION_RESPONSE, ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_ACCESS_VERIFICATION_RESPONSE": {
                    "summary": "Access verification response is invalid",
                    "description": "Access verification response is invalid",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_ACCESS_VERIFICATION_RESPONSE",
                          "message": "Access verification response is invalid"
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/scim/users": {
      "get": {
        "summary": "Retrieve users",
        "description": "Retrieve users",
        "tags": [
          "scim"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "attributes",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "meta",
                  "userName",
                  "displayName",
                  "userType",
                  "preferredLanguage",
                  "active",
                  "emails",
                  "phoneNumbers",
                  "photos",
                  "roles",
                  "meta.resourceType",
                  "meta.created",
                  "meta.location",
                  "urn:ietf:params:scim:schemas:core:2.0:User:id",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                  "urn:ietf:params:scim:schemas:core:2.0:User:active",
                  "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                  "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                  "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                  "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "meta",
                  "userName",
                  "displayName",
                  "userType",
                  "preferredLanguage",
                  "active",
                  "emails",
                  "phoneNumbers",
                  "photos",
                  "roles",
                  "meta.resourceType",
                  "meta.created",
                  "meta.location",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                  "urn:ietf:params:scim:schemas:core:2.0:User:active",
                  "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                  "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                  "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                  "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "meta.created",
                "meta.location",
                "userName",
                "displayName",
                "userType",
                "preferredLanguage",
                "emails",
                "emails.value",
                "phoneNumbers",
                "phoneNumbers.value",
                "roles",
                "roles.value",
                "active",
                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location",
                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                "urn:ietf:params:scim:schemas:core:2.0:User:emails.value",
                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers.value",
                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                "urn:ietf:params:scim:schemas:core:2.0:User:roles.value",
                "urn:ietf:params:scim:schemas:core:2.0:User:active"
              ]
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ascending",
                "descending"
              ]
            }
          },
          {
            "in": "query",
            "name": "startIndex",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 1000000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUsers"
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "post": {
        "summary": "Create single user",
        "description": "Create single user",
        "tags": [
          "scim"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "attributes",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "meta",
                  "userName",
                  "displayName",
                  "userType",
                  "preferredLanguage",
                  "active",
                  "emails",
                  "phoneNumbers",
                  "photos",
                  "roles",
                  "meta.resourceType",
                  "meta.created",
                  "meta.location",
                  "urn:ietf:params:scim:schemas:core:2.0:User:id",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                  "urn:ietf:params:scim:schemas:core:2.0:User:active",
                  "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                  "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                  "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                  "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "meta",
                  "userName",
                  "displayName",
                  "userType",
                  "preferredLanguage",
                  "active",
                  "emails",
                  "phoneNumbers",
                  "photos",
                  "roles",
                  "meta.resourceType",
                  "meta.created",
                  "meta.location",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                  "urn:ietf:params:scim:schemas:core:2.0:User:active",
                  "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                  "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                  "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                  "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScimUsersPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user is created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUser"
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "409": {
            "description": "CONFLICT"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/scim/Users": {
      "get": {
        "summary": "Retrieve users",
        "description": "Retrieve users",
        "tags": [
          "scim"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "attributes",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "meta",
                  "userName",
                  "displayName",
                  "userType",
                  "preferredLanguage",
                  "active",
                  "emails",
                  "phoneNumbers",
                  "photos",
                  "roles",
                  "meta.resourceType",
                  "meta.created",
                  "meta.location",
                  "urn:ietf:params:scim:schemas:core:2.0:User:id",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                  "urn:ietf:params:scim:schemas:core:2.0:User:active",
                  "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                  "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                  "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                  "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "meta",
                  "userName",
                  "displayName",
                  "userType",
                  "preferredLanguage",
                  "active",
                  "emails",
                  "phoneNumbers",
                  "photos",
                  "roles",
                  "meta.resourceType",
                  "meta.created",
                  "meta.location",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                  "urn:ietf:params:scim:schemas:core:2.0:User:active",
                  "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                  "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                  "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                  "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "meta.created",
                "meta.location",
                "userName",
                "displayName",
                "userType",
                "preferredLanguage",
                "emails",
                "emails.value",
                "phoneNumbers",
                "phoneNumbers.value",
                "roles",
                "roles.value",
                "active",
                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location",
                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                "urn:ietf:params:scim:schemas:core:2.0:User:emails.value",
                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers.value",
                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                "urn:ietf:params:scim:schemas:core:2.0:User:roles.value",
                "urn:ietf:params:scim:schemas:core:2.0:User:active"
              ]
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ascending",
                "descending"
              ]
            }
          },
          {
            "in": "query",
            "name": "startIndex",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 1000000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUsers"
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "post": {
        "summary": "Create single user",
        "description": "Create single user",
        "tags": [
          "scim"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "attributes",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "meta",
                  "userName",
                  "displayName",
                  "userType",
                  "preferredLanguage",
                  "active",
                  "emails",
                  "phoneNumbers",
                  "photos",
                  "roles",
                  "meta.resourceType",
                  "meta.created",
                  "meta.location",
                  "urn:ietf:params:scim:schemas:core:2.0:User:id",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                  "urn:ietf:params:scim:schemas:core:2.0:User:active",
                  "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                  "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                  "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                  "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "meta",
                  "userName",
                  "displayName",
                  "userType",
                  "preferredLanguage",
                  "active",
                  "emails",
                  "phoneNumbers",
                  "photos",
                  "roles",
                  "meta.resourceType",
                  "meta.created",
                  "meta.location",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                  "urn:ietf:params:scim:schemas:core:2.0:User:active",
                  "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                  "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                  "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                  "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScimUsersPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user is created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUser"
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "409": {
            "description": "CONFLICT"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/scim/users/{id}": {
      "delete": {
        "summary": "Delete single user",
        "description": "Delete single user",
        "tags": [
          "scim"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "remoteWipe",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "deleteUnsharedData",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "retainData",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "retainPermissionToSharedData",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "retainToUser",
            "required": false,
            "schema": {
              "type": "string",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is deleted"
          },
          "400": {
            "description": "BAD REQUEST"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "get": {
        "summary": "Get a user specified by the id",
        "description": "Get a user specified by the id",
        "tags": [
          "scim"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "attributes",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "meta",
                  "userName",
                  "displayName",
                  "userType",
                  "preferredLanguage",
                  "active",
                  "emails",
                  "phoneNumbers",
                  "photos",
                  "roles",
                  "meta.resourceType",
                  "meta.created",
                  "meta.location",
                  "urn:ietf:params:scim:schemas:core:2.0:User:id",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                  "urn:ietf:params:scim:schemas:core:2.0:User:active",
                  "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                  "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                  "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                  "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "meta",
                  "userName",
                  "displayName",
                  "userType",
                  "preferredLanguage",
                  "active",
                  "emails",
                  "phoneNumbers",
                  "photos",
                  "roles",
                  "meta.resourceType",
                  "meta.created",
                  "meta.location",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                  "urn:ietf:params:scim:schemas:core:2.0:User:active",
                  "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                  "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                  "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                  "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUser"
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "put": {
        "description": "Update a user specified by the id",
        "tags": [
          "scim"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScimUsersPutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUser"
                }
              }
            }
          },
          "401": {
            "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
          },
          "404": {
            "description": "ERR_ENTITY_NOT_FOUND"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/scim/Users/{id}": {
      "delete": {
        "summary": "Delete single user",
        "description": "Delete single user",
        "tags": [
          "scim"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "remoteWipe",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "deleteUnsharedData",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "retainData",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "retainPermissionToSharedData",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "retainToUser",
            "required": false,
            "schema": {
              "type": "string",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is deleted"
          },
          "400": {
            "description": "BAD REQUEST"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "get": {
        "summary": "Get a user specified by the id",
        "description": "Get a user specified by the id",
        "tags": [
          "scim"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "attributes",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "meta",
                  "userName",
                  "displayName",
                  "userType",
                  "preferredLanguage",
                  "active",
                  "emails",
                  "phoneNumbers",
                  "photos",
                  "roles",
                  "meta.resourceType",
                  "meta.created",
                  "meta.location",
                  "urn:ietf:params:scim:schemas:core:2.0:User:id",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                  "urn:ietf:params:scim:schemas:core:2.0:User:active",
                  "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                  "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                  "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                  "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "meta",
                  "userName",
                  "displayName",
                  "userType",
                  "preferredLanguage",
                  "active",
                  "emails",
                  "phoneNumbers",
                  "photos",
                  "roles",
                  "meta.resourceType",
                  "meta.created",
                  "meta.location",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                  "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                  "urn:ietf:params:scim:schemas:core:2.0:User:active",
                  "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                  "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                  "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                  "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                  "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUser"
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      },
      "put": {
        "description": "Update a user specified by the id",
        "tags": [
          "scim"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScimUsersPutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScimUser"
                }
              }
            }
          },
          "401": {
            "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
          },
          "404": {
            "description": "ERR_ENTITY_NOT_FOUND"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/scim/ServiceProviderConfig": {
      "get": {
        "summary": "Get SCIM service provider config",
        "description": "Get SCIM service provider config",
        "tags": [
          "scim"
        ],
        "responses": {
          "200": {
            "description": "The service provider config is returned"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/scim/Schemas": {
      "get": {
        "description": "Get SCIM schemas",
        "tags": [
          "scim"
        ],
        "responses": {
          "200": {
            "description": "The supported SCIM schemas are returned"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/scim/Schemas/{id}": {
      "get": {
        "description": "Get a SCIM schema",
        "tags": [
          "scim"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID/URN of the schema",
            "schema": {
              "type": "string",
              "enum": [
                "User",
                "urn:ietf:params:scim:schemas:core:2.0:User"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested SCIM schemas is returned if exists"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/scim/ResourceTypes": {
      "get": {
        "description": "Get SCIM resource types",
        "tags": [
          "scim"
        ],
        "responses": {
          "200": {
            "description": "The supported SCIM resource types are returned"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/scim/ResourceTypes/{id}": {
      "get": {
        "description": "Get a SCIM resource type",
        "tags": [
          "scim"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID/URN of the schema",
            "schema": {
              "type": "string",
              "enum": [
                "User",
                "urn:ietf:params:scim:schemas:core:2.0:User"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested SCIM resource type is returned if exists"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/activities": {
      "get": {
        "summary": "Get admin activities list",
        "description": "### Overview:\n  Retrieves the list of admin activities.\n### Precondition:\n  The user must be an administrator with access to `Activity Log`.\n### Response:\n  Returns the list of activities performed by the admin.\n### Sorting:\n  Sort string syntax `FIELD_NAME:ORDER`.\n\n  ORDER can be `asc` or `desc`.\n### Sorting options:\n  | FIELD_NAME | Description |\n  |------------|-------------|\n  | created    | The creation date and time of the activity |\n  | client     | The client name |\n  | username   | The username associated with the activity |\n  | ip_address | The client IP address |\n",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDateTime",
            "required": true,
            "description": "The start date and time for the activity range",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endDateTime",
            "required": true,
            "description": "The end date and time for the activity range",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "eventFilters:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "List of comma-seperated event filters to filter the activities",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "objectIds:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "List of comma-seperated object IDs to filter the activities",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "description": "User ID to filter activities by a specific user",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxPages",
            "required": false,
            "description": "Maximum number of pages to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": -1
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Order activities by specified field",
            "schema": {
              "type": "string",
              "enum": [
                "created:asc",
                "created:desc",
                "client:asc",
                "client:desc",
                "username:asc",
                "username:desc",
                "ip_address:asc",
                "ip_address:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "compact",
            "required": false,
            "description": "If true, returns a more compact response",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 10000
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The admin activities list is successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/activities/{id}": {
      "get": {
        "summary": "Get admin activity detail",
        "description": "### Overview:\n  Retrieve detailed information about a specific activity.\n### Precondition:\n  The user must be an administrator with access to `Activity Log`.\n### Response:\n  Returns the full details of the specified activity.\n",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier (UUID) of the entity.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the activity details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/rest/admin/activities/actions/exportCSV": {
      "get": {
        "summary": "Export admin activities list",
        "description": "### Overview:\n  Export the list of admin activities based on the provided filters.\n### Precondition:\n  The user must be an administrator with access to `Activity Log`.\n### Response:\n  The admin activities list is generated and sent via email to the requesting user.\n### Sorting:\n  Sort string syntax `FIELD_NAME:ORDER`.\n\n  ORDER can be `asc` or `desc`.\n### Sorting options:\n  | FIELD_NAME | Description |\n  |------------|-------------|\n  | created    | The creation date and time of the activity |\n  | client     | The client name |\n  | username   | The username associated with the activity |\n  | ip_address | The client IP address |\n",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDateTime",
            "required": true,
            "description": "The start date and time for the activity range",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endDateTime",
            "required": true,
            "description": "The end date and time for the activity range",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "eventFilters:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "List of comma-seperated event filters to filter the activities",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "objectIds:in",
            "required": false,
            "explode": true,
            "style": "form",
            "description": "List of comma-seperated object IDs to filter the activities",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "description": "User ID to filter activities by a specific user",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxPages",
            "required": false,
            "description": "Maximum number of pages to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": -1
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "description": "Order activities by specified field",
            "schema": {
              "type": "string",
              "enum": [
                "created:asc",
                "created:desc",
                "client:asc",
                "client:desc",
                "username:asc",
                "username:desc",
                "ip_address:asc",
                "ip_address:desc"
              ]
            }
          },
          {
            "in": "query",
            "name": "compact",
            "required": false,
            "description": "If true, returns a more compact response",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Range limit",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 10000
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Range offset",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The admin activities list is being processed and will be sent via email."
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INVALID_PARAMETER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    },
    "/{host_name}/rest/uploads/{id}": {
      "post": {
        "summary": "Uploads a file chunk via the provided upload link",
        "description": "### Description:\n  This endpoint allows for the upload of a chunk of a file to the server. The file is uploaded in multiple chunks, which are processed individually.\n### Precondition:\n  * The user must have access to a valid upload link.\n  * The client must divide the file into chunks before uploading, especially if the file is large.\n  * Chunks must be uploaded sequentially, starting from index 1. Each chunk must be uploaded in the correct order to ensure proper reconstruction of the file.\n### Response:\n  The file upload is completed and registered on the server after all chunks have been successfully uploaded.\n",
        "tags": [
          "uploads"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "host_name",
            "required": true,
            "description": "The upload host name, which can be retrieved from GET /uploads/{id} or the initiateUpload response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique identifier of the upload.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "returnEntity",
            "required": false,
            "description": "If true, includes the entity in the response body.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "with",
            "required": false,
            "description": "Specifies additional fields to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "description": "Determines the detail level of the response body.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "full_no_links",
                "full_with_links",
                "full"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "compressionMode": {
                    "type": "string",
                    "description": "The compression mode used for the chunk. Options include \"NORMAL\", \"GZIP\", and \"ZLIB\".",
                    "enum": [
                      "NORMAL",
                      "GZIP",
                      "ZLIB"
                    ]
                  },
                  "compressionSize": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The size of the chunk after compression."
                  },
                  "originalSize": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The size of the chunk before compression."
                  },
                  "content": {
                    "type": "string",
                    "format": "binary",
                    "description": "The binary content of the chunk."
                  },
                  "index": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The sequential index of the chunk (starts from 1)."
                  },
                  "lastChunk": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Indicates if this is the last chunk of the file (1 if last, 0 otherwise)."
                  }
                },
                "required": [
                  "compressionMode",
                  "compressionSize",
                  "originalSize",
                  "content"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseChunkUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The current chunk upload is successfully received but not yet registered to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            }
          },
          "201": {
            "description": "File uploaded successfully and is registered to the server after the last chunk is received.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br /><br /><i>Possible error codes: </i>ERR_REQUEST_INVALID_JSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_REQUEST_INVALID_JSON": {
                    "summary": "Invalid json provided",
                    "description": "Invalid json provided",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_REQUEST_INVALID_JSON",
                          "message": "Invalid json provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br /><br /><i>Possible error codes: </i>ERR_AUTH_INVALID_CSRF, ERR_AUTH_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_AUTH_INVALID_CSRF": {
                    "summary": "Invalid CSRF Authentication",
                    "description": "Invalid CSRF Authentication",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_INVALID_CSRF",
                          "message": "Invalid CSRF Authentication"
                        }
                      ]
                    }
                  },
                  "ERR_AUTH_UNAUTHORIZED": {
                    "summary": "Unauthorized",
                    "description": "Unauthorized",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_AUTH_UNAUTHORIZED",
                          "message": "Unauthorized"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br /><br /><i>Possible error codes: </i>ERR_ACCESS_USER, ERR_ENTITY_DLP_LOCKED, ERR_ENTITY_IS_BASE_DIR, ERR_ENTITY_NOT_SCANNED, ERR_ENTITY_REQUEST_FILE_UPLOAD_LIMIT_REACHED, ERR_ENTITY_RESTRICTED_TYPE, ERR_ENTITY_VIRUS_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_ACCESS_USER": {
                    "summary": "Insufficient access permissions",
                    "description": "Insufficient access permissions",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ACCESS_USER",
                          "message": "Insufficient access permissions"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_DLP_LOCKED": {
                    "summary": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "description": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_DLP_LOCKED",
                          "message": "One or more files have been quarantined and are not available to download. Please contact your administrator for assistance."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_IS_BASE_DIR": {
                    "summary": "Operation not permitted on Base Folder",
                    "description": "Operation not permitted on Base Folder",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_IS_BASE_DIR",
                          "message": "Operation not permitted on Base Folder"
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_NOT_SCANNED": {
                    "summary": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "description": "One or more files are undergoing security and privacy scans. Please try again later.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_NOT_SCANNED",
                          "message": "One or more files are undergoing security and privacy scans. Please try again later."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_REQUEST_FILE_UPLOAD_LIMIT_REACHED": {
                    "summary": "Upload limit has reached.",
                    "description": "Upload limit has reached.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_REQUEST_FILE_UPLOAD_LIMIT_REACHED",
                          "message": "Upload limit has reached."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_RESTRICTED_TYPE": {
                    "summary": "The specified entity mime type is not allowed.",
                    "description": "The specified entity mime type is not allowed.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_RESTRICTED_TYPE",
                          "message": "The specified entity mime type is not allowed."
                        }
                      ]
                    }
                  },
                  "ERR_ENTITY_VIRUS_FOUND": {
                    "summary": "File is infected",
                    "description": "File is infected",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_ENTITY_VIRUS_FOUND",
                          "message": "File is infected"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity<br /><br /><i>Possible error codes: </i>ERR_INPUT_NOT_IN_LIST, ERR_INVALID_PARAMETER, ERR_LICENSE_MAX_UPLOAD_SIZE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "ERR_INPUT_NOT_IN_LIST": {
                    "summary": "The specified input is not allowed.",
                    "description": "The specified input is not allowed.",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INPUT_NOT_IN_LIST",
                          "message": "The specified input is not allowed."
                        }
                      ]
                    }
                  },
                  "ERR_INVALID_PARAMETER": {
                    "summary": "Invalid Parameter Exception",
                    "description": "Invalid Parameter Exception",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_INVALID_PARAMETER",
                          "message": "Invalid Parameter Exception"
                        }
                      ]
                    }
                  },
                  "ERR_LICENSE_MAX_UPLOAD_SIZE": {
                    "summary": "Upload size exceed licensed maximum upload size",
                    "description": "Upload size exceed licensed maximum upload size",
                    "value": {
                      "errors": [
                        {
                          "code": "ERR_LICENSE_MAX_UPLOAD_SIZE",
                          "message": "Upload size exceed licensed maximum upload size"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "490": {
            "description": "Request blocked by WAF"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "FileNameRequest.Post": {
        "properties": {
          "fileType": {
            "description": "The file type",
            "type": "string"
          },
          "fileName": {
            "description": "The file name",
            "type": "string"
          }
        }
      },
      "FileNameRequest.Put": {
        "properties": {
          "fileType": {
            "description": "The file type",
            "type": "string"
          },
          "fileName": {
            "description": "The file name",
            "type": "string"
          }
        }
      },
      "EventLink": {
        "description": "Class EventLink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "EventLink.Post": {
        "description": "Class EventLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "EventLink.Put": {
        "description": "Class EventLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "RequestFileUpload": {
        "description": "Class RequestFileUpload",
        "properties": {
          "fileId": {
            "description": "The file id for this upload file",
            "type": "string"
          },
          "requestFileId": {
            "description": "The request file id for this upload file",
            "type": "integer"
          }
        }
      },
      "TaskLink": {
        "description": "Class TaskLink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "TaskLink.Post": {
        "description": "Class TaskLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "TaskLink.Put": {
        "description": "Class TaskLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "FileType": {
        "description": "Class FileType",
        "required": [
          "extension",
          "groupName",
          "id",
          "mediaTypes"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of File Type",
            "type": "integer"
          },
          "mediaTypes": {
            "description": "List of associated media types",
            "type": "integer"
          },
          "extension": {
            "description": "Extension",
            "type": "string"
          },
          "groupName": {
            "description": "Group Name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "CloudSourceLogin.Post": {
        "description": "Class CloudSourceLogin",
        "required": [
          "code",
          "state"
        ],
        "properties": {
          "client": {
            "description": "ID of the client, from redirect url",
            "type": "string"
          },
          "code": {
            "description": "Code from redirect url",
            "type": "string"
          },
          "state": {
            "description": "State code",
            "type": "string"
          },
          "sessionState": {
            "description": "Optional field needed for sharepoint online and onedrive",
            "type": "string"
          }
        }
      },
      "CloudSourceLogin.Put": {
        "description": "Class CloudSourceLogin",
        "required": [
          "code",
          "state"
        ],
        "properties": {
          "client": {
            "description": "ID of the client, from redirect url",
            "type": "string"
          },
          "code": {
            "description": "Code from redirect url",
            "type": "string"
          },
          "state": {
            "description": "State code",
            "type": "string"
          },
          "sessionState": {
            "description": "Optional field needed for sharepoint online and onedrive",
            "type": "string"
          }
        }
      },
      "MobileSync": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "avStatus": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "description": "Mobile sync item creation date"
          },
          "fingerprints": {
            "type": "array",
            "description": "List of all file fingerprints",
            "items": {
              "$ref": "#/components/schemas/Fingerprint"
            }
          },
          "fileId": {
            "type": "string"
          },
          "pushUserId": {
            "type": "string"
          },
          "toBeNotified": {
            "type": "boolean",
            "description": "Indicates that Email notification for this item was sent"
          },
          "fingerprint": {
            "type": "string",
            "description": "MD5 file fingerprint"
          },
          "syncedObject": {
            "$ref": "#/components/schemas/SyncedObject"
          },
          "pushUser": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "pushedObject": {
            "$ref": "#/components/schemas/PushedObject"
          },
          "dlpStatus": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of MobileSync"
          },
          "secure": {
            "type": "boolean",
            "description": "Indicates that File is in secure Folder"
          },
          "file": {
            "$ref": "#/components/schemas/File"
          }
        }
      },
      "MobileSync.Post": {
        "description": "Class MobileSync",
        "required": [
          "fileId"
        ],
        "properties": {
          "fileId": {
            "description": "Unique identifier of File",
            "type": "integer"
          }
        }
      },
      "MobileSync.Put": {
        "description": "Class MobileSync",
        "required": [
          "fileId"
        ],
        "properties": {
          "fileId": {
            "description": "Unique identifier of File",
            "type": "integer"
          }
        }
      },
      "CopyEcItemJob": {
        "properties": {
          "id": {
            "description": "Job identifier",
            "type": "string"
          },
          "status": {
            "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
            "type": "string"
          },
          "errors": {
            "description": "The list of errors occurred during job processing",
            "type": "string"
          },
          "objectIds": {
            "type": "string"
          }
        }
      },
      "BaseFolder": {
        "required": [
          "id",
          "name",
          "parentId",
          "userId"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "BaseFolder.Post": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Folder name",
            "type": "string"
          }
        }
      },
      "BaseFolder.Put": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Folder name",
            "type": "string"
          }
        }
      },
      "Notification": {
        "description": "Class Notification",
        "required": [
          "userId"
        ],
        "properties": {
          "userId": {
            "description": "ID of user who will send email notifications to end users",
            "type": "string"
          },
          "objectId": {
            "description": "Id of folder included in Notification",
            "type": "integer"
          },
          "fileAdded": {
            "description": "Number of files which are added to the Notification",
            "type": "integer"
          },
          "commentAdded": {
            "description": "Number of comments which are added to the Notification",
            "type": "integer"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Notification.Post": {
        "description": "Class Notification",
        "properties": {
          "fileAdded": {
            "description": "Number of files which are added to the Notification",
            "type": "integer"
          },
          "commentAdded": {
            "description": "Number of comments which are added to the Notification",
            "type": "integer"
          }
        }
      },
      "Notification.Put": {
        "description": "Class Notification",
        "properties": {
          "fileAdded": {
            "description": "Number of files which are added to the Notification",
            "type": "integer"
          },
          "commentAdded": {
            "description": "Number of comments which are added to the Notification",
            "type": "integer"
          }
        }
      },
      "Email": {
        "description": "Class Email",
        "required": [
          "date",
          "emailPackageId",
          "id",
          "modifiedDate",
          "parentEmailId",
          "recipients",
          "senderId",
          "status",
          "subject",
          "type"
        ],
        "properties": {
          "id": {
            "description": "Email unique identifier",
            "type": "string"
          },
          "senderId": {
            "description": "Unique identifier of User who sent Email",
            "type": "string"
          },
          "templateId": {
            "description": "Email template unique identifier",
            "type": "integer"
          },
          "status": {
            "description": "Email status",
            "type": "string"
          },
          "type": {
            "description": "Email type",
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "deleted": {
            "description": "Indicates that Email is deleted",
            "type": "boolean"
          },
          "emailPackageId": {
            "description": "Email Package unique identifier",
            "type": "string"
          },
          "isPreview": {
            "description": "Indicates that email is a preview email",
            "type": "boolean"
          },
          "isUserSent": {
            "description": "Indicates that email was sent by some user",
            "type": "boolean"
          },
          "watermark": {
            "description": "The watermark on the preview email",
            "type": "string"
          },
          "package": {
            "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Package"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "attachmentCount": {
            "type": "boolean"
          },
          "sender": {
            "description": "Sender's basic information (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Recipient"
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secureBody": {
            "type": "boolean"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date"
          },
          "parentEmailId": {
            "description": "Identifier of parent email",
            "type": "string"
          },
          "emailReturnReceipt": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailReturnReceipt"
            }
          },
          "error": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "body": {
            "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "rawBody": {
            "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "headline": {
            "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "notice": {
            "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "htmlBody": {
            "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "fullHtmlBody": {
            "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "emailFrom": {
            "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "isRead": {
            "type": "boolean"
          },
          "bucket": {
            "type": "boolean"
          },
          "templateBody": {
            "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "webFormId": {
            "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "webFormFields": {
            "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Email.Post": {
        "description": "Class Email",
        "required": [
          "templateId",
          "status"
        ],
        "properties": {
          "senderId": {
            "description": "Unique identifier of User who sent Email",
            "type": "integer"
          },
          "templateId": {
            "description": "Email template unique identifier",
            "type": "integer"
          },
          "status": {
            "description": "Email status",
            "type": "string",
            "enum": [
              "queued",
              "draft",
              "sent",
              "error"
            ]
          },
          "emailPackageId": {
            "description": "Email Package unique identifier",
            "type": "integer"
          },
          "secureBody": {
            "type": "boolean"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date"
          },
          "parentEmailId": {
            "description": "The identifier of forwarded email",
            "type": "integer"
          }
        }
      },
      "Email.Put": {
        "description": "Class Email",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "description": "Email status",
            "type": "string",
            "enum": [
              "queued",
              "draft",
              "sent",
              "error"
            ]
          },
          "emailPackageId": {
            "description": "Email Package unique identifier",
            "type": "integer"
          },
          "secureBody": {
            "type": "boolean"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date"
          },
          "parentEmailId": {
            "description": "The identifier of forwarded email",
            "type": "integer"
          }
        }
      },
      "LdapGroup": {
        "description": "Class LdapGroup",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "description": "LDAP group id",
            "type": "integer"
          },
          "name": {
            "description": "LDAP group name",
            "type": "string"
          },
          "email": {
            "description": "LDAP group Email",
            "type": "string"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "LdapGroup.Post": {
        "description": "Class LdapGroup",
        "required": [
          "dn"
        ],
        "properties": {
          "dn": {
            "description": "Domain name",
            "type": "string"
          },
          "email": {
            "description": "LDAP group Email",
            "type": "string"
          },
          "description": {
            "description": "Description",
            "type": "string"
          }
        }
      },
      "LdapGroup.Put": {
        "description": "Class LdapGroup",
        "properties": {
          "email": {
            "description": "LDAP group Email",
            "type": "string"
          },
          "description": {
            "description": "Description",
            "type": "string"
          }
        }
      },
      "RequestFileSource": {
        "description": "Class RequestFileSource",
        "properties": {
          "fileId": {
            "description": "The file id for this source file",
            "type": "integer"
          },
          "requestFileId": {
            "description": "The request file id for this source file",
            "type": "integer"
          },
          "actionId": {
            "description": "The available permissions on the source file for uploader",
            "type": "integer"
          },
          "permissions": {
            "description": "Request file permission",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestFilePermission"
            }
          }
        }
      },
      "ContactBase": {
        "description": "Class ContactBase",
        "required": [
          "id",
          "name",
          "userId"
        ],
        "properties": {
          "id": {
            "description": "Contact unique identifier",
            "type": "integer"
          },
          "userId": {
            "description": "Contact owner unique identifier",
            "type": "string"
          },
          "name": {
            "description": "Contact name",
            "type": "string"
          },
          "modified": {
            "description": "Contact modification date",
            "type": "string",
            "format": "date"
          },
          "created": {
            "description": "Contact creation date",
            "type": "string",
            "format": "date"
          },
          "items": {
            "description": "List of emails contained by Contact",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactItem"
            }
          },
          "links": {
            "type": "string"
          }
        }
      },
      "ContactBase.Post": {
        "description": "Class ContactBase",
        "required": [
          "name",
          "items"
        ],
        "properties": {
          "name": {
            "description": "Contact name",
            "type": "string"
          },
          "items": {
            "description": "List of emails contained by Contact",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactItem.Post"
            }
          }
        }
      },
      "ContactBase.Put": {
        "description": "Class ContactBase",
        "required": [
          "name",
          "items"
        ],
        "properties": {
          "name": {
            "description": "Contact name",
            "type": "string"
          },
          "items": {
            "description": "List of emails contained by Contact",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactItem.Post"
            }
          }
        }
      },
      "RiskPolicyReportFile": {
        "description": "Class RiskPolicyReportFile",
        "required": [
          "id",
          "locked",
          "name",
          "parentId",
          "size",
          "type",
          "userId",
          "wopiapp"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "mime": {
            "description": "File MIME type",
            "type": "string"
          },
          "size": {
            "description": "File content size",
            "type": "string"
          },
          "fingerprint": {
            "description": "File content fingerprint",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "locked": {
            "description": "Unique identifier of User who locked a File",
            "type": "integer"
          },
          "lockUser": {
            "description": "User who locked the File (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "clientCreated": {
            "description": "Original created time of the file",
            "type": "string",
            "format": "date"
          },
          "clientModified": {
            "description": "Original Modified time of the file",
            "type": "string",
            "format": "date"
          },
          "members": {
            "description": "File members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "overriddenExpire": {
            "description": "Indicates that file expire is overridden",
            "type": "boolean"
          },
          "originalFileId": {
            "description": "File identifier from which this file was copied from",
            "type": "string"
          },
          "pushedObject": {
            "description": "Contains pushedObject data if current file was ever pushed (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/PushedObject"
          },
          "avStatus": {
            "description": "Check file availability status according to AV settings and file scanned/infected status",
            "type": "string"
          },
          "dlpStatus": {
            "description": "Check file availability status according to DLP settings and file scanned/infected status",
            "type": "string"
          },
          "adminQuarantineStatus": {
            "description": "Check file availability status according to admin quarantined status",
            "type": "string"
          },
          "storageAvailable": {
            "description": "Boolean value that shows if this file is available on any volume",
            "type": "boolean"
          },
          "lastModifiedBy": {
            "description": "Creator of the latest version (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "wopiapp": {
            "description": "WOPI info for iOS app",
            "type": "boolean"
          },
          "roleId": {
            "description": "Highest role",
            "type": "string"
          },
          "isShared": {
            "description": "File shared",
            "type": "string"
          },
          "fingerprints": {
            "description": "Array of file fingerprint objects",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "description": "Array of tag objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "RiskPolicyReportFile.Post": {
        "description": "Class RiskPolicyReportFile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          }
        }
      },
      "RiskPolicyReportFile.Put": {
        "description": "Class RiskPolicyReportFile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          },
          "expire": {
            "description": "The file expiration date.",
            "type": "string"
          },
          "replace": {
            "description": "Replace the file if file with same name exists",
            "type": "string"
          }
        }
      },
      "ECObject": {
        "description": "Class ECObject",
        "required": [
          "id",
          "parentId",
          "path",
          "sourceId"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier",
            "type": "string"
          },
          "parentId": {
            "description": "Unique identifier of parent for this Repositories Gateway Object",
            "type": "string"
          },
          "sourceId": {
            "description": "Source Id",
            "type": "string"
          },
          "path": {
            "description": "File path",
            "type": "string"
          },
          "ecSource": {
            "description": "Repositories Gateway Source (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "sourceTypeId": {
            "description": "Unique Identifier of the SourceType",
            "type": "string"
          }
        }
      },
      "EmailReturnReceipt": {
        "description": "Class Recipient",
        "required": [
          "userId"
        ],
        "properties": {
          "user": {
            "description": "User entity",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "userId": {
            "description": "User ID for Return Receipt",
            "type": "string"
          }
        }
      },
      "EmailReturnReceipt.Post": {
        "description": "Class Recipient",
        "required": [
          "userId"
        ],
        "properties": {
          "userId": {
            "description": "User ID for Return Receipt",
            "type": "integer"
          }
        }
      },
      "EmailReturnReceipt.Put": {
        "description": "Class Recipient",
        "required": [
          "userId"
        ],
        "properties": {
          "userId": {
            "description": "User ID for Return Receipt",
            "type": "integer"
          }
        }
      },
      "Kitepoint": {
        "description": "Class Kitepoint",
        "required": [
          "id",
          "name",
          "parentId",
          "size",
          "userId"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "mime": {
            "description": "File MIME type",
            "type": "string"
          },
          "size": {
            "description": "File content size",
            "type": "string"
          },
          "fingerprint": {
            "description": "File content fingerprint",
            "type": "string"
          },
          "eCObject": {
            "description": "Unique identifier of kitepoint file",
            "type": "string"
          },
          "type": {
            "description": "Object type. Type k is kitepoint file in tray",
            "type": "string"
          },
          "eCUUID": {
            "description": "ECUuId",
            "type": "string"
          }
        }
      },
      "Comment": {
        "description": "Class Comment",
        "required": [
          "contents",
          "id",
          "objectId",
          "parentId",
          "userId"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier for the comment.",
            "type": "integer"
          },
          "parentId": {
            "description": "The unique identifier of the parent comment, if the comment is a reply.",
            "type": "integer"
          },
          "objectId": {
            "description": "The unique identifier (UUID) of the file being commented on.",
            "type": "string"
          },
          "folderId": {
            "description": "The unique identifier (UUID) of the folder containing the object being commented on.",
            "type": "string"
          },
          "userId": {
            "description": "The unique identifier (UUID) of the user who authored the comment.",
            "type": "string"
          },
          "created": {
            "description": "The date and time when the comment was created.",
            "type": "string",
            "format": "date"
          },
          "modified": {
            "description": "The datetime when the comment was last modified.",
            "type": "string",
            "format": "date"
          },
          "contents": {
            "description": "The text content of the comment.",
            "type": "string"
          },
          "deleted": {
            "description": "Indicates whether the comment has been deleted.",
            "type": "boolean"
          },
          "isComment": {
            "description": "A flag indicating whether the item is a comment.",
            "type": "boolean"
          },
          "object": {
            "description": "The file being commented on. (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/BaseObject"
          },
          "author": {
            "description": "The author of the comment. (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "parent": {
            "description": "The parent comment. (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Comment"
          },
          "permissions": {
            "description": "Permissions of the current user regarding the comment. (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Comment.Post": {
        "description": "Class Comment",
        "required": [
          "contents"
        ],
        "properties": {
          "parentId": {
            "description": "The unique identifier of the parent comment. Set this value when replying to an existing comment.",
            "type": "integer"
          },
          "contents": {
            "description": "The text content of the comment.",
            "type": "string"
          }
        }
      },
      "Comment.Put": {
        "description": "Class Comment",
        "required": [
          "contents"
        ],
        "properties": {
          "contents": {
            "description": "The text content of the comment.",
            "type": "string"
          }
        }
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "withdrawn": {
            "type": "boolean",
            "description": "Indicates whether the attachment has been withdrawn."
          },
          "tags": {
            "description": "List of tags associated with the attachment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "accessType": {
            "type": "integer",
            "format": "int32",
            "description": "Access type for the attachment (e.g., read-only, editable)."
          },
          "emailPackageId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the email package containing the attachment."
          },
          "drmFile": {
            "description": "Details of the DRM-protected file associated with the attachment.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DrmFile"
              }
            ]
          },
          "permissions": {
            "type": "array",
            "description": "List of permissions associated with the attachment.",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "attachmentId": {
            "type": "string",
            "description": "Unique identifier for the attachment."
          },
          "objectId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the file associated with the attachment."
          },
          "name": {
            "type": "string",
            "description": "Name of the attachment file."
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "Size of the attachment file in bytes."
          },
          "mime": {
            "type": "string",
            "description": "The MIME type of the attachment file."
          },
          "created": {
            "type": "string",
            "description": "Date when the attachment file was created."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates if the attachment has been deleted."
          },
          "fingerprint": {
            "type": "string",
            "description": "A unique hash identifying the file version."
          },
          "fingerprintAlgo": {
            "type": "string",
            "description": "The algorithm used for generating the file version fingerprint. (e.g., sha3-256, md5)."
          },
          "fingerprints": {
            "description": "List of alternative fingerprints for the attachment file.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fingerprint"
            }
          },
          "adminQuarantineStatus": {
            "type": "string",
            "description": "Status of the attachment in the admin quarantine system."
          },
          "avStatus": {
            "type": "string",
            "description": "Antivirus (AV) scan status of the attachment."
          },
          "dlpStatus": {
            "type": "string",
            "description": "Data Loss Prevention (DLP) status of the attachment."
          }
        }
      },
      "Attachment.Put": {
        "description": "Class Attachment",
        "properties": {
          "emailPackageId": {
            "description": "Unique identifier of Email Package which contains attachment.",
            "type": "integer"
          },
          "attachmentId": {
            "type": "string"
          }
        }
      },
      "SourceContent": {
        "description": "Class SourceContent - if you need true EAPI entity use App\\Entity\\ECObject",
        "required": [
          "id",
          "name",
          "parentId",
          "type",
          "wopiapp"
        ],
        "properties": {
          "id": {
            "description": "Unique SourceContent identifier",
            "type": "string"
          },
          "name": {
            "description": "Name of source content",
            "type": "string"
          },
          "parentId": {
            "description": "Parent ID of Source",
            "type": "string"
          },
          "type": {
            "description": "Type of Object",
            "type": "string"
          },
          "created": {
            "description": "Time of Source created in UTC timestamp",
            "type": "string",
            "format": "date"
          },
          "modified": {
            "description": "Time of Source modified in UTC timestamp",
            "type": "string",
            "format": "date"
          },
          "status": {
            "description": "Status of the source",
            "type": "string"
          },
          "deleted": {
            "description": "Whether the file is deleted",
            "type": "boolean"
          },
          "path": {
            "description": "Shows object full path",
            "type": "string"
          },
          "userRoleId": {
            "description": "Current user role id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "integer"
          },
          "creator": {
            "description": "File's creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "wopiapp": {
            "description": "WOPI info for iOS app",
            "type": "boolean"
          },
          "rootId": {
            "description": "Root Id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "pathIds": {
            "description": "Path Ids (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "sourceTypeId": {
            "description": "Source Type (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "totalFilesCount": {
            "description": "Total Files Count (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "totalFoldersCount": {
            "description": "Total Folders Count (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "parent": {
            "description": "Parent Repositories Gateway folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/SourceContent"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "SourceContent.Post": {
        "description": "Class SourceContent - if you need true EAPI entity use App\\Entity\\ECObject",
        "properties": {
          "id": {
            "description": "Unique SourceContent identifier",
            "type": "string"
          }
        }
      },
      "SourceContent.Put": {
        "description": "Class SourceContent - if you need true EAPI entity use App\\Entity\\ECObject",
        "properties": {
          "id": {
            "description": "Unique SourceContent identifier",
            "type": "string"
          }
        }
      },
      "SiteConfiguration": {
        "description": "Class SiteConfiguration",
        "properties": {
          "id": {
            "description": "Config entry identifier",
            "type": "integer"
          },
          "attributeName": {
            "description": "Attribute name",
            "type": "integer"
          },
          "value": {
            "description": "Config value",
            "type": "string"
          }
        }
      },
      "Preview": {
        "description": "Class Preview",
        "properties": {
          "link": {
            "description": "Link of file for Preview",
            "type": "string"
          },
          "pdf": {
            "description": "PDF File for Preview",
            "type": "string"
          },
          "viewUrl": {
            "description": "Preview URL",
            "type": "string"
          },
          "status": {
            "description": "Status of Preview. e.g. Processing,Preview,Failed",
            "type": "string"
          },
          "watermark": {
            "description": "Preview URL",
            "type": "string"
          }
        }
      },
      "UserMetadata": {
        "description": "Class UserMetadata",
        "properties": {
          "name": {
            "description": "Metadata name",
            "type": "string"
          },
          "value": {
            "description": "Metadata value",
            "type": "string"
          }
        }
      },
      "Recipient": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user associated with the recipient."
          },
          "user": {
            "description": "Details of the user associated with the recipient.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "isDistributionList": {
            "type": "boolean",
            "description": "Indicates if the recipient is a distribution list rather than an individual user."
          },
          "type": {
            "type": "integer",
            "format": "int32",
            "description": "The recipient type -> 0: TO, 1: CC, 2: BCC."
          },
          "email": {
            "type": "string",
            "description": "Email address of the recipient."
          }
        }
      },
      "Recipient.Post": {
        "description": "Class Recipient",
        "required": [
          "userId"
        ],
        "properties": {
          "userId": {
            "description": "User ID for Recipient",
            "type": "integer"
          },
          "type": {
            "description": "Type for Recipient.0=TO, 1=CC, 2=BCC",
            "type": "integer",
            "enum": [
              "0",
              "1",
              "2"
            ]
          },
          "read": {
            "description": "True for read, false for email not read",
            "type": "boolean"
          }
        }
      },
      "Recipient.Put": {
        "description": "Class Recipient",
        "required": [
          "userId"
        ],
        "properties": {
          "userId": {
            "description": "User ID for Recipient",
            "type": "integer"
          }
        }
      },
      "Template": {
        "description": "Class Template",
        "properties": {
          "id": {
            "description": "Unique Template identifier",
            "type": "integer"
          },
          "name": {
            "description": "Template name",
            "type": "string"
          },
          "subject": {
            "description": "Template subject",
            "type": "string"
          },
          "body": {
            "description": "Template body",
            "type": "string"
          },
          "buttonLink": {
            "description": "Button Link",
            "type": "string"
          },
          "buttonText": {
            "description": "Button Text",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "ActivitiesWithdrawUserFilesJob": {
        "properties": {
          "id": {
            "description": "Job identifier",
            "type": "string"
          },
          "status": {
            "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
            "type": "string"
          },
          "errors": {
            "description": "The list of errors occurred during job processing",
            "type": "string"
          },
          "objectIds": {
            "type": "string"
          }
        }
      },
      "Task": {
        "description": "Class Task",
        "required": [
          "assigneeId",
          "created",
          "due",
          "id",
          "status",
          "userId"
        ],
        "properties": {
          "id": {
            "description": "Task unique identifier",
            "type": "integer"
          },
          "assigneeId": {
            "description": "Assigned User unique identifier",
            "type": "string"
          },
          "assignee": {
            "description": "Assigned user (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "due": {
            "description": "Task due date",
            "type": "string",
            "format": "date"
          },
          "parentId": {
            "description": "Parent Comment identifier",
            "type": "integer"
          },
          "objectId": {
            "description": "Object identifier Task belongs to",
            "type": "string"
          },
          "userId": {
            "description": "Identifier of User who created a Task",
            "type": "string"
          },
          "user": {
            "description": "User who created the task (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "created": {
            "description": "Task creation date",
            "type": "string",
            "format": "date"
          },
          "modified": {
            "description": "Task modification date",
            "type": "string",
            "format": "date"
          },
          "contents": {
            "description": "Task content",
            "type": "string"
          },
          "deleted": {
            "description": "Indicates that Task is deleted",
            "type": "boolean"
          },
          "folderId": {
            "description": "Identifier of Object's parent Folder",
            "type": "string"
          },
          "status": {
            "description": "Task status",
            "type": "string"
          },
          "file": {
            "description": "File the task is tied to (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/File"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Task.Post": {
        "description": "Class Task",
        "required": [
          "assigneeId",
          "due",
          "contents"
        ],
        "properties": {
          "assigneeId": {
            "description": "User unique identifier",
            "type": "integer"
          },
          "due": {
            "description": "Task due date",
            "type": "string",
            "format": "date"
          },
          "parentId": {
            "description": "Parent Comment identifier",
            "type": "integer"
          },
          "contents": {
            "description": "Task content",
            "type": "string"
          }
        }
      },
      "Task.Put": {
        "description": "Class Task",
        "required": [
          "assigneeId",
          "due",
          "contents"
        ],
        "properties": {
          "assigneeId": {
            "description": "User unique identifier",
            "type": "integer"
          },
          "due": {
            "description": "Task due date",
            "type": "string",
            "format": "date"
          },
          "contents": {
            "description": "Task content",
            "type": "string"
          },
          "status": {
            "description": "'D' = 'Defined', 'P' = 'In Progress', 'C' = 'Completed'",
            "type": "string",
            "enum": [
              "D",
              "P",
              "C"
            ]
          }
        }
      },
      "Tray": {
        "description": "Class Tray",
        "properties": {
          "objectId": {
            "description": "Unique identifier of Object in Tray",
            "type": "integer"
          },
          "parentId": {
            "description": "Object's parent Folder identifier",
            "type": "integer"
          },
          "canMove": {
            "description": "Indicates whether an object can be moved",
            "type": "boolean"
          },
          "object": {
            "description": "File info (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/File"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Storage": {
        "description": "Class DailyBandwidth",
        "properties": {
          "dateTime": {
            "description": "Date",
            "type": "string",
            "format": "date"
          },
          "usage": {
            "description": "Storage Usage",
            "type": "integer"
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "LDAP Group description"
          },
          "name": {
            "type": "string",
            "description": "LDAP Group name"
          },
          "dn": {
            "type": "string",
            "description": "LDAP Group domain name"
          },
          "email": {
            "type": "string",
            "description": "LDAP Group email"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "LDAP Group ID"
          }
        }
      },
      "Group.Post": {
        "description": "Class Group",
        "required": [
          "items",
          "name"
        ],
        "properties": {
          "name": {
            "description": "Contact name",
            "type": "string"
          },
          "items": {
            "description": "List of emails contained by Contact",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactItem.Post"
            }
          }
        }
      },
      "Group.Put": {
        "description": "Class Group",
        "required": [
          "items",
          "name"
        ],
        "properties": {
          "name": {
            "description": "Contact name",
            "type": "string"
          },
          "items": {
            "description": "List of emails contained by Contact",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactItem.Post"
            }
          }
        }
      },
      "ContactItem": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "profileIcon": {
            "type": "string"
          },
          "isDistributionList": {
            "type": "boolean"
          }
        }
      },
      "ContactItem.Post": {
        "description": "Class ContactItem",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "description": "Contact's email",
            "type": "string"
          }
        }
      },
      "ContactItem.Put": {
        "description": "Class ContactItem",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "description": "Contact's email",
            "type": "string"
          }
        }
      },
      "PushedObject": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "description": "The date and time when the object was pushed."
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier (UUID) for the user who pushed the object."
          },
          "user": {
            "description": "Details of the user who pushed the object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "objectId": {
            "type": "string",
            "description": "Unique identifier (UUID) for the pushed object."
          }
        }
      },
      "WebFormField": {
        "type": "object",
        "properties": {
          "mandatory": {
            "type": "boolean"
          },
          "specialType": {
            "type": "string"
          },
          "optionValues": {
            "type": "string"
          },
          "defaultValue": {
            "type": "string"
          },
          "placeholder": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "editable": {
            "type": "boolean"
          },
          "sequence": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "RequestFileLink": {
        "description": "Class RequestFileLink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "RequestFileLink.Post": {
        "description": "Class RequestFileLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "RequestFileLink.Put": {
        "description": "Class RequestFileLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "AdminRole": {
        "description": "Class AdminRole",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "description": "Admin role unique identifier",
            "type": "integer"
          },
          "name": {
            "description": "Admin role name",
            "type": "string"
          },
          "guid": {
            "description": "Admin role guid",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "AdminRole.Post": {
        "description": "Class AdminRole",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Admin role name",
            "type": "string"
          }
        }
      },
      "AdminRole.Put": {
        "description": "Class AdminRole",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Admin role name",
            "type": "string"
          }
        }
      },
      "SourceFile": {
        "required": [
          "id",
          "name",
          "parentId",
          "type",
          "wopiapp"
        ],
        "properties": {
          "id": {
            "description": "Unique SourceContent identifier",
            "type": "string"
          },
          "name": {
            "description": "Name of source content",
            "type": "string"
          },
          "parentId": {
            "description": "Parent ID of Source",
            "type": "string"
          },
          "type": {
            "description": "Type of Object",
            "type": "string"
          },
          "created": {
            "description": "Time of Source created in UTC timestamp",
            "type": "string",
            "format": "date"
          },
          "modified": {
            "description": "Time of Source modified in UTC timestamp",
            "type": "string",
            "format": "date"
          },
          "status": {
            "description": "Status of the source",
            "type": "string"
          },
          "deleted": {
            "description": "Whether the file is deleted",
            "type": "boolean"
          },
          "path": {
            "description": "Shows object full path",
            "type": "string"
          },
          "userRoleId": {
            "description": "Current user role id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "integer"
          },
          "creator": {
            "description": "File's creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "wopiapp": {
            "description": "WOPI info for iOS app",
            "type": "boolean"
          },
          "rootId": {
            "description": "Root Id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "pathIds": {
            "description": "Path Ids (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "sourceTypeId": {
            "description": "Source Type (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "totalFilesCount": {
            "description": "Total Files Count (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "totalFoldersCount": {
            "description": "Total Folders Count (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "parent": {
            "description": "Parent Repositories Gateway folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/SourceContent"
          },
          "links": {
            "type": "string"
          },
          "locked": {
            "description": "Whether the file is locked",
            "type": "boolean"
          },
          "size": {
            "description": "The file size",
            "type": "integer"
          },
          "fingerprint": {
            "description": "File content fingerprint",
            "type": "string"
          },
          "expire": {
            "description": "The file expiration date",
            "type": "string"
          },
          "mime": {
            "description": "File MIME type",
            "type": "string"
          },
          "avStatus": {
            "description": "Check file availability status according to AV settings and file scanned/infected status",
            "type": "string"
          },
          "dlpStatus": {
            "description": "Check file availability status according to DLP settings and file scanned/infected status",
            "type": "string"
          },
          "lockedUserName": {
            "description": "Username/email of user who locked the file",
            "type": "string"
          },
          "lockUser": {
            "description": "User who locked the file",
            "$ref": "#/components/schemas/UserBasicInfo"
          }
        }
      },
      "SourceFile.Post": {
        "properties": {
          "id": {
            "description": "Unique SourceContent identifier",
            "type": "string"
          }
        }
      },
      "SourceFile.Put": {
        "properties": {
          "id": {
            "description": "Unique SourceContent identifier",
            "type": "string"
          }
        }
      },
      "Transaction": {
        "description": "Class Transaction",
        "required": [
          "accessToken",
          "id"
        ],
        "properties": {
          "id": {
            "description": "Unique transaction identifier",
            "type": "string"
          },
          "accessToken": {
            "description": "Access token",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Transaction.Post": {
        "description": "Class Transaction",
        "required": [
          "id",
          "accessToken"
        ],
        "properties": {
          "id": {
            "description": "Unique transaction identifier",
            "type": "string"
          },
          "accessToken": {
            "description": "Access token",
            "type": "string"
          }
        }
      },
      "Hostname": {
        "description": "Class Hostname",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "Hostname unique identifier",
            "type": "integer"
          },
          "hostname": {
            "description": "Hostname",
            "type": "string"
          },
          "deleted": {
            "description": "Indicates whether the hostname is deleted",
            "type": "boolean"
          },
          "disabled": {
            "description": "Indicates whether the hostname is disabled",
            "type": "boolean"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Hostname.Post": {
        "description": "Class Hostname",
        "required": [
          "hostname"
        ],
        "properties": {
          "hostname": {
            "description": "Hostname",
            "type": "string"
          },
          "disabled": {
            "description": "Disable hostname",
            "type": "boolean"
          }
        }
      },
      "Hostname.Put": {
        "description": "Class Hostname",
        "properties": {
          "disabled": {
            "description": "Disable hostname",
            "type": "boolean"
          }
        }
      },
      "SourceFolder": {
        "required": [
          "id",
          "name",
          "parentId",
          "type",
          "wopiapp"
        ],
        "properties": {
          "id": {
            "description": "Unique SourceContent identifier",
            "type": "string"
          },
          "name": {
            "description": "Name of source content",
            "type": "string"
          },
          "parentId": {
            "description": "Parent ID of Source",
            "type": "string"
          },
          "type": {
            "description": "Type of Object",
            "type": "string"
          },
          "created": {
            "description": "Time of Source created in UTC timestamp",
            "type": "string",
            "format": "date"
          },
          "modified": {
            "description": "Time of Source modified in UTC timestamp",
            "type": "string",
            "format": "date"
          },
          "status": {
            "description": "Status of the source",
            "type": "string"
          },
          "deleted": {
            "description": "Whether the file is deleted",
            "type": "boolean"
          },
          "path": {
            "description": "Shows object full path",
            "type": "string"
          },
          "userRoleId": {
            "description": "Current user role id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "integer"
          },
          "creator": {
            "description": "File's creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "wopiapp": {
            "description": "WOPI info for iOS app",
            "type": "boolean"
          },
          "rootId": {
            "description": "Root Id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "pathIds": {
            "description": "Path Ids (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "sourceTypeId": {
            "description": "Source Type (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "totalFilesCount": {
            "description": "Total Files Count (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "totalFoldersCount": {
            "description": "Total Folders Count (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "parent": {
            "description": "Parent Repositories Gateway folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/SourceContent"
          },
          "links": {
            "type": "string"
          },
          "isFavorite": {
            "description": "Indicates that Folder is marked as favorite for current user",
            "type": "boolean"
          }
        }
      },
      "SourceFolder.Post": {
        "properties": {
          "id": {
            "description": "Unique SourceContent identifier",
            "type": "string"
          }
        }
      },
      "SourceFolder.Put": {
        "properties": {
          "id": {
            "description": "Unique SourceContent identifier",
            "type": "string"
          }
        }
      },
      "Settings": {
        "description": "Class Settings",
        "required": [
          "defaultFileRequestExpire",
          "proximityEnabled"
        ],
        "properties": {
          "defaultFileRequestExpire": {
            "description": "Default file request expiration",
            "type": "integer"
          },
          "proximityEnabled": {
            "description": "Is proximity enabled",
            "type": "integer"
          },
          "adminSetPasswordAllowed": {
            "description": "Backend switch for admin set password allowed",
            "type": "boolean"
          }
        }
      },
      "Settings.Post": {
        "description": "Class Settings",
        "properties": {
          "languageId": {
            "description": "Language ID in Setting",
            "type": "integer"
          },
          "locationId": {
            "description": "ID of Location in Setting. User's personal default location for send file and uploads.",
            "type": "integer"
          },
          "signature": {
            "description": "Email message Signature in Setting",
            "type": "string"
          },
          "mobileKeyStore": {
            "description": "Mobile Key Store of Setting",
            "type": "string"
          }
        }
      },
      "Settings.Put": {
        "description": "Class Settings",
        "properties": {
          "languageId": {
            "description": "Language ID in Setting",
            "type": "integer"
          },
          "locationId": {
            "description": "ID of Location in Setting. User's personal default location for send file and uploads.",
            "type": "integer"
          },
          "signature": {
            "description": "Email message Signature in Setting",
            "type": "string"
          },
          "mobileKeyStore": {
            "description": "Mobile Key Store of Setting",
            "type": "string"
          }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "format": "int32",
            "description": "Tenant ID"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Location ID"
          },
          "name": {
            "type": "string",
            "description": "Location name"
          },
          "dns": {
            "type": "string",
            "description": "Location DNS"
          }
        }
      },
      "Location.Post": {
        "description": "Class Location",
        "required": [
          "name",
          "domain"
        ],
        "properties": {
          "name": {
            "description": "Location name. Ask administrator for location names for your server",
            "type": "string"
          },
          "domain": {
            "description": "A URL domain that can be used to access the servers in this location,\n                                 e.g. location.domain.com.\n                                    The domain should be registered in a DNS to point to the servers.",
            "type": "string"
          }
        }
      },
      "Location.Put": {
        "description": "Class Location",
        "required": [
          "name",
          "domain"
        ],
        "properties": {
          "name": {
            "description": "Location name. Ask administrator for location names for your server",
            "type": "string"
          },
          "domain": {
            "description": "A URL domain that can be used to access the servers in this location,\n                                 e.g. location.domain.com.\n                                    The domain should be registered in a DNS to point to the servers.",
            "type": "string"
          }
        }
      },
      "WebForm": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebFormField"
            }
          },
          "name": {
            "type": "string"
          },
          "standalone": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "authRequired": {
            "type": "boolean"
          },
          "embedded": {
            "type": "boolean"
          },
          "profiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebFormProfile"
            }
          },
          "id": {
            "type": "string"
          },
          "lastModified": {
            "type": "string"
          }
        }
      },
      "GDriveOAuthLink": {
        "description": "Class GDriveOAuthLink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "GDriveOAuthLink.Post": {
        "description": "Class GDriveOAuthLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "GDriveOAuthLink.Put": {
        "description": "Class GDriveOAuthLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "Upload": {
        "type": "object",
        "properties": {
          "fileUrl": {
            "type": "string",
            "description": "URL where the uploaded file can be accessed."
          },
          "error": {
            "type": "string",
            "description": "Error message in case of upload failure."
          },
          "clientName": {
            "type": "string",
            "description": "Name of the client uploading the file."
          },
          "replaceId": {
            "type": "string",
            "description": "ID of the file being replaced, if applicable."
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user who initiated the upload."
          },
          "totalSize": {
            "type": "integer",
            "format": "int32",
            "description": "Total size of the uploaded file in bytes."
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp when the upload was initiated."
          },
          "clientCreated": {
            "type": "string",
            "description": "Timestamp when the file was created on the client side."
          },
          "location": {
            "type": "string",
            "description": "The logical storage location of the uploaded file."
          },
          "uri": {
            "type": "string",
            "readOnly": true,
            "description": "The URI for the upload link."
          },
          "lastTimestamp": {
            "type": "string",
            "description": "Timestamp of the last uploaded chunk."
          },
          "clientModified": {
            "type": "string",
            "description": "Timestamp when the file was last modified on the client side."
          },
          "totalChunks": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of chunks the file was split into."
          },
          "backend": {
            "type": "string",
            "description": "Backend storage system used for the upload."
          },
          "svrUploadTime": {
            "type": "integer",
            "format": "int32",
            "description": "Time taken by the server to process the upload (in milliseconds)."
          },
          "finished": {
            "type": "boolean",
            "description": "Indicates whether the upload process has finished."
          },
          "uploadedChunks": {
            "type": "integer",
            "format": "int32",
            "description": "Number of chunks successfully uploaded."
          },
          "requestFileId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the file request associated with the upload."
          },
          "uploadedSize": {
            "type": "integer",
            "format": "int32",
            "description": "Total size of the uploaded chunks in bytes."
          },
          "completeOk": {
            "type": "integer",
            "format": "int32",
            "description": "Flag indicating if the upload was completed successfully (1 for success, 0 otherwise)."
          },
          "emailId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the email associated with the uploaded file, if applicable."
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier for the upload."
          }
        }
      },
      "Upload.Post": {
        "description": "Class FileUpload",
        "required": [
          "filename"
        ],
        "properties": {
          "filename": {
            "description": "File name",
            "type": "string"
          },
          "totalSize": {
            "type": "integer"
          },
          "totalChunks": {
            "description": "Total chunks amount",
            "type": "integer"
          },
          "clientCreated": {
            "description": "File creation date set from client",
            "type": "string",
            "format": "date"
          },
          "clientModified": {
            "description": "File modify date set from client",
            "type": "string",
            "format": "date"
          },
          "disableAutoVersion": {
            "description": "Indicates whether Client would like to save file as new version",
            "type": "boolean"
          }
        }
      },
      "Upload.Put": {
        "description": "Class FileUpload",
        "properties": {
          "disableAutoVersion": {
            "description": "Indicates whether Client would like to save file as new version",
            "type": "boolean"
          }
        }
      },
      "Permission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier for the permission."
          },
          "name": {
            "type": "string",
            "description": "Name of the permission."
          },
          "allowed": {
            "type": "boolean",
            "description": "Indicates whether the permission is granted (True) or denied (False)."
          }
        }
      },
      "MobileSyncLink": {
        "description": "Class ObjectLink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "MobileSyncLink.Post": {
        "description": "Class ObjectLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "MobileSyncLink.Put": {
        "description": "Class ObjectLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "Folder": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "The total storage size used by the folder (in bytes)."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the object has been deleted."
          },
          "isUnderMyFolder": {
            "type": "boolean",
            "description": "Indicates if this folder is a subfolder of the user's \"My Folder\"."
          },
          "created": {
            "type": "string",
            "description": "The date and time when the object was created."
          },
          "currentUserRole": {
            "description": "The role of the current user in this folder.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ]
          },
          "vendorDocId": {
            "type": "string",
            "description": "Vendor document ID associated with the object."
          },
          "totalFilesCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of files within this folder."
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier (UUID) of the parent object."
          },
          "source": {
            "type": "integer",
            "format": "int32",
            "description": "ID representing the source of the object (1 - Salesforce, 2 - Teams)."
          },
          "path": {
            "type": "string",
            "description": "Path to the folder in the hierarchy."
          },
          "vendorDocName": {
            "type": "string",
            "description": "Name of the vendor document associated with the object."
          },
          "permissions": {
            "description": "List of permissions associated with the object.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "isFavorite": {
            "type": "boolean",
            "description": "Indicates if the folder is marked as a favorite by the user."
          },
          "syncable": {
            "type": "boolean",
            "description": "Indicates if the folder can be synced by Desktop Sync Client."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier (UUID) who created the folder."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          },
          "totalMembersCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of members who have access to this folder."
          },
          "maxFolderExpiration": {
            "type": "string",
            "description": "The maximum expiration date allowed for files in this folder."
          },
          "pushedFilesCount": {
            "type": "integer",
            "format": "int32",
            "description": "The number of files that have been pushed to mobile apps in this folder."
          },
          "useFolderQuota": {
            "type": "boolean",
            "description": "Indicates if a folder quota is applied to this folder."
          },
          "dlpStatus": {
            "type": "string",
            "description": "The Data Loss Prevention (DLP) status of the folder."
          },
          "avStatus": {
            "type": "string",
            "description": "The Antivirus (AV) status of the folder."
          },
          "permalink": {
            "type": "string",
            "description": "Permanent URL link to access the object."
          },
          "maxFileLifetime": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum duration (in days) that files in this folder can be kept after being added to the folder."
          },
          "isLdapGroupMember": {
            "type": "boolean",
            "description": "Indicates if the folder is part of an LDAP group."
          },
          "permDeleted": {
            "type": "boolean",
            "description": "Indicates whether the object has been permanently deleted."
          },
          "freeSpace": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of free space available in the folder (in bytes)."
          },
          "members": {
            "description": "List of members who have access to the object.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "fileLifetime": {
            "type": "integer",
            "format": "int32",
            "description": "Time duration (in days) for which the files in this folder are kept after being added to the folder."
          },
          "totalFoldersCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of subfolders within this folder."
          },
          "rootId": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the root folder if this is a subfolder."
          },
          "secure": {
            "type": "boolean",
            "description": "Indicates whether the folder or the parent folder containing the file is marked as secure."
          },
          "description": {
            "type": "string",
            "description": "The description of the folder."
          },
          "isRoot": {
            "type": "boolean",
            "description": "Indicates if this folder is a root folder."
          },
          "quota": {
            "type": "integer",
            "format": "int32",
            "description": "The storage quota for the folder (in bytes)."
          },
          "pathIds": {
            "type": "string",
            "description": "A list of IDs representing the path of the folder within the folder hierarchy."
          },
          "modified": {
            "type": "string",
            "description": "The date and time when the object was last modified."
          },
          "type": {
            "type": "string",
            "description": "Type of the object (e.g., f - file, d - folder)"
          },
          "expire": {
            "type": "string",
            "description": "Expiration timestamp of the object, if applicable."
          },
          "creator": {
            "description": "Details of the user who created the object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier (UUID) of the folder."
          },
          "isShared": {
            "type": "boolean",
            "description": "Indicates if the folder is shared with other users."
          }
        }
      },
      "Folder.Post": {
        "description": "Class Folder",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Folder name",
            "type": "string"
          },
          "description": {
            "description": "Folder description",
            "type": "string"
          },
          "syncable": {
            "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
            "type": "boolean"
          },
          "expire": {
            "description": "The folder expiration date. Applicable to top level folders",
            "type": "string",
            "format": "date"
          },
          "fileLifetime": {
            "description": "The file's lifetime in the folder",
            "type": "integer"
          },
          "secure": {
            "description": "Indicates whether folder is secure. Only top level folders under user's root folder can be set to secure",
            "type": "boolean"
          }
        }
      },
      "Folder.Put": {
        "description": "Class Folder",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Folder name",
            "type": "string"
          },
          "description": {
            "description": "Folder description",
            "type": "string"
          },
          "syncable": {
            "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
            "type": "boolean"
          },
          "expire": {
            "description": "The folder expiration date. Applicable to top level folders",
            "type": "string",
            "format": "date"
          },
          "fileLifetime": {
            "description": "The file's lifetime in the folder",
            "type": "integer"
          },
          "applyFileLifetimeToFiles": {
            "description": "Apply file lifetime setting to existing files",
            "type": "boolean"
          },
          "applyFileLifetimeToNested": {
            "description": "Apply file lifetime setting to nested folders",
            "type": "boolean"
          },
          "secure": {
            "description": "Indicates whether folder is secure. Only top level folders under user's root folder can be set to secure",
            "type": "boolean"
          }
        }
      },
      "DliFile": {
        "description": "Class DliFile",
        "required": [
          "id",
          "locked",
          "name",
          "parentId",
          "size",
          "type",
          "userId",
          "wopiapp"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "mime": {
            "description": "File MIME type",
            "type": "string"
          },
          "size": {
            "description": "File content size",
            "type": "string"
          },
          "fingerprint": {
            "description": "File content fingerprint",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "locked": {
            "description": "Unique identifier of User who locked a File",
            "type": "integer"
          },
          "lockUser": {
            "description": "User who locked the File (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "clientCreated": {
            "description": "Original created time of the file",
            "type": "string",
            "format": "date"
          },
          "clientModified": {
            "description": "Original Modified time of the file",
            "type": "string",
            "format": "date"
          },
          "members": {
            "description": "File members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "overriddenExpire": {
            "description": "Indicates that file expire is overridden",
            "type": "boolean"
          },
          "originalFileId": {
            "description": "File identifier from which this file was copied from",
            "type": "string"
          },
          "pushedObject": {
            "description": "Contains pushedObject data if current file was ever pushed (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/PushedObject"
          },
          "avStatus": {
            "description": "Check file availability status according to AV settings and file scanned/infected status",
            "type": "string"
          },
          "dlpStatus": {
            "description": "Check file availability status according to DLP settings and file scanned/infected status",
            "type": "string"
          },
          "adminQuarantineStatus": {
            "description": "Check file availability status according to admin quarantined status",
            "type": "string"
          },
          "storageAvailable": {
            "description": "Boolean value that shows if this file is available on any volume",
            "type": "boolean"
          },
          "lastModifiedBy": {
            "description": "Creator of the latest version (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "wopiapp": {
            "description": "WOPI info for iOS app",
            "type": "boolean"
          },
          "roleId": {
            "description": "Highest role",
            "type": "string"
          },
          "isShared": {
            "description": "File shared",
            "type": "string"
          },
          "fingerprints": {
            "description": "Array of file fingerprint objects",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "description": "Array of tag objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "DliFile.Post": {
        "description": "Class DliFile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          }
        }
      },
      "DliFile.Put": {
        "description": "Class DliFile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          },
          "expire": {
            "description": "The file expiration date.",
            "type": "string"
          },
          "replace": {
            "description": "Replace the file if file with same name exists",
            "type": "string"
          }
        }
      },
      "SourceType": {
        "description": "Class SourceType",
        "properties": {
          "id": {
            "description": "Unique identifier of Source type",
            "type": "integer"
          },
          "name": {
            "description": "Source Type name",
            "type": "string"
          },
          "userCanSet": {
            "description": "User can set",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Member": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier (UUID) of the user."
          },
          "roleId": {
            "type": "integer",
            "format": "int32",
            "description": "Role assigned to the member."
          },
          "group": {
            "description": "Group details if the member belongs to a group.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Group"
              }
            ]
          },
          "user": {
            "description": "User details of the member.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "objectId": {
            "type": "string",
            "description": "Unique identifier (UUID) of the associated object (file or folder)."
          },
          "created": {
            "type": "string",
            "description": "Date when the file or folder was shared."
          },
          "inheritRoleId": {
            "type": "integer",
            "format": "int32",
            "description": "Inherited role ID from the parent folder, if applicable."
          },
          "sharedBy": {
            "description": "Details of the user who shared the file or folder.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "allowedFolderRoleId": {
            "type": "array",
            "description": "List of allowed folder role IDs.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "rank": {
            "type": "integer",
            "format": "int32",
            "description": "Rank of the member role"
          },
          "groupId": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of the LDAP group."
          },
          "email": {
            "type": "string",
            "description": "Email associated with the member."
          },
          "role": {
            "description": "Role details assigned to the member.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ]
          }
        }
      },
      "Member.Post": {
        "description": "Class Member",
        "required": [
          "roleId"
        ],
        "properties": {
          "roleId": {
            "description": "Unique identifier of role",
            "type": "integer"
          },
          "userId": {
            "description": "User's unique identifier",
            "type": "integer"
          },
          "email": {
            "description": "User email",
            "type": "string"
          },
          "notify": {
            "description": "Indicates whether user would like to receive emails when new member is added into folder",
            "type": "boolean",
            "default": true
          }
        }
      },
      "Member.Put": {
        "description": "Class Member",
        "required": [
          "roleId"
        ],
        "properties": {
          "roleId": {
            "description": "Unique identifier of role",
            "type": "integer"
          },
          "notifyFileAdded": {
            "type": "boolean"
          },
          "notify": {
            "description": "Indicates whether user would like to receive emails when new member is added into folder",
            "type": "boolean",
            "default": true
          }
        }
      },
      "VerificationCodeLink": {
        "description": "Class VerificationCodeLink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "VerificationCodeLink.Post": {
        "description": "Class VerificationCodeLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "VerificationCodeLink.Put": {
        "description": "Class VerificationCodeLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "Device": {
        "description": "Class Device",
        "required": [
          "clientId",
          "id",
          "installName",
          "userId"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of Device",
            "type": "integer"
          },
          "clientId": {
            "description": "Unique identifier of client for this Device",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of user for this Device",
            "type": "string"
          },
          "installTagId": {
            "description": "Unique identifier of install tag for this Device.Usually the serial number of Device",
            "type": "string"
          },
          "installName": {
            "description": "Install Tag name for this Device. e.g. Someone's IPhone",
            "type": "string"
          },
          "wipeFlag": {
            "description": "Flag that tells the device to remote wipe itself.\n     *                   0 = not set, 1 = set, 2 = device has been notified, 3 = wipe is completed",
            "type": "string"
          },
          "mobileKeyStore": {
            "description": "Key to encrypt files on this device",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Device.Post": {
        "description": "Class Device",
        "properties": {
          "clientId": {
            "description": "Unique identifier of client for this Device",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of user for this Device",
            "type": "string"
          },
          "installTagId": {
            "description": "Unique identifier of install tag for this Device. Usually the serial number of Device",
            "type": "string"
          },
          "installName": {
            "description": "Install Tag name for this Device. e.g. Someone's IPhone",
            "type": "string"
          },
          "mobileKeyStore": {
            "description": "Key for encryt files on this device",
            "type": "string"
          }
        }
      },
      "Device.Put": {
        "description": "Class Device",
        "properties": {
          "mobileKeyStore": {
            "description": "Key for encryt files on this device",
            "type": "string"
          },
          "registrationToken": {
            "description": "Set the token for messaging registration",
            "type": "string"
          }
        }
      },
      "Activity": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "string",
            "readOnly": true
          },
          "successful": {
            "type": "boolean"
          },
          "created": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/ActivityUser"
          },
          "event": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BaseFile": {
        "required": [
          "id",
          "name",
          "parentId",
          "size",
          "userId"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "mime": {
            "description": "File MIME type",
            "type": "string"
          },
          "size": {
            "description": "File content size",
            "type": "string"
          },
          "fingerprint": {
            "description": "File content fingerprint",
            "type": "string"
          }
        }
      },
      "KitepointDirectory": {
        "description": "Class KitepointDirectory",
        "required": [
          "id",
          "name",
          "parentId",
          "userId"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "type": {
            "description": "Object type. Type kd is kitepoint folder",
            "type": "string"
          },
          "path": {
            "description": "Parent folders path",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "isFavorite": {
            "description": "Indicates that Folder is marked as favorite for current user (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "boolean"
          },
          "eCObject": {
            "description": "Unique identifier of kitepoint directory",
            "type": "string"
          },
          "eCUUID": {
            "description": "ECUuId",
            "type": "string"
          }
        }
      },
      "KitepointDirectory.Post": {
        "description": "Class KitepointDirectory",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Folder name",
            "type": "string"
          }
        }
      },
      "KitepointDirectory.Put": {
        "description": "Class KitepointDirectory",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Folder name",
            "type": "string"
          }
        }
      },
      "DailyBandwidth": {
        "description": "Class DailyBandwidth",
        "properties": {
          "dateTime": {
            "description": "Date",
            "type": "string",
            "format": "date"
          },
          "eventStatus": {
            "description": "Event Status",
            "type": "integer"
          },
          "usage": {
            "description": "Bandwidth Usage",
            "type": "integer"
          }
        }
      },
      "Shortlink": {
        "description": "Class Shortlink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Shortlink.Post": {
        "description": "Class Shortlink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "Shortlink.Put": {
        "description": "Class Shortlink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "User": {
        "description": "Class User",
        "required": [
          "basedirId",
          "email",
          "id",
          "mydirId",
          "name",
          "syncdirId"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of the user",
            "type": "string"
          },
          "basedirId": {
            "description": "The unique identifier of the user's root Kiteworks directory.",
            "type": "string"
          },
          "created": {
            "description": "User creation date",
            "type": "string",
            "format": "date"
          },
          "email": {
            "description": "The user's email",
            "type": "string"
          },
          "mydirId": {
            "description": "The unique identifier of the user's mydir system directory.",
            "type": "string"
          },
          "name": {
            "description": "The name of the user",
            "type": "string"
          },
          "syncdirId": {
            "description": "The unique identifier of the user's 'My Folder'.",
            "type": "string"
          },
          "userTypeId": {
            "description": "The unique identifier of the user type (profile).",
            "type": "integer"
          },
          "internal": {
            "description": "Indicates that the user is an internal user",
            "type": "boolean"
          },
          "profileIcon": {
            "description": "User profile icon link",
            "type": "string"
          },
          "extDL": {
            "description": "Indicates that the user is External Distribution List",
            "type": "boolean"
          },
          "metadata": {
            "description": "List of user's metadata",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMetadata"
            }
          },
          "adminRoleId": {
            "description": "The ID of the admin role assigned to the user.",
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "active": {
            "description": "Indicates whether the user is an actual kitework user",
            "type": "boolean"
          },
          "suspended": {
            "description": "Indicates whether the user is suspended",
            "type": "boolean"
          },
          "deleted": {
            "description": "Indicates whether the user has been deleted",
            "type": "boolean"
          },
          "flags": {
            "description": "Authentication type.\n     *                  0: No authentication,\n     *                  1: Authentication by kiteworks,\n     *                  2: Authentication by LDAP,\n     *                  4: Authentication by SSO",
            "type": "integer"
          },
          "verified": {
            "description": "Indicates that the user is verified",
            "type": "boolean"
          },
          "deactivated": {
            "description": "Indicates whether the user has been deactivated",
            "type": "boolean"
          }
        }
      },
      "User.Post": {
        "description": "Class User",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "description": "The user's email",
            "type": "string"
          },
          "name": {
            "description": "The name of the user",
            "type": "string"
          },
          "password": {
            "description": "The user's password",
            "type": "string"
          },
          "userTypeId": {
            "description": "The unique identifier of the user type",
            "type": "integer"
          },
          "verified": {
            "description": "Indicates that the user is verified.",
            "type": "boolean"
          },
          "sendNotification": {
            "description": "Indicates whether send notification to user or not",
            "type": "boolean"
          }
        }
      },
      "User.Put": {
        "description": "Class User",
        "properties": {
          "suspended": {
            "description": "Indicates whether the user is suspended. Set to true to suspend the user.",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the user",
            "type": "string"
          },
          "password": {
            "description": "The user's password",
            "type": "string"
          },
          "verified": {
            "description": "Indicates that the user is verified.",
            "type": "boolean"
          },
          "deactivated": {
            "description": "Indicates whether the user is deactivated. Set to true to deactivate the user.",
            "type": "boolean"
          }
        }
      },
      "Content": {
        "description": "Class Content",
        "required": [
          "id",
          "locked",
          "name",
          "parentId",
          "size",
          "type",
          "userId",
          "wopiapp"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "mime": {
            "description": "File MIME type",
            "type": "string"
          },
          "size": {
            "description": "File content size",
            "type": "string"
          },
          "fingerprint": {
            "description": "File content fingerprint",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "locked": {
            "description": "Unique identifier of User who locked a File",
            "type": "integer"
          },
          "lockUser": {
            "description": "User who locked the File (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "clientCreated": {
            "description": "Original created time of the file",
            "type": "string",
            "format": "date"
          },
          "clientModified": {
            "description": "Original Modified time of the file",
            "type": "string",
            "format": "date"
          },
          "members": {
            "description": "File members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "overriddenExpire": {
            "description": "Indicates that file expire is overridden",
            "type": "boolean"
          },
          "originalFileId": {
            "description": "File identifier from which this file was copied from",
            "type": "string"
          },
          "pushedObject": {
            "description": "Contains pushedObject data if current file was ever pushed (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/PushedObject"
          },
          "avStatus": {
            "description": "Check file availability status according to AV settings and file scanned/infected status",
            "type": "string"
          },
          "dlpStatus": {
            "description": "Check file availability status according to DLP settings and file scanned/infected status",
            "type": "string"
          },
          "adminQuarantineStatus": {
            "description": "Check file availability status according to admin quarantined status",
            "type": "string"
          },
          "storageAvailable": {
            "description": "Boolean value that shows if this file is available on any volume",
            "type": "boolean"
          },
          "lastModifiedBy": {
            "description": "Creator of the latest version (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "wopiapp": {
            "description": "WOPI info for iOS app",
            "type": "boolean"
          },
          "roleId": {
            "description": "Highest role",
            "type": "string"
          },
          "isShared": {
            "description": "File shared",
            "type": "string"
          },
          "fingerprints": {
            "description": "Array of file fingerprint objects",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "description": "Array of tag objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "Content.Post": {
        "description": "Class Content",
        "required": [
          "content",
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          },
          "content": {
            "description": "The file content.",
            "type": "string"
          },
          "clientCreated": {
            "description": "The date and time when the file was created on the client side.",
            "type": "integer"
          },
          "clientModified": {
            "description": "The date and time when the file was last modified on the client side.",
            "type": "integer"
          },
          "note": {
            "description": "Indicates if the file should be uploaded as a note.",
            "type": "integer"
          },
          "disableAutoVersion": {
            "description": "Indicates if the file should be prevented from being saved as a new version.",
            "type": "boolean"
          }
        }
      },
      "Content.Put": {
        "description": "Class Content",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          },
          "expire": {
            "description": "The file expiration date.",
            "type": "string"
          },
          "replace": {
            "description": "Replace the file if file with same name exists",
            "type": "string"
          },
          "clientCreated": {
            "description": "The date and time when the file was created on the client side.",
            "type": "integer"
          },
          "clientModified": {
            "description": "The date and time when the file was last modified on the client side.",
            "type": "integer"
          },
          "note": {
            "description": "Indicates if the file should be uploaded as a note.",
            "type": "integer"
          },
          "disableAutoVersion": {
            "description": "Indicates if the file should be prevented from being saved as a new version.",
            "type": "boolean"
          }
        }
      },
      "Export": {
        "description": "Class Export",
        "required": [
          "userId"
        ],
        "properties": {
          "id": {
            "description": "The Id of the task of generating the export",
            "type": "string"
          },
          "startDate": {
            "description": "Start date",
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "description": "End date",
            "type": "string",
            "format": "date"
          },
          "status": {
            "description": "The status generating the export data",
            "type": "string"
          },
          "downloadURL": {
            "description": "The URL for downloading the exported data",
            "type": "string"
          },
          "type": {
            "description": "The export type (activities, files, or emails)",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of the user",
            "type": "string"
          },
          "generatedDate": {
            "description": "The date the report is generated",
            "type": "string",
            "format": "date"
          },
          "fileName": {
            "description": "The generated report filename",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Export.Post": {
        "description": "Class Export",
        "required": [
          "startDate",
          "endDate",
          "types"
        ],
        "properties": {
          "startDate": {
            "description": "Start date",
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "description": "End date",
            "type": "string",
            "format": "date"
          },
          "types": {
            "description": "The export type (activities, files, or emails)",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Export.Put": {
        "description": "Class Export",
        "required": [
          "startDate",
          "endDate",
          "types"
        ],
        "properties": {
          "startDate": {
            "description": "Start date",
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "description": "End date",
            "type": "string",
            "format": "date"
          },
          "types": {
            "description": "The export type (activities, files, or emails)",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Profile": {
        "description": "Class Profile",
        "required": [
          "builtIn",
          "cloneable",
          "id",
          "name",
          "prototype"
        ],
        "properties": {
          "id": {
            "description": "Unique Profile identifier",
            "type": "integer"
          },
          "name": {
            "description": "Profile name",
            "type": "string"
          },
          "prototype": {
            "description": "Prototype Profile identifier",
            "type": "integer"
          },
          "builtIn": {
            "description": "Indicates that the profile is built in",
            "type": "integer"
          },
          "cloneable": {
            "description": "Indicates that the profile can be a prototype for new custom profiles",
            "type": "integer"
          },
          "features": {
            "description": "Profile feature",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeaturesList"
            }
          }
        }
      },
      "Profile.Post": {
        "description": "Class Profile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Profile name",
            "type": "string"
          },
          "prototype": {
            "description": "Id of the prototype profile to be cloned. If not passed, the Standard profile will be used",
            "type": "integer"
          }
        }
      },
      "Profile.Put": {
        "description": "Class Profile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Profile name",
            "type": "string"
          },
          "prototype": {
            "description": "Id of the prototype profile to be cloned. If not passed, the Standard profile will be used",
            "type": "integer"
          }
        }
      },
      "Link": {
        "description": "Class LinkEntity",
        "properties": {
          "rel": {
            "type": "string"
          },
          "entity": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "href": {
            "type": "string"
          }
        }
      },
      "KitepointFile": {
        "description": "Class File",
        "required": [
          "id",
          "locked",
          "name",
          "parentId",
          "size",
          "type",
          "userId",
          "wopiapp"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "mime": {
            "description": "File MIME type",
            "type": "string"
          },
          "size": {
            "description": "File content size",
            "type": "string"
          },
          "fingerprint": {
            "description": "File content fingerprint",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "locked": {
            "description": "Unique identifier of User who locked a File",
            "type": "integer"
          },
          "lockUser": {
            "description": "User who locked the File (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "clientCreated": {
            "description": "Original created time of the file",
            "type": "string",
            "format": "date"
          },
          "clientModified": {
            "description": "Original Modified time of the file",
            "type": "string",
            "format": "date"
          },
          "members": {
            "description": "File members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "overriddenExpire": {
            "description": "Indicates that file expire is overridden",
            "type": "boolean"
          },
          "originalFileId": {
            "description": "File identifier from which this file was copied from",
            "type": "string"
          },
          "pushedObject": {
            "description": "Contains pushedObject data if current file was ever pushed (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/PushedObject"
          },
          "avStatus": {
            "description": "Check file availability status according to AV settings and file scanned/infected status",
            "type": "string"
          },
          "dlpStatus": {
            "description": "Check file availability status according to DLP settings and file scanned/infected status",
            "type": "string"
          },
          "adminQuarantineStatus": {
            "description": "Check file availability status according to admin quarantined status",
            "type": "string"
          },
          "storageAvailable": {
            "description": "Boolean value that shows if this file is available on any volume",
            "type": "boolean"
          },
          "lastModifiedBy": {
            "description": "Creator of the latest version (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "wopiapp": {
            "description": "WOPI info for iOS app",
            "type": "boolean"
          },
          "roleId": {
            "description": "Highest role",
            "type": "string"
          },
          "isShared": {
            "description": "File shared",
            "type": "string"
          },
          "fingerprints": {
            "description": "Array of file fingerprint objects",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "description": "Array of tag objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "KitepointFile.Post": {
        "description": "Class File",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          }
        }
      },
      "KitepointFile.Put": {
        "description": "Class File",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          },
          "expire": {
            "description": "The file expiration date.",
            "type": "string"
          },
          "replace": {
            "description": "Replace the file if file with same name exists",
            "type": "string"
          }
        }
      },
      "RiskPolicyFormFile": {
        "description": "Class RiskPolicyFormFile",
        "required": [
          "id",
          "locked",
          "name",
          "parentId",
          "size",
          "type",
          "userId",
          "wopiapp"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "mime": {
            "description": "File MIME type",
            "type": "string"
          },
          "size": {
            "description": "File content size",
            "type": "string"
          },
          "fingerprint": {
            "description": "File content fingerprint",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "locked": {
            "description": "Unique identifier of User who locked a File",
            "type": "integer"
          },
          "lockUser": {
            "description": "User who locked the File (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "clientCreated": {
            "description": "Original created time of the file",
            "type": "string",
            "format": "date"
          },
          "clientModified": {
            "description": "Original Modified time of the file",
            "type": "string",
            "format": "date"
          },
          "members": {
            "description": "File members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "overriddenExpire": {
            "description": "Indicates that file expire is overridden",
            "type": "boolean"
          },
          "originalFileId": {
            "description": "File identifier from which this file was copied from",
            "type": "string"
          },
          "pushedObject": {
            "description": "Contains pushedObject data if current file was ever pushed (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/PushedObject"
          },
          "avStatus": {
            "description": "Check file availability status according to AV settings and file scanned/infected status",
            "type": "string"
          },
          "dlpStatus": {
            "description": "Check file availability status according to DLP settings and file scanned/infected status",
            "type": "string"
          },
          "adminQuarantineStatus": {
            "description": "Check file availability status according to admin quarantined status",
            "type": "string"
          },
          "storageAvailable": {
            "description": "Boolean value that shows if this file is available on any volume",
            "type": "boolean"
          },
          "lastModifiedBy": {
            "description": "Creator of the latest version (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "wopiapp": {
            "description": "WOPI info for iOS app",
            "type": "boolean"
          },
          "roleId": {
            "description": "Highest role",
            "type": "string"
          },
          "isShared": {
            "description": "File shared",
            "type": "string"
          },
          "fingerprints": {
            "description": "Array of file fingerprint objects",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "description": "Array of tag objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "RiskPolicyFormFile.Post": {
        "description": "Class RiskPolicyFormFile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          }
        }
      },
      "RiskPolicyFormFile.Put": {
        "description": "Class RiskPolicyFormFile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          },
          "expire": {
            "description": "The file expiration date.",
            "type": "string"
          },
          "replace": {
            "description": "Replace the file if file with same name exists",
            "type": "string"
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "guid": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Version": {
        "description": "Class Version",
        "required": [
          "id",
          "name",
          "objectId",
          "userId",
          "versionNumber"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of the file version.",
            "type": "string"
          },
          "versionNumber": {
            "description": "The version number of the file.",
            "type": "integer"
          },
          "deleted": {
            "description": "Indicates whether this version of the file has been deleted.",
            "type": "boolean"
          },
          "created": {
            "description": "The creation date of this file version.",
            "type": "string",
            "format": "date"
          },
          "userId": {
            "description": "The unique identifier of the user who created this file version.",
            "type": "string"
          },
          "size": {
            "description": "The size of the file content in bytes.",
            "type": "integer"
          },
          "fingerprint": {
            "description": "A unique hash identifying the file.",
            "type": "string"
          },
          "fingerprintAlgo": {
            "description": "The algorithm used to generate the fingerprint (e.g., sha3-256, md5).",
            "type": "string"
          },
          "backend": {
            "description": "The backend system associated with the file version.",
            "type": "string"
          },
          "mime": {
            "description": "The MIME type of the file version.",
            "type": "string"
          },
          "name": {
            "description": "The name of the file version.",
            "type": "string"
          },
          "creator": {
            "description": "The user who created the file version. (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "objectId": {
            "description": "The object ID (UUID) for the file version.",
            "type": "string"
          },
          "clientCreated": {
            "description": "The date and time the file version was created on the client side.",
            "type": "string",
            "format": "date"
          },
          "clientModified": {
            "description": "The date and time the file version was last modified on the client side.",
            "type": "string",
            "format": "date"
          },
          "avStatus": {
            "description": "Indicates the file version's availability status based on Antivirus (AV) settings and whether it has been scanned or detected as infected.",
            "type": "string"
          },
          "dlpStatus": {
            "description": "Indicates the file version's availability status based on Data Loss Prevention (DLP) settings and whether it has been scanned or detected as infected.",
            "type": "string"
          },
          "adminQuarantineStatus": {
            "description": "Indicates the file version\\'s availability status based on the administrator\\'s quarantine status. ",
            "type": "string"
          },
          "storageAvailable": {
            "description": "Indicates whether the file is accessible on any storage volume.",
            "type": "boolean"
          },
          "fingerprints": {
            "description": "A list of fingerprints associated with the file version.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "description": "List of tags associated with the file.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Version.Post": {
        "description": "Class Version",
        "required": [
          "name"
        ],
        "properties": {
          "versionNumber": {
            "description": "The version number of the file.",
            "type": "integer"
          },
          "deleted": {
            "description": "Indicates whether the version has been deleted.",
            "type": "boolean"
          },
          "fingerprint": {
            "description": "The fingerprint that uniquely identifies the original file",
            "type": "integer"
          },
          "clientCreated": {
            "type": "integer"
          },
          "clientModified": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "size": {
            "description": "The size of the file version in bytes.",
            "type": "integer"
          },
          "user": {
            "description": "The user who created the file version.",
            "$ref": "#/components/schemas/User"
          },
          "name": {
            "description": "The name of the file version.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier for the file version.",
            "type": "integer"
          },
          "flag": {
            "description": "Bitwise flag to indicate whether the version has been quarantined. Possible numeric values are: 2: quarantined, 0: not quarantined ",
            "type": "integer"
          },
          "archived": {
            "description": "Idicates whether this version has been archived",
            "type": "integer"
          },
          "objectId": {
            "description": "The object ID (UUID) for the file version.",
            "type": "integer"
          },
          "location": {
            "description": "The file location of this version",
            "type": "integer"
          },
          "created": {
            "description": "The date and time the file version was created.",
            "type": "string",
            "format": "date"
          },
          "mime": {
            "description": "The MIME type of the file version.",
            "type": "string"
          },
          "backend": {
            "description": "The backend system associated with the file version.",
            "type": "string"
          },
          "file": {
            "description": "The File entity",
            "$ref": "#/components/schemas/File"
          }
        }
      },
      "Version.Put": {
        "description": "Class Version",
        "required": [
          "name"
        ],
        "properties": {
          "versionNumber": {
            "description": "The version number of the file.",
            "type": "integer"
          },
          "deleted": {
            "description": "Indicates whether the version has been deleted.",
            "type": "boolean"
          },
          "fingerprint": {
            "description": "The fingerprint that uniquely identifies the original file",
            "type": "integer"
          },
          "clientCreated": {
            "type": "integer"
          },
          "clientModified": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "size": {
            "description": "The size of the file version in bytes.",
            "type": "integer"
          },
          "user": {
            "description": "The user who created the file version.",
            "$ref": "#/components/schemas/User"
          },
          "name": {
            "description": "The name of the file version.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier for the file version.",
            "type": "integer"
          },
          "flag": {
            "description": "Bitwise flag to indicate whether the version has been quarantined. Possible numeric values are: 2: quarantined, 0: not quarantined ",
            "type": "integer"
          },
          "archived": {
            "description": "Idicates whether this version has been archived",
            "type": "integer"
          },
          "objectId": {
            "description": "The object ID (UUID) for the file version.",
            "type": "integer"
          },
          "location": {
            "description": "The file location of this version",
            "type": "integer"
          },
          "created": {
            "description": "The date and time the file version was created.",
            "type": "string",
            "format": "date"
          },
          "mime": {
            "description": "The MIME type of the file version.",
            "type": "string"
          },
          "backend": {
            "description": "The backend system associated with the file version.",
            "type": "string"
          },
          "file": {
            "description": "The File entity",
            "$ref": "#/components/schemas/File"
          }
        }
      },
      "UserNotification": {
        "description": "Class Notification",
        "required": [
          "userId"
        ],
        "properties": {
          "objectId": {
            "description": "Id of folder included in Notification",
            "type": "string"
          },
          "fileAdded": {
            "description": "Number of files which are added to the Notification",
            "type": "integer"
          },
          "commentAdded": {
            "description": "Number of comments which are added to the Notification",
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "userId": {
            "description": "ID of user who will send email notifications to end users",
            "type": "string"
          }
        }
      },
      "UserNotification.Post": {
        "description": "Class Notification",
        "properties": {
          "fileAdded": {
            "description": "Number of files which are added to the Notification",
            "type": "integer"
          },
          "commentAdded": {
            "description": "Number of comments which are added to the Notification",
            "type": "integer"
          }
        }
      },
      "UserNotification.Put": {
        "description": "Class Notification",
        "properties": {
          "fileAdded": {
            "description": "Number of files which are added to the Notification",
            "type": "integer"
          },
          "commentAdded": {
            "description": "Number of comments which are added to the Notification",
            "type": "integer"
          }
        }
      },
      "EmailAccountLockedJob": {
        "properties": {
          "id": {
            "description": "Job identifier",
            "type": "string"
          },
          "status": {
            "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
            "type": "string"
          },
          "errors": {
            "description": "The list of errors occurred during job processing",
            "type": "string"
          },
          "objectIds": {
            "type": "string"
          }
        }
      },
      "MonthlyStorage": {
        "description": "Class MonthlyStorage",
        "properties": {
          "dateTime": {
            "description": "Date",
            "type": "string",
            "format": "date"
          },
          "usage": {
            "description": "Storage Usage",
            "type": "integer"
          }
        }
      },
      "EmailPreviewLink": {
        "description": "Class EmailPreviewLink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "EmailPreviewLink.Post": {
        "description": "Class EmailPreviewLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "EmailPreviewLink.Put": {
        "description": "Class EmailPreviewLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "SyncedObject": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "description": "The date and time when the object was pushed."
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier (UUID) for the user who synced the object."
          },
          "user": {
            "description": "Details of the user who pushed the object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "objectId": {
            "type": "string",
            "description": "Unique identifier (UUID) for the synced object."
          }
        }
      },
      "Package": {
        "type": "object",
        "properties": {
          "fileCount": {
            "type": "string",
            "readOnly": true,
            "description": "Count of the files attached to the package."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the package has been marked as deleted."
          },
          "includeFingerprint": {
            "type": "boolean",
            "description": "Indicates whether a fingerprint (hash) of the package should be included for verification."
          },
          "acl": {
            "type": "string",
            "description": "Access control list (ACL) associated with the package, specifying who can access it."
          },
          "downloadLink": {
            "type": "string",
            "description": "Link for accessing the email."
          },
          "expire": {
            "type": "integer",
            "format": "int32",
            "description": "Expiration time of the package in seconds from creation."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the email package."
          },
          "attachments": {
            "description": "List of attachments included in the package.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "selfCopy": {
            "type": "boolean",
            "description": "Indicates whether the package includes a copy for the sender."
          }
        }
      },
      "Package.Post": {
        "description": "Class Package",
        "properties": {
          "selfCopy": {
            "description": "Send a copy of the Email to yourself. True or False",
            "type": "boolean"
          },
          "includeFingerprint": {
            "description": "Include file fingerprint in email",
            "type": "boolean"
          },
          "expire": {
            "description": "Expiration date of package in hours",
            "type": "string",
            "format": "date-time"
          },
          "fileCount": {
            "description": "Set number of files included in the Email package",
            "type": "integer"
          },
          "deleted": {
            "description": "Whether this Email package was deleted or not",
            "type": "boolean"
          },
          "acl": {
            "description": "Indicates whether the recipient is required to sign in (verify_recipient)\n     *                  or if they can download without signing in (no_auth)",
            "type": "string",
            "enum": [
              "verify_recipient",
              "no_auth",
              "otp",
              "internal",
              "anyone_auth"
            ]
          }
        }
      },
      "Package.Put": {
        "description": "Class Package",
        "properties": {
          "selfCopy": {
            "description": "Send a copy of the Email to yourself. True or False",
            "type": "boolean"
          },
          "includeFingerprint": {
            "description": "Include file fingerprint in email",
            "type": "boolean"
          },
          "expire": {
            "description": "Expiration date of package in hours",
            "type": "string",
            "format": "date-time"
          },
          "fileCount": {
            "description": "Set number of files included in the Email package",
            "type": "integer"
          },
          "deleted": {
            "description": "Whether this Email package was deleted or not",
            "type": "boolean"
          },
          "acl": {
            "description": "Indicates whether the recipient is required to sign in (verify_recipient)\n     *                  or if they can download without signing in (no_auth)",
            "type": "string",
            "enum": [
              "verify_recipient",
              "no_auth",
              "otp",
              "internal",
              "anyone_auth"
            ]
          }
        }
      },
      "UserAdminRole": {
        "description": "Class UserAdminRole",
        "required": [
          "userId"
        ],
        "properties": {
          "userId": {
            "description": "User unique identifier",
            "type": "string"
          },
          "adminRole": {
            "description": "Admin role unique identifier. Possible values are: 1: System admin, 2: Application admin",
            "type": "string"
          }
        }
      },
      "UserAdminRole.Post": {
        "description": "Class UserAdminRole",
        "properties": {
          "userId": {
            "description": "User unique identifier",
            "type": "string"
          },
          "adminRole": {
            "description": "Admin role unique identifier. Possible values are: 1: System admin, 2: Application admin",
            "type": "string"
          }
        }
      },
      "UserAdminRole.Put": {
        "description": "Class UserAdminRole",
        "properties": {
          "userId": {
            "description": "User unique identifier",
            "type": "string"
          },
          "adminRole": {
            "description": "Admin role unique identifier. Possible values are: 1: System admin, 2: Application admin",
            "type": "string"
          }
        }
      },
      "KPTransferStatus": {
        "description": "Class KPTransferStatus",
        "required": [
          "errCode",
          "fileHandle",
          "id",
          "kPObjectId",
          "transactionId",
          "userId"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier",
            "type": "string"
          },
          "transactionId": {
            "description": "Transaction Id",
            "type": "string"
          },
          "kPObjectId": {
            "description": "KP Object Id",
            "type": "string"
          },
          "fileHandle": {
            "description": "File name",
            "type": "string"
          },
          "userId": {
            "description": "The unique identifier of the user.",
            "type": "string"
          },
          "errCode": {
            "description": "Error Code",
            "type": "string"
          },
          "status": {
            "description": "Status of Repositories Gateway file transaction:\n                                            0 - received request,\n                                            1 - in progress,\n                                            2 - completed successfully,\n                                            99 - transfer failed",
            "type": "string"
          },
          "avStatus": {
            "description": "AV Status (allowed|disallowed|scanning)",
            "type": "string"
          },
          "dlpStatus": {
            "description": "DLP Status (allowed|disallowed|scanning)",
            "type": "string"
          }
        }
      },
      "FileTypeGroup": {
        "description": "Class MediaTypeGroup",
        "properties": {
          "id": {
            "description": "Unique identifier of Media Type Group",
            "type": "integer"
          },
          "name": {
            "description": "Media Type Group name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "CopyToEcJob": {
        "properties": {
          "id": {
            "description": "Job identifier",
            "type": "string"
          },
          "status": {
            "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
            "type": "string"
          },
          "errors": {
            "description": "The list of errors occurred during job processing",
            "type": "string"
          },
          "objectIds": {
            "type": "string"
          }
        }
      },
      "SendMessage.Post": {
        "description": "Class SendMessage",
        "properties": {
          "to": {
            "description": "The unique identifiers of the 'TO' recipients users.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cc": {
            "description": "The unique identifiers of the 'CC' recipients users.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bcc": {
            "description": "The unique identifiers of the 'BCC' recipient users.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject": {
            "description": "Subject of the email message.",
            "type": "string"
          },
          "body": {
            "description": "Content of the email message.",
            "type": "string"
          },
          "secureBody": {
            "description": "Indicates whether the message is secure.",
            "type": "boolean"
          }
        }
      },
      "SendMessage.Put": {
        "description": "Class SendMessage",
        "properties": {
          "to": {
            "description": "The unique identifiers of the 'TO' recipients users.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cc": {
            "description": "The unique identifiers of the 'CC' recipients users.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bcc": {
            "description": "The unique identifiers of the 'BCC' recipient users.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject": {
            "description": "Subject of the email message.",
            "type": "string"
          },
          "body": {
            "description": "Content of the email message.",
            "type": "string"
          },
          "secureBody": {
            "description": "Indicates whether the message is secure.",
            "type": "boolean"
          }
        }
      },
      "KitepointPreview": {
        "description": "Class Preview",
        "properties": {
          "viewUrl": {
            "description": "View Url",
            "type": "string"
          },
          "status": {
            "description": "Raw Url",
            "type": "string"
          },
          "static": {
            "description": "Static Url",
            "type": "string"
          },
          "rawUrl": {
            "description": "Raw Url",
            "type": "string"
          }
        }
      },
      "MonthlyBandwidth": {
        "description": "Class MonthlyBandwidth",
        "properties": {
          "dateTime": {
            "description": "Date",
            "type": "string",
            "format": "date"
          },
          "eventStatus": {
            "description": "Event Status",
            "type": "integer"
          },
          "usage": {
            "description": "Bandwidth Usage",
            "type": "integer"
          }
        }
      },
      "Source": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pinned": {
            "type": "boolean"
          },
          "sourceTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "sourceUrl": {
            "type": "string"
          },
          "pinnedTime": {
            "type": "string"
          },
          "sourceByUser": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "Source.Post": {
        "description": "Class Source",
        "required": [
          "name",
          "sourceUrl",
          "sourceTypeId"
        ],
        "properties": {
          "name": {
            "description": "Source name",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "sourceUrl": {
            "description": "Source URL",
            "type": "string"
          },
          "sourceTypeId": {
            "description": "Unique identifier of source type",
            "type": "string"
          },
          "username": {
            "description": "User name",
            "type": "string"
          },
          "password": {
            "description": "Password",
            "type": "string"
          },
          "repository": {
            "description": "Repository name",
            "type": "string"
          }
        }
      },
      "Source.Put": {
        "description": "Class Source",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Source name",
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "OtpRecipient": {
        "description": "Class OtpRecipient",
        "required": [
          "email",
          "type",
          "userId"
        ],
        "properties": {
          "userId": {
            "description": "User ID for Recipient",
            "type": "string"
          },
          "type": {
            "description": "Type for Recipient. TO,CC,BCC",
            "type": "integer"
          },
          "user": {
            "description": "User entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "email": {
            "description": "Recipient email address",
            "type": "string"
          },
          "isDistributionList": {
            "description": "Whether the recipient is a distribution list",
            "type": "boolean"
          },
          "links": {
            "type": "string"
          },
          "mobileNumber": {
            "description": "Mobile number",
            "type": "string"
          }
        }
      },
      "OtpRecipient.Post": {
        "description": "Class OtpRecipient",
        "required": [
          "userId"
        ],
        "properties": {
          "userId": {
            "description": "User ID for Recipient",
            "type": "integer"
          },
          "type": {
            "description": "Type for Recipient.0=TO, 1=CC, 2=BCC",
            "type": "integer",
            "enum": [
              "0",
              "1",
              "2"
            ]
          },
          "read": {
            "description": "True for read, false for email not read",
            "type": "boolean"
          }
        }
      },
      "OtpRecipient.Put": {
        "description": "Class OtpRecipient",
        "required": [
          "userId"
        ],
        "properties": {
          "userId": {
            "description": "User ID for Recipient",
            "type": "integer"
          }
        }
      },
      "ClientNew": {
        "description": "Class ClientNew",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "description": "Unique Client identifier",
            "type": "string"
          },
          "name": {
            "description": "Client name",
            "type": "string"
          },
          "description": {
            "description": "Client description",
            "type": "string"
          },
          "redirectUri": {
            "description": "Redirect URL of this client",
            "type": "string"
          },
          "scope": {
            "description": "API entities which this client can access",
            "type": "string"
          },
          "flag": {
            "description": "Flags for Client. e.g. NO_CONSENT:1, DISABLED:2, HIDDEN:4, NO_EXPIRY_TOKEN :8",
            "type": "integer"
          },
          "flow": {
            "description": "Oauth flow for this client.\n                        e.g. AUTH_CODE:1, CLIENT_CREDENTIAL:2, SIGNATURE:4, REFRESH_TOKEN:8",
            "type": "integer"
          },
          "signatureKey": {
            "description": "Signature Key for client",
            "type": "string"
          },
          "accessTokenLifetime": {
            "description": "Life time for access token of client in hours. e.g. 5=5 hours",
            "type": "integer"
          },
          "refreshTokenLifetime": {
            "description": "Life time for refresh token of client in hours",
            "type": "integer"
          },
          "whiteList": {
            "description": "List of applications on the device that the client can call out to",
            "type": "string"
          },
          "askPin": {
            "description": "Whether PIN should be requested of user using this client",
            "type": "integer"
          },
          "pinTimeout": {
            "description": "Time out for pin of client in minutes",
            "type": "integer"
          },
          "maxPinAttempts": {
            "description": "Max attempts that user can try to enter PIN before wipe occurs",
            "type": "integer"
          },
          "type": {
            "description": "Client Type. e.g. ACCELLION:1, MOBILE:2, OUTLOOK:4, SYNC:8, IMPORTED:32",
            "type": "integer"
          },
          "touchId": {
            "description": "Indicates whether touch Id is enabled",
            "type": "boolean"
          },
          "clipboardEnabled": {
            "description": "Indicates whether clipboard is enabled",
            "type": "boolean"
          },
          "autoUpdate": {
            "description": "Indicates whether auto update is enabled",
            "type": "boolean"
          },
          "installer": {
            "description": "Get the installer information",
            "type": "string"
          },
          "emailMatch": {
            "description": "Indicates whether external email match with kw email",
            "type": "boolean"
          },
          "minVersion": {
            "description": "Minimum API version of client",
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "clientSecret": {
            "description": "Client Secret",
            "type": "string"
          }
        }
      },
      "ClientNew.Post": {
        "description": "Class ClientNew",
        "required": [
          "description",
          "name",
          "redirectUri",
          "scope"
        ],
        "properties": {
          "name": {
            "description": "Client name",
            "type": "string"
          },
          "description": {
            "description": "Client description",
            "type": "string"
          },
          "redirectUri": {
            "description": "Where the server send the code that client can redeem access token.\n                        e.g. https://HOST/rest/callback.html",
            "type": "string"
          },
          "scope": {
            "description": "API entities which this client can access",
            "type": "string"
          },
          "signatureKey": {
            "description": "Signature Key for client",
            "type": "string"
          },
          "accessTokenLifetime": {
            "description": "Life time for access token of client in hours. e.g. 5=5 hours",
            "type": "integer"
          },
          "refreshTokenLifetime": {
            "description": "Life time for refresh token of client in hours",
            "type": "integer"
          }
        }
      },
      "ClientNew.Put": {
        "description": "Class ClientNew",
        "required": [
          "description",
          "name",
          "redirectUri",
          "scope"
        ],
        "properties": {
          "name": {
            "description": "Client name",
            "type": "string"
          },
          "description": {
            "description": "Client description",
            "type": "string"
          },
          "redirectUri": {
            "description": "Where the server send the code that client can redeem access token.\n                        e.g. https://HOST/rest/callback.html",
            "type": "string"
          },
          "scope": {
            "description": "API entities which this client can access",
            "type": "string"
          },
          "signatureKey": {
            "description": "Signature Key for client",
            "type": "string"
          },
          "accessTokenLifetime": {
            "description": "Life time for access token of client in hours. e.g. 5=5 hours",
            "type": "integer"
          },
          "refreshTokenLifetime": {
            "description": "Life time for refresh token of client in hours",
            "type": "integer"
          }
        }
      },
      "EmailEcItemJob": {
        "properties": {
          "id": {
            "description": "Job identifier",
            "type": "string"
          },
          "status": {
            "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
            "type": "string"
          },
          "errors": {
            "description": "The list of errors occurred during job processing",
            "type": "string"
          },
          "objectIds": {
            "type": "string"
          }
        }
      },
      "Search": {
        "description": "Class Search",
        "required": [
          "emails",
          "files",
          "folders",
          "id"
        ],
        "properties": {
          "files": {
            "description": "List of files",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "folders": {
            "description": "List of folders",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Folder"
            }
          },
          "emails": {
            "description": "List of emails",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "metadata": {
            "description": "Total files, folders, and emails count",
            "$ref": "#/components/schemas/SearchMetadata"
          },
          "id": {
            "description": "Unique search string",
            "type": "string"
          },
          "fullTextSearch": {
            "description": "Whether full text search is enabled",
            "type": "boolean"
          }
        }
      },
      "MemberGroup": {
        "description": "Class MemberGroup",
        "required": [
          "groupId",
          "objectId",
          "roleId"
        ],
        "properties": {
          "objectId": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "roleId": {
            "description": "Unique identifier of role",
            "type": "integer"
          },
          "group": {
            "description": "LdapGroup entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/LdapGroup"
          },
          "role": {
            "description": "Role entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Role"
          },
          "inheritRoleId": {
            "description": "Role Id inherit from parent (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "integer"
          },
          "allowedFolderRoleId": {
            "description": "Allowed Folder Role Id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "string"
          },
          "groupId": {
            "description": "Unique identifier of group",
            "type": "integer"
          },
          "user": {
            "description": "User entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "MemberGroup.Post": {
        "description": "Class MemberGroup",
        "required": [
          "groupId",
          "roleId"
        ],
        "properties": {
          "roleId": {
            "description": "Unique identifier of role",
            "type": "integer"
          },
          "groupId": {
            "description": "Unique identifier of group",
            "type": "integer"
          }
        }
      },
      "MemberGroup.Put": {
        "description": "Class MemberGroup",
        "required": [
          "roleId"
        ],
        "properties": {
          "roleId": {
            "description": "Unique identifier of role",
            "type": "integer"
          },
          "notifyFileAdded": {
            "type": "boolean"
          }
        }
      },
      "MailLink": {
        "description": "Class MailLink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "MailLink.Post": {
        "description": "Class MailLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "MailLink.Put": {
        "description": "Class MailLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "ActivityAdmin": {
        "description": "Class Activity",
        "required": [
          "event",
          "id",
          "message",
          "type",
          "user"
        ],
        "properties": {
          "created": {
            "description": "Activity creation date",
            "type": "string",
            "format": "date"
          },
          "data": {
            "description": "Contains information about affected entities",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "permissions": {
            "description": "List of action allowed for user on Object in activity",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "event": {
            "description": "Activity event name",
            "type": "string"
          },
          "id": {
            "description": "Unique Activity identifier",
            "type": "integer"
          },
          "message": {
            "description": "User-friendly message",
            "type": "string"
          },
          "type": {
            "description": "Activity type",
            "type": "string"
          },
          "user": {
            "description": "Direct user's info",
            "type": "string"
          },
          "successful": {
            "description": "Successful or failed",
            "type": "integer"
          },
          "object": {
            "description": "Contains information about the effected file or folder",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "directUser": {
            "description": "Direct user",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inDirectUsers": {
            "description": "Direct user",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserBasicInfo": {
        "required": [
          "email",
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of the user",
            "type": "string"
          },
          "name": {
            "description": "The name of the user",
            "type": "string"
          },
          "email": {
            "description": "The user's email",
            "type": "string"
          },
          "profileIcon": {
            "description": "User profile icon link",
            "type": "string"
          }
        }
      },
      "UserBasicInfo.Post": {
        "required": [
          "email"
        ],
        "properties": {
          "name": {
            "description": "The name of the user",
            "type": "string"
          },
          "email": {
            "description": "The user's email",
            "type": "string"
          }
        }
      },
      "UserBasicInfo.Put": {
        "properties": {
          "name": {
            "description": "The name of the user",
            "type": "string"
          }
        }
      },
      "MoveEcItemJob": {
        "properties": {
          "id": {
            "description": "Job identifier",
            "type": "string"
          },
          "status": {
            "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
            "type": "string"
          },
          "errors": {
            "description": "The list of errors occurred during job processing",
            "type": "string"
          },
          "objectIds": {
            "type": "string"
          }
        }
      },
      "UploadChunk.Post": {
        "description": "Class FileUpload",
        "properties": {
          "index": {
            "type": "integer"
          },
          "compressionMode": {
            "type": "string"
          },
          "compressionSize": {
            "type": "integer"
          },
          "originalSize": {
            "type": "integer"
          },
          "content": {
            "type": "string"
          },
          "lastChunk": {
            "type": "integer"
          }
        }
      },
      "UploadChunk.Put": {
        "description": "Class FileUpload",
        "properties": {
          "index": {
            "type": "integer"
          },
          "lastChunk": {
            "type": "integer"
          }
        }
      },
      "Bandwidth": {
        "description": "Class Bandwidth",
        "properties": {
          "dateTime": {
            "description": "Date",
            "type": "string",
            "format": "date"
          },
          "eventStatus": {
            "description": "Event Status",
            "type": "integer"
          },
          "usage": {
            "description": "Bandwidth Usage",
            "type": "integer"
          }
        }
      },
      "FileAddedNotificationJob": {
        "properties": {
          "id": {
            "description": "Job identifier",
            "type": "string"
          },
          "status": {
            "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
            "type": "string"
          },
          "errors": {
            "description": "The list of errors occurred during job processing",
            "type": "string"
          },
          "objectIds": {
            "type": "string"
          }
        }
      },
      "AcfsConfig": {
        "description": "Class AcfsConfig",
        "properties": {
          "active": {
            "description": "Is upload server active or not",
            "type": "integer"
          },
          "uploadChunkMax": {
            "description": "Upload chunk max size",
            "type": "integer"
          }
        }
      },
      "MediaType": {
        "description": "Class MediaType",
        "properties": {
          "id": {
            "description": "Unique identifier of Media Type",
            "type": "integer"
          },
          "mediaType": {
            "description": "Media Type",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactItem"
            }
          },
          "name": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "modified": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "lastContactDate": {
            "type": "string"
          }
        }
      },
      "Contact.Post": {
        "description": "Class Contact",
        "required": [
          "items",
          "name"
        ],
        "properties": {
          "name": {
            "description": "Contact name",
            "type": "string"
          },
          "items": {
            "description": "List of emails contained by Contact",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactItem.Post"
            }
          }
        }
      },
      "Contact.Put": {
        "description": "Class Contact",
        "required": [
          "items",
          "name"
        ],
        "properties": {
          "name": {
            "description": "Contact name",
            "type": "string"
          },
          "items": {
            "description": "List of emails contained by Contact",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactItem.Post"
            }
          }
        }
      },
      "MediaTypeItem": {
        "description": "Class MediaTypeItem",
        "required": [
          "id",
          "mediaType"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of Media Type",
            "type": "integer"
          },
          "mediaType": {
            "description": "Media Type",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "BaseObject": {
        "description": "Class Object",
        "required": [
          "id",
          "name",
          "parentId",
          "userId"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "MemberBase": {
        "description": "Class MemberBase",
        "required": [
          "objectId",
          "roleId"
        ],
        "properties": {
          "objectId": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "roleId": {
            "description": "Unique identifier of role",
            "type": "integer"
          },
          "user": {
            "description": "User entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "group": {
            "description": "LdapGroup entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/LdapGroup"
          },
          "role": {
            "description": "Role entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Role"
          },
          "inheritRoleId": {
            "description": "Role Id inherit from parent (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "integer"
          },
          "allowedFolderRoleId": {
            "description": "Allowed Folder Role Id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "string"
          }
        }
      },
      "MemberBase.Post": {
        "description": "Class MemberBase",
        "required": [
          "roleId"
        ],
        "properties": {
          "roleId": {
            "description": "Unique identifier of role",
            "type": "integer"
          }
        }
      },
      "MemberBase.Put": {
        "description": "Class MemberBase",
        "required": [
          "roleId"
        ],
        "properties": {
          "roleId": {
            "description": "Unique identifier of role",
            "type": "integer"
          },
          "notifyFileAdded": {
            "type": "boolean"
          }
        }
      },
      "RefreshToken": {
        "description": "Class RefreshToken",
        "required": [
          "refreshToken",
          "scope"
        ],
        "properties": {
          "userId": {
            "description": "Unique identifier of User",
            "type": "integer"
          },
          "expire": {
            "description": "Token expiry date",
            "type": "string",
            "format": "date-time"
          },
          "scope": {
            "description": "Scope",
            "type": "string"
          },
          "refreshToken": {
            "description": "Refresh Token",
            "type": "string"
          }
        }
      },
      "PasswordPolicy": {
        "description": "Class PasswordPolicy",
        "required": [
          "allowAutoFill",
          "enabled",
          "minCharacters",
          "minDigits",
          "minLowerCharacters",
          "minSpecialCharacters",
          "minUpperCharacters"
        ],
        "properties": {
          "allowAutoFill": {
            "description": "Return whether browsers are allowed to fill in password automatically.",
            "type": "boolean"
          },
          "enabled": {
            "description": "Return whether password policy is enabled.",
            "type": "boolean"
          },
          "minCharacters": {
            "description": "Minimum length of password.",
            "type": "integer"
          },
          "minDigits": {
            "description": "Minimum numeric characters.",
            "type": "integer"
          },
          "minLowerCharacters": {
            "description": "Minimum lower case alphabets.",
            "type": "integer"
          },
          "minSpecialCharacters": {
            "description": "Minimum special characters.",
            "type": "integer"
          },
          "minUpperCharacters": {
            "description": "Minimum upper case alphabets.",
            "type": "integer"
          }
        }
      },
      "ConnectorOAuthLink": {
        "description": "Class ConnectorOAuthLink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "ConnectorOAuthLink.Post": {
        "description": "Class ConnectorOAuthLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "ConnectorOAuthLink.Put": {
        "description": "Class ConnectorOAuthLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "The size of the file in bytes."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the object has been deleted."
          },
          "created": {
            "type": "string",
            "description": "The date and time when the object was created."
          },
          "fingerprints": {
            "type": "array",
            "description": "List of fingerprints associated with the file.",
            "items": {
              "$ref": "#/components/schemas/Fingerprint"
            }
          },
          "vendorDocId": {
            "type": "string",
            "description": "Vendor document ID associated with the object."
          },
          "mime": {
            "type": "string",
            "description": "The MIME type of the file."
          },
          "originalFileId": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the original file if this one is a copy."
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier (UUID) of the parent folder."
          },
          "source": {
            "type": "integer",
            "format": "int32",
            "description": "ID representing the source of the object (1 - Salesforce, 2 - Teams)."
          },
          "path": {
            "type": "string",
            "description": "Path to the object in the hierarchy."
          },
          "vendorDocName": {
            "type": "string",
            "description": "Name of the vendor document associated with the object."
          },
          "permissions": {
            "description": "List of permissions associated with the object.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "sharedTime": {
            "type": "string",
            "description": "The date and time when the file was shared."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier (UUID) who created the file."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          },
          "wopiapp": {
            "description": "WOPI-related information for the file when used in a mobile app.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MobileInfo"
              }
            ]
          },
          "sharedBy": {
            "description": "The user who shared the file.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "tags": {
            "description": "List of tags associated with the file.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "clientCreated": {
            "type": "string",
            "description": "The date and time when the file was created on the client side."
          },
          "pushedObject": {
            "description": "Details about the pushed object, if any.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PushedObject"
              }
            ]
          },
          "lockUser": {
            "description": "The user who locked the file.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "overriddenExpire": {
            "type": "boolean",
            "description": "Indicates whether the expiration date for the file has been overridden."
          },
          "dlpStatus": {
            "type": "string",
            "description": "Indicates the file version's availability status based on Data Loss Prevention (DLP) settings and whether it has been scanned or detected as infected."
          },
          "avStatus": {
            "type": "string",
            "description": "Indicates the file version's availability status based on Antivirus (AV) settings and whether it has been scanned or detected as infected."
          },
          "permalink": {
            "type": "string",
            "description": "Permanent URL link to access the file."
          },
          "locked": {
            "type": "boolean",
            "description": "Indicates if the file is locked."
          },
          "versionsCount": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of versions for the file."
          },
          "clientModified": {
            "type": "string",
            "description": "The date and time when the file was last modified on the client side."
          },
          "permDeleted": {
            "type": "boolean",
            "description": "Indicates whether the object has been permanently deleted."
          },
          "members": {
            "description": "List of members who have access to the object.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "pushed": {
            "type": "boolean",
            "description": "Indicates if the file has been pushed to a mobile app."
          },
          "secure": {
            "type": "boolean",
            "description": "Indicates whether the folder or the parent folder containing the file is marked as secure."
          },
          "adminQuarantineStatus": {
            "type": "string",
            "description": "Indicates the file version's availability status based on the administrator's quarantine status."
          },
          "lastModifiedBy": {
            "description": "The user who last modified the file.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "fingerprint": {
            "type": "string",
            "description": "A unique hash identifying the file."
          },
          "safeEdit": {
            "description": "Information regarding the file's SafeEdit settings.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SafeEdit"
              }
            ]
          },
          "pathIds": {
            "type": "string",
            "format": "uuid",
            "description": "A list of IDs representing the path of the file within the folder hierarchy."
          },
          "modified": {
            "type": "string",
            "description": "The date and time when the object was last modified."
          },
          "type": {
            "type": "string",
            "description": "Type of the object (e.g., f - file, d - folder)"
          },
          "expire": {
            "type": "string",
            "description": "Expiration timestamp of the object, if applicable."
          },
          "creator": {
            "description": "Details of the user who created the object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier (UUID) of the file."
          },
          "isShared": {
            "type": "boolean",
            "description": "Indicates if the file is shared with other users."
          },
          "modifier": {
            "description": "The user who last modified the file.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "parent": {
            "description": "The parent folder of the file.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Folder"
              }
            ]
          }
        }
      },
      "File.Post": {
        "description": "Class File",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          }
        }
      },
      "File.Put": {
        "description": "Class File",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          },
          "expire": {
            "description": "The file expiration date.",
            "type": "string"
          },
          "replace": {
            "description": "Replace the file if file with same name exists",
            "type": "string"
          }
        }
      },
      "ECPreviewStatus": {
        "description": "Class ECPreviewStatus",
        "required": [
          "eCObjectUUId",
          "transactionId"
        ],
        "properties": {
          "transactionId": {
            "description": "Transaction Id",
            "type": "string"
          },
          "eCObjectUUId": {
            "description": "Repositories Gateway Object Id",
            "type": "string"
          }
        }
      },
      "AvailableLdapGroup": {
        "description": "Class LdapGroup",
        "properties": {
          "name": {
            "description": "LDAP group name",
            "type": "string"
          },
          "dn": {
            "description": "Domain name",
            "type": "string"
          }
        }
      },
      "CommentLink": {
        "description": "Class CommentLink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "CommentLink.Post": {
        "description": "Class CommentLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "CommentLink.Put": {
        "description": "Class CommentLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "PasswordResetLink": {
        "description": "Class RequestFileLink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "PasswordResetLink.Post": {
        "description": "Class RequestFileLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "PasswordResetLink.Put": {
        "description": "Class RequestFileLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "GroupNotification": {
        "description": "Class Notification",
        "properties": {
          "objectId": {
            "description": "Id of folder included in Notification",
            "type": "string"
          },
          "fileAdded": {
            "description": "Number of files which are added to the Notification",
            "type": "integer"
          },
          "commentAdded": {
            "description": "Number of comments which are added to the Notification",
            "type": "integer"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "GroupNotification.Post": {
        "description": "Class Notification",
        "properties": {
          "fileAdded": {
            "description": "Number of files which are added to the Notification",
            "type": "integer"
          },
          "commentAdded": {
            "description": "Number of comments which are added to the Notification",
            "type": "integer"
          }
        }
      },
      "GroupNotification.Put": {
        "description": "Class Notification",
        "properties": {
          "fileAdded": {
            "description": "Number of files which are added to the Notification",
            "type": "integer"
          },
          "commentAdded": {
            "description": "Number of comments which are added to the Notification",
            "type": "integer"
          }
        }
      },
      "EmailFile": {
        "description": "Class EmailFile",
        "required": [
          "id",
          "locked",
          "name",
          "parentId",
          "size",
          "type",
          "userId",
          "wopiapp"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "mime": {
            "description": "File MIME type",
            "type": "string"
          },
          "size": {
            "description": "File content size",
            "type": "string"
          },
          "fingerprint": {
            "description": "File content fingerprint",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "locked": {
            "description": "Unique identifier of User who locked a File",
            "type": "integer"
          },
          "lockUser": {
            "description": "User who locked the File (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "clientCreated": {
            "description": "Original created time of the file",
            "type": "string",
            "format": "date"
          },
          "clientModified": {
            "description": "Original Modified time of the file",
            "type": "string",
            "format": "date"
          },
          "members": {
            "description": "File members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "overriddenExpire": {
            "description": "Indicates that file expire is overridden",
            "type": "boolean"
          },
          "originalFileId": {
            "description": "File identifier from which this file was copied from",
            "type": "string"
          },
          "pushedObject": {
            "description": "Contains pushedObject data if current file was ever pushed (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/PushedObject"
          },
          "avStatus": {
            "description": "Check file availability status according to AV settings and file scanned/infected status",
            "type": "string"
          },
          "dlpStatus": {
            "description": "Check file availability status according to DLP settings and file scanned/infected status",
            "type": "string"
          },
          "adminQuarantineStatus": {
            "description": "Check file availability status according to admin quarantined status",
            "type": "string"
          },
          "storageAvailable": {
            "description": "Boolean value that shows if this file is available on any volume",
            "type": "boolean"
          },
          "lastModifiedBy": {
            "description": "Creator of the latest version (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "wopiapp": {
            "description": "WOPI info for iOS app",
            "type": "boolean"
          },
          "roleId": {
            "description": "Highest role",
            "type": "string"
          },
          "isShared": {
            "description": "File shared",
            "type": "string"
          },
          "fingerprints": {
            "description": "Array of file fingerprint objects",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "description": "Array of tag objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "EmailFile.Post": {
        "description": "Class EmailFile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          }
        }
      },
      "EmailFile.Put": {
        "description": "Class EmailFile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          },
          "expire": {
            "description": "The file expiration date.",
            "type": "string"
          },
          "replace": {
            "description": "Replace the file if file with same name exists",
            "type": "string"
          }
        }
      },
      "FeaturesList": {
        "description": "Class FeaturesList",
        "required": [
          "allowedFolderRoles",
          "folderCreate",
          "storageQuota",
          "sysFolderCreate",
          "sysFolderDefaultQuota",
          "sysFolderMaxCount",
          "sysFolderMaxQuota"
        ],
        "properties": {
          "allowSftp": {
            "description": "Whether we should allow SFTP or not.",
            "type": "boolean"
          },
          "maxStorage": {
            "description": "Max storage in bytes",
            "type": "integer"
          },
          "linkExpiration": {
            "description": "Link expiration date in days",
            "type": "integer"
          },
          "maxLinkExpiration": {
            "description": "Max time period of link expiration in hours",
            "type": "integer"
          },
          "setExpirationLower": {
            "description": "Enable user to set expiration date of the file they are sending",
            "type": "boolean"
          },
          "sendExternal": {
            "description": "Allow user to send files to external users",
            "type": "boolean"
          },
          "acNoAuth": {
            "description": "Allow user to send file to a user without their having to authenticate",
            "type": "boolean"
          },
          "folderCreate": {
            "description": "User can create folder",
            "type": "integer"
          },
          "allowedFolderRoles": {
            "description": "Role options allowed for user profile",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sysFolderCreate": {
            "description": "User can create system quota folder",
            "type": "integer"
          },
          "sysFolderMaxQuota": {
            "description": "Max quota for a system quota folder",
            "type": "integer"
          },
          "sysFolderMaxCount": {
            "description": "Maximum number of system quota folder",
            "type": "integer"
          },
          "sysFolderDefaultQuota": {
            "description": "Default quota for a system quota folder",
            "type": "integer"
          },
          "storageQuota": {
            "description": "User Storage quota",
            "type": "integer"
          },
          "ldapMapping": {
            "description": "LDAP Mapping value to determine the user profile type",
            "type": "string"
          },
          "acVerifyRecipient": {
            "description": "Who can download file via the secure link",
            "type": "boolean"
          },
          "acl": {
            "description": "ACL",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultAcl": {
            "description": "Default ACL",
            "type": "string"
          },
          "mobileSyncItemsLimit": {
            "description": "Maximum files amount allowed to keep in mobile sync list",
            "type": "integer"
          },
          "personalFolder": {
            "description": "User can have personal folder",
            "type": "boolean"
          },
          "blockNewFileTypesDefault": {
            "description": "Block new/unspecified file types default",
            "type": "boolean"
          },
          "excludedFileExtensions": {
            "description": "Get list of excluded file extensions",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileFilterExclusionGroups": {
            "description": "Get list of excluded file groups",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileFilterCustomFileTypes": {
            "description": "Get list of custom file types",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secureMessageBody": {
            "type": "string"
          },
          "secureMessageBodyDefault": {
            "type": "boolean"
          },
          "secureContainerRequired": {
            "type": "boolean"
          },
          "returnReceipt": {
            "type": "string"
          },
          "returnReceiptDefault": {
            "type": "boolean"
          },
          "selfCopy": {
            "type": "string"
          },
          "selfCopyDefault": {
            "type": "boolean"
          },
          "includeFingerprint": {
            "type": "string"
          },
          "includeFingerprintDefault": {
            "type": "boolean"
          },
          "requestFile": {
            "type": "boolean"
          },
          "requestFileAllowViewableFile": {
            "type": "boolean"
          },
          "requestFileUploadAuth": {
            "type": "string"
          },
          "requestFileAuthDefault": {
            "type": "string"
          },
          "requestFileExpiration": {
            "type": "integer"
          },
          "requestFileExpirationUserDecide": {
            "type": "boolean"
          },
          "requestFileExpirationMax": {
            "type": "integer"
          },
          "requestFileUploadLimit": {
            "type": "integer"
          },
          "requestFileUploadLimitUserDecide": {
            "type": "boolean"
          },
          "requestFileUploadsMax": {
            "type": "integer"
          },
          "twoFactorAuth": {
            "type": "string"
          },
          "inactiveExpiration": {
            "type": "integer"
          },
          "userCanReactivate": {
            "type": "string"
          },
          "cleanupInactiveAccount": {
            "type": "boolean"
          },
          "withdrawInactiveAccountFileLinks": {
            "type": "boolean"
          },
          "allowCollaboration": {
            "description": "Whether we should allow Collaboration and Shared Folders or not",
            "type": "boolean"
          },
          "allowLeavingSharedFolder": {
            "description": "Whether we should allow Collaboration and Shared Folders or not",
            "type": "boolean"
          },
          "sendFileLimit": {
            "description": "Upper limit allowed for number of attachments per mail.",
            "type": "integer"
          },
          "remoteWipe": {
            "type": "boolean"
          },
          "deleteUnsharedData": {
            "type": "boolean"
          },
          "retainData": {
            "type": "boolean"
          },
          "retainPermissionToSharedData": {
            "type": "boolean"
          },
          "folderExpirationLimit": {
            "description": "Get profile max folder expiration",
            "type": "integer"
          },
          "fileLifetime": {
            "description": "Get profile max file lifetime",
            "type": "integer"
          }
        }
      },
      "FeaturesList.Post": {
        "description": "Class FeaturesList",
        "properties": {
          "allowSftp": {
            "description": "Whether we should allow SFTP or not.",
            "type": "boolean"
          },
          "maxStorage": {
            "description": "Max storage in bytes",
            "type": "integer"
          },
          "storageQuota": {
            "description": "Maximum storage space that user is entitled to",
            "type": "integer"
          },
          "setExpirationLower": {
            "description": "Allow to modify file secure link expiration",
            "type": "boolean"
          },
          "sendExternal": {
            "description": "Allow sending files to external users",
            "type": "integer"
          },
          "linkExpiration": {
            "description": "Link expiration date in days",
            "type": "integer"
          },
          "ldapMapping": {
            "description": "LDAP Mapping value to determine the user profile type",
            "type": "string"
          },
          "folderCreate": {
            "description": "Allow to create top level folders",
            "type": "integer"
          },
          "sysFolderCreate": {
            "description": "Allow to create system quota folders",
            "type": "integer"
          },
          "sysFolderMaxQuota": {
            "description": "Set the maximum quota for a system folder",
            "type": "integer"
          },
          "sysFolderMaxCount": {
            "description": "Set the maximum number of system folders",
            "type": "integer"
          },
          "sysFolderDefaultQuota": {
            "description": "Set the default quota for a system folder",
            "type": "integer"
          },
          "maxLinkExpiration": {
            "description": "Upper limit allowed for secure link expiration",
            "type": "integer"
          },
          "acNoAuth": {
            "description": "Who can download file via the secure link",
            "type": "boolean"
          },
          "acVerifyRecipient": {
            "description": "Who can download file via the secure link",
            "type": "boolean"
          },
          "excludedFileExtensions": {
            "description": "Set excluded file extensions",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileFilterExclusionGroups": {
            "description": "Set excluded file groups",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileFilterCustomFileTypes": {
            "description": "Set custom file types",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secureMessageBody": {
            "type": "string"
          },
          "secureMessageBodyDefault": {
            "type": "boolean"
          },
          "secureContainerRequired": {
            "type": "boolean"
          },
          "returnReceipt": {
            "type": "string"
          },
          "returnReceiptDefault": {
            "type": "boolean"
          },
          "selfCopy": {
            "type": "string"
          },
          "selfCopyDefault": {
            "type": "boolean"
          },
          "includeFingerprint": {
            "type": "string"
          },
          "includeFingerprintDefault": {
            "type": "boolean"
          },
          "requestFile": {
            "type": "boolean"
          },
          "requestFileAllowViewableFile": {
            "type": "boolean"
          },
          "requestFileUploadAuth": {
            "type": "string"
          },
          "requestFileAuthDefault": {
            "type": "string"
          },
          "requestFileExpiration": {
            "type": "integer"
          },
          "requestFileExpirationUserDecide": {
            "type": "boolean"
          },
          "requestFileExpirationMax": {
            "type": "integer"
          },
          "requestFileUploadLimit": {
            "type": "integer"
          },
          "requestFileUploadLimitUserDecide": {
            "type": "boolean"
          },
          "requestFileUploadsMax": {
            "type": "integer"
          },
          "twoFactorAuth": {
            "type": "string"
          },
          "inactiveExpiration": {
            "type": "integer"
          },
          "userCanReactivate": {
            "type": "string"
          },
          "cleanupInactiveAccount": {
            "type": "boolean"
          },
          "withdrawInactiveAccountFileLinks": {
            "type": "boolean"
          },
          "allowCollaboration": {
            "description": "Whether we should allow Collaboration and Shared Folders or not",
            "type": "boolean"
          },
          "sendFileLimit": {
            "description": "Upper limit allowed for number of attachments per mail.",
            "type": "integer"
          },
          "remoteWipe": {
            "description": "Disallow Collaboration: Wipe remote devices",
            "type": "boolean"
          },
          "deleteUnsharedData": {
            "description": "Disallow Collaboration: Delete all data owned by the user",
            "type": "boolean"
          },
          "retainData": {
            "description": "Disallow Collaboration: retain the data owned by the user",
            "type": "boolean"
          },
          "retainToUser": {
            "description": "Disallow Collaboration: re-assign the data to the following user",
            "type": "string"
          },
          "retainPermissionToSharedData": {
            "description": "Disallow Collaboration: retain all permission to shared data",
            "type": "boolean"
          }
        }
      },
      "FeaturesList.Put": {
        "description": "Class FeaturesList",
        "properties": {
          "allowSftp": {
            "description": "Whether we should allow SFTP or not.",
            "type": "boolean"
          },
          "maxStorage": {
            "description": "Max storage in bytes",
            "type": "integer"
          },
          "storageQuota": {
            "description": "Maximum storage space that user is entitled to",
            "type": "integer"
          },
          "setExpirationLower": {
            "description": "Allow to modify file secure link expiration",
            "type": "boolean"
          },
          "sendExternal": {
            "description": "Allow sending files to external users",
            "type": "integer"
          },
          "linkExpiration": {
            "description": "Link expiration date in days",
            "type": "integer"
          },
          "ldapMapping": {
            "description": "LDAP Mapping value to determine the user profile type",
            "type": "string"
          },
          "folderCreate": {
            "description": "Allow to create top level folders",
            "type": "integer"
          },
          "sysFolderCreate": {
            "description": "Allow to create system quota folders",
            "type": "integer"
          },
          "sysFolderMaxQuota": {
            "description": "Set the maximum quota for a system folder",
            "type": "integer"
          },
          "sysFolderMaxCount": {
            "description": "Set the maximum number of system folders",
            "type": "integer"
          },
          "sysFolderDefaultQuota": {
            "description": "Set the default quota for a system folder",
            "type": "integer"
          },
          "maxLinkExpiration": {
            "description": "Upper limit allowed for secure link expiration",
            "type": "integer"
          },
          "acNoAuth": {
            "description": "Who can download file via the secure link",
            "type": "boolean"
          },
          "acVerifyRecipient": {
            "description": "Who can download file via the secure link",
            "type": "boolean"
          },
          "excludedFileExtensions": {
            "description": "Set excluded file extensions",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileFilterExclusionGroups": {
            "description": "Set excluded file groups",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileFilterCustomFileTypes": {
            "description": "Set custom file types",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secureMessageBody": {
            "type": "string"
          },
          "secureMessageBodyDefault": {
            "type": "boolean"
          },
          "secureContainerRequired": {
            "type": "boolean"
          },
          "returnReceipt": {
            "type": "string"
          },
          "returnReceiptDefault": {
            "type": "boolean"
          },
          "selfCopy": {
            "type": "string"
          },
          "selfCopyDefault": {
            "type": "boolean"
          },
          "includeFingerprint": {
            "type": "string"
          },
          "includeFingerprintDefault": {
            "type": "boolean"
          },
          "requestFile": {
            "type": "boolean"
          },
          "requestFileAllowViewableFile": {
            "type": "boolean"
          },
          "requestFileUploadAuth": {
            "type": "string"
          },
          "requestFileAuthDefault": {
            "type": "string"
          },
          "requestFileExpiration": {
            "type": "integer"
          },
          "requestFileExpirationUserDecide": {
            "type": "boolean"
          },
          "requestFileExpirationMax": {
            "type": "integer"
          },
          "requestFileUploadLimit": {
            "type": "integer"
          },
          "requestFileUploadLimitUserDecide": {
            "type": "boolean"
          },
          "requestFileUploadsMax": {
            "type": "integer"
          },
          "twoFactorAuth": {
            "type": "string"
          },
          "inactiveExpiration": {
            "type": "integer"
          },
          "userCanReactivate": {
            "type": "string"
          },
          "cleanupInactiveAccount": {
            "type": "boolean"
          },
          "withdrawInactiveAccountFileLinks": {
            "type": "boolean"
          },
          "allowCollaboration": {
            "description": "Whether we should allow Collaboration and Shared Folders or not",
            "type": "boolean"
          },
          "sendFileLimit": {
            "description": "Upper limit allowed for number of attachments per mail.",
            "type": "integer"
          },
          "remoteWipe": {
            "description": "Disallow Collaboration: Wipe remote devices",
            "type": "boolean"
          },
          "deleteUnsharedData": {
            "description": "Disallow Collaboration: Delete all data owned by the user",
            "type": "boolean"
          },
          "retainData": {
            "description": "Disallow Collaboration: retain the data owned by the user",
            "type": "boolean"
          },
          "retainToUser": {
            "description": "Disallow Collaboration: re-assign the data to the following user",
            "type": "string"
          },
          "retainPermissionToSharedData": {
            "description": "Disallow Collaboration: retain all permission to shared data",
            "type": "boolean"
          }
        }
      },
      "Language": {
        "description": "Class Language",
        "properties": {
          "id": {
            "description": "Language unique identifier",
            "type": "integer"
          },
          "name": {
            "description": "Language name",
            "type": "string"
          },
          "symbol": {
            "description": "Language symbol",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Tenant": {
        "description": "Class Tenant",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "description": "Tenant unique identifier",
            "type": "integer"
          },
          "name": {
            "description": "Tenant name",
            "type": "integer"
          },
          "hostname": {
            "description": "Tenant Hostname",
            "type": "string"
          },
          "created": {
            "description": "Tenant Creation Date",
            "type": "string",
            "format": "date"
          },
          "state": {
            "description": "Status\\State of Tenant",
            "type": "string"
          },
          "customerId": {
            "description": "Customer ID",
            "type": "string"
          },
          "deploymentId": {
            "description": "Deployment ID",
            "type": "string"
          },
          "expires": {
            "description": "Usage Expiry",
            "type": "string",
            "format": "date"
          },
          "storageLimit": {
            "description": "Monthly storage usage limit",
            "type": "integer"
          },
          "bandwidthLimit": {
            "description": "Monthly bandwidth usage limit",
            "type": "integer"
          },
          "primaryAdminEmail": {
            "description": "Primary admin email ID",
            "type": "string"
          },
          "licensedUsersCount": {
            "description": "Number of licensed users",
            "type": "integer"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Tenant.Put": {
        "description": "Class Tenant",
        "properties": {
          "state": {
            "description": "Status\\State of Tenant",
            "type": "string",
            "enum": [
              "run",
              "suspend"
            ]
          }
        }
      },
      "ECUserSource": {
        "description": "Class ECUserSource",
        "required": [
          "id",
          "name",
          "sourceId",
          "userId"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of Repositories Gateway Source",
            "type": "string"
          },
          "name": {
            "description": "Repositories Gateway source name",
            "type": "string"
          },
          "userId": {
            "description": "The unique identifier of the user.",
            "type": "string"
          },
          "sourceId": {
            "description": "Source Id",
            "type": "string"
          }
        }
      },
      "Client": {
        "description": "Class Client",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "description": "Unique Client identifier",
            "type": "string"
          },
          "name": {
            "description": "Client name",
            "type": "string"
          },
          "description": {
            "description": "Client description",
            "type": "string"
          },
          "redirectUri": {
            "description": "Redirect URL of this client",
            "type": "string"
          },
          "scope": {
            "description": "API entities which this client can access",
            "type": "string"
          },
          "flag": {
            "description": "Flags for Client. e.g. NO_CONSENT:1, DISABLED:2, HIDDEN:4, NO_EXPIRY_TOKEN :8",
            "type": "integer"
          },
          "flow": {
            "description": "Oauth flow for this client.\n                        e.g. AUTH_CODE:1, CLIENT_CREDENTIAL:2, SIGNATURE:4, REFRESH_TOKEN:8",
            "type": "integer"
          },
          "signatureKey": {
            "description": "Signature Key for client",
            "type": "string"
          },
          "accessTokenLifetime": {
            "description": "Life time for access token of client in hours. e.g. 5=5 hours",
            "type": "integer"
          },
          "refreshTokenLifetime": {
            "description": "Life time for refresh token of client in hours",
            "type": "integer"
          },
          "whiteList": {
            "description": "List of applications on the device that the client can call out to",
            "type": "string"
          },
          "askPin": {
            "description": "Whether PIN should be requested of user using this client",
            "type": "integer"
          },
          "pinTimeout": {
            "description": "Time out for pin of client in minutes",
            "type": "integer"
          },
          "maxPinAttempts": {
            "description": "Max attempts that user can try to enter PIN before wipe occurs",
            "type": "integer"
          },
          "type": {
            "description": "Client Type. e.g. ACCELLION:1, MOBILE:2, OUTLOOK:4, SYNC:8, IMPORTED:32",
            "type": "integer"
          },
          "touchId": {
            "description": "Indicates whether touch Id is enabled",
            "type": "boolean"
          },
          "clipboardEnabled": {
            "description": "Indicates whether clipboard is enabled",
            "type": "boolean"
          },
          "autoUpdate": {
            "description": "Indicates whether auto update is enabled",
            "type": "boolean"
          },
          "installer": {
            "description": "Get the installer information",
            "type": "string"
          },
          "emailMatch": {
            "description": "Indicates whether external email match with kw email",
            "type": "boolean"
          },
          "minVersion": {
            "description": "Minimum API version of client",
            "type": "integer"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Client.Post": {
        "description": "Class Client",
        "required": [
          "name",
          "description",
          "redirectUri",
          "scope"
        ],
        "properties": {
          "name": {
            "description": "Client name",
            "type": "string"
          },
          "description": {
            "description": "Client description",
            "type": "string"
          },
          "redirectUri": {
            "description": "Where the server send the code that client can redeem access token.\n                        e.g. https://HOST/rest/callback.html",
            "type": "string"
          },
          "scope": {
            "description": "API entities which this client can access",
            "type": "string"
          },
          "signatureKey": {
            "description": "Signature Key for client",
            "type": "string"
          },
          "accessTokenLifetime": {
            "description": "Life time for access token of client in hours. e.g. 5=5 hours",
            "type": "integer"
          },
          "refreshTokenLifetime": {
            "description": "Life time for refresh token of client in hours",
            "type": "integer"
          }
        }
      },
      "Client.Put": {
        "description": "Class Client",
        "required": [
          "name",
          "description",
          "redirectUri",
          "scope"
        ],
        "properties": {
          "name": {
            "description": "Client name",
            "type": "string"
          },
          "description": {
            "description": "Client description",
            "type": "string"
          },
          "redirectUri": {
            "description": "Where the server send the code that client can redeem access token.\n                        e.g. https://HOST/rest/callback.html",
            "type": "string"
          },
          "scope": {
            "description": "API entities which this client can access",
            "type": "string"
          },
          "signatureKey": {
            "description": "Signature Key for client",
            "type": "string"
          },
          "accessTokenLifetime": {
            "description": "Life time for access token of client in hours. e.g. 5=5 hours",
            "type": "integer"
          },
          "refreshTokenLifetime": {
            "description": "Life time for refresh token of client in hours",
            "type": "integer"
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "rank": {
            "type": "integer",
            "format": "int32",
            "description": "Role rank"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Role ID"
          },
          "name": {
            "type": "string",
            "description": "Role name"
          },
          "type": {
            "type": "string",
            "description": "Role type"
          }
        }
      },
      "Favorite": {
        "description": "Class Favorite",
        "required": [
          "id",
          "objectId",
          "userId"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of Favorite",
            "type": "integer"
          },
          "objectId": {
            "description": "Unique identifier of Object",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of User",
            "type": "string"
          },
          "creator": {
            "description": "Creator info (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "object": {
            "description": "Object (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "Favorite.Post": {
        "description": "Class Favorite",
        "required": [
          "objectId"
        ],
        "properties": {
          "objectId": {
            "description": "Unique identifier of Object",
            "type": "integer"
          }
        }
      },
      "Favorite.Put": {
        "description": "Class Favorite",
        "required": [
          "objectId"
        ],
        "properties": {
          "objectId": {
            "description": "Unique identifier of Object",
            "type": "integer"
          }
        }
      },
      "RequestFile": {
        "type": "object",
        "properties": {
          "requestor": {
            "description": "Information about the requestor (user who initiated the request).",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic1"
              }
            ]
          },
          "message": {
            "type": "string",
            "description": "Message or note associated with the request file."
          },
          "expire": {
            "type": "string",
            "description": "The expiration date of the request file."
          },
          "requireAuth": {
            "type": "boolean",
            "description": "Indicates whether authentication is required to access the request file."
          },
          "ref": {
            "type": "string",
            "description": "Reference or identifier for the request file."
          },
          "uploadLink": {
            "type": "string",
            "description": "Link for uploading the request file."
          },
          "config": {
            "description": "Configuration details for the request file.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestFileConfig"
              }
            ]
          },
          "remaining": {
            "type": "integer",
            "format": "int32",
            "description": "The number of remaining files or actions."
          },
          "recipient": {
            "description": "Information about the recipient (user to whom the file is sent).",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic1"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of the request file."
          },
          "email": {
            "description": "Details of the email associated with the request file.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Mail2"
              }
            ]
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier for the request file."
          },
          "fileLimit": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of files allowed for this request."
          }
        }
      },
      "RequestFile.Post": {
        "description": "Class RequestFile",
        "required": [
          "to"
        ],
        "properties": {
          "to": {
            "description": "Email recipients.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject": {
            "description": "The subject of the email.",
            "type": "string"
          },
          "body": {
            "description": "The body of the email.",
            "type": "string"
          },
          "expire": {
            "description": "The expiration date for the requestFile link. After this date, the link becomes unusable, though the files' expiry will follow the folder's settings.",
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "description": "The remaining number of uploads allowed. -1 represents unlimited uploads.",
            "type": "integer"
          },
          "requireAuth": {
            "description": "Indicates whether the uploader is required to sign in to upload files.",
            "type": "boolean"
          },
          "actionId": {
            "description": "Specifies the allowed actions for the uploader: 1 for viewing, 2 for downloading.",
            "type": "integer",
            "enum": [
              "1",
              "2"
            ]
          },
          "files": {
            "description": "An array of file IDs that the requester may want to include, and available for uploaders to see or download.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secureBody": {
            "type": "boolean"
          }
        }
      },
      "RequestFile.Put": {
        "description": "Class RequestFile",
        "required": [
          "to"
        ],
        "properties": {
          "to": {
            "description": "Email recipients.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject": {
            "description": "The subject of the email.",
            "type": "string"
          },
          "body": {
            "description": "The body of the email.",
            "type": "string"
          },
          "expire": {
            "description": "The expiration date for the requestFile link. After this date, the link becomes unusable, though the files' expiry will follow the folder's settings.",
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "description": "The remaining number of uploads allowed. -1 represents unlimited uploads.",
            "type": "integer"
          },
          "requireAuth": {
            "description": "Indicates whether the uploader is required to sign in to upload files.",
            "type": "boolean"
          },
          "actionId": {
            "description": "Specifies the allowed actions for the uploader: 1 for viewing, 2 for downloading.",
            "type": "integer",
            "enum": [
              "1",
              "2"
            ]
          },
          "files": {
            "description": "An array of file IDs that the requester may want to include, and available for uploaders to see or download.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secureBody": {
            "type": "boolean"
          }
        }
      },
      "ApprovalRequestLink": {
        "description": "Class MailLink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "ApprovalRequestLink.Post": {
        "description": "Class MailLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "ApprovalRequestLink.Put": {
        "description": "Class MailLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "WopiAccessToken": {
        "properties": {
          "accessToken": {
            "description": "Access token",
            "type": "string"
          },
          "expires": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "WebFormProfile": {
        "type": "object",
        "properties": {
          "webFormId": {
            "type": "string"
          },
          "profileId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NoteFile": {
        "description": "Class NoteFile",
        "required": [
          "id",
          "locked",
          "name",
          "parentId",
          "size",
          "type",
          "userId",
          "wopiapp"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "mime": {
            "description": "File MIME type",
            "type": "string"
          },
          "size": {
            "description": "File content size",
            "type": "string"
          },
          "fingerprint": {
            "description": "File content fingerprint",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "locked": {
            "description": "Unique identifier of User who locked a File",
            "type": "integer"
          },
          "lockUser": {
            "description": "User who locked the File (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "clientCreated": {
            "description": "Original created time of the file",
            "type": "string",
            "format": "date"
          },
          "clientModified": {
            "description": "Original Modified time of the file",
            "type": "string",
            "format": "date"
          },
          "members": {
            "description": "File members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "overriddenExpire": {
            "description": "Indicates that file expire is overridden",
            "type": "boolean"
          },
          "originalFileId": {
            "description": "File identifier from which this file was copied from",
            "type": "string"
          },
          "pushedObject": {
            "description": "Contains pushedObject data if current file was ever pushed (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/PushedObject"
          },
          "avStatus": {
            "description": "Check file availability status according to AV settings and file scanned/infected status",
            "type": "string"
          },
          "dlpStatus": {
            "description": "Check file availability status according to DLP settings and file scanned/infected status",
            "type": "string"
          },
          "adminQuarantineStatus": {
            "description": "Check file availability status according to admin quarantined status",
            "type": "string"
          },
          "storageAvailable": {
            "description": "Boolean value that shows if this file is available on any volume",
            "type": "boolean"
          },
          "lastModifiedBy": {
            "description": "Creator of the latest version (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "wopiapp": {
            "description": "WOPI info for iOS app",
            "type": "boolean"
          },
          "roleId": {
            "description": "Highest role",
            "type": "string"
          },
          "isShared": {
            "description": "File shared",
            "type": "string"
          },
          "fingerprints": {
            "description": "Array of file fingerprint objects",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "description": "Array of tag objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "NoteFile.Post": {
        "description": "Class NoteFile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          }
        }
      },
      "NoteFile.Put": {
        "description": "Class NoteFile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          },
          "expire": {
            "description": "The file expiration date.",
            "type": "string"
          },
          "replace": {
            "description": "Replace the file if file with same name exists",
            "type": "string"
          }
        }
      },
      "Job": {
        "properties": {
          "id": {
            "description": "Job identifier",
            "type": "string"
          },
          "status": {
            "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
            "type": "string"
          },
          "errors": {
            "description": "The list of errors occurred during job processing",
            "type": "string"
          },
          "objectIds": {
            "type": "string"
          }
        }
      },
      "EcmAuth": {
        "description": "Class EcmAuth",
        "properties": {
          "redirect": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          }
        }
      },
      "DistributionList": {
        "description": "Class DistributionList",
        "required": [
          "isDistributionList"
        ],
        "properties": {
          "isDistributionList": {
            "description": "Return true if the email belongs to a distribution list",
            "type": "boolean"
          },
          "members": {
            "description": "Return list of members in the distribution list",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PopulateSftpUsernamesJob": {
        "properties": {
          "id": {
            "description": "Job identifier",
            "type": "string"
          },
          "status": {
            "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
            "type": "string"
          },
          "errors": {
            "description": "The list of errors occurred during job processing",
            "type": "string"
          },
          "objectIds": {
            "type": "string"
          }
        }
      },
      "EmailFormFile": {
        "description": "Class EmailFormFile",
        "required": [
          "id",
          "locked",
          "name",
          "parentId",
          "size",
          "type",
          "userId",
          "wopiapp"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "mime": {
            "description": "File MIME type",
            "type": "string"
          },
          "size": {
            "description": "File content size",
            "type": "string"
          },
          "fingerprint": {
            "description": "File content fingerprint",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "locked": {
            "description": "Unique identifier of User who locked a File",
            "type": "integer"
          },
          "lockUser": {
            "description": "User who locked the File (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "clientCreated": {
            "description": "Original created time of the file",
            "type": "string",
            "format": "date"
          },
          "clientModified": {
            "description": "Original Modified time of the file",
            "type": "string",
            "format": "date"
          },
          "members": {
            "description": "File members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "overriddenExpire": {
            "description": "Indicates that file expire is overridden",
            "type": "boolean"
          },
          "originalFileId": {
            "description": "File identifier from which this file was copied from",
            "type": "string"
          },
          "pushedObject": {
            "description": "Contains pushedObject data if current file was ever pushed (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/PushedObject"
          },
          "avStatus": {
            "description": "Check file availability status according to AV settings and file scanned/infected status",
            "type": "string"
          },
          "dlpStatus": {
            "description": "Check file availability status according to DLP settings and file scanned/infected status",
            "type": "string"
          },
          "adminQuarantineStatus": {
            "description": "Check file availability status according to admin quarantined status",
            "type": "string"
          },
          "storageAvailable": {
            "description": "Boolean value that shows if this file is available on any volume",
            "type": "boolean"
          },
          "lastModifiedBy": {
            "description": "Creator of the latest version (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/User"
          },
          "wopiapp": {
            "description": "WOPI info for iOS app",
            "type": "boolean"
          },
          "roleId": {
            "description": "Highest role",
            "type": "string"
          },
          "isShared": {
            "description": "File shared",
            "type": "string"
          },
          "fingerprints": {
            "description": "Array of file fingerprint objects",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "description": "Array of tag objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "EmailFormFile.Post": {
        "description": "Class EmailFormFile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          }
        }
      },
      "EmailFormFile.Put": {
        "description": "Class EmailFormFile",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "File name",
            "type": "string"
          },
          "expire": {
            "description": "The file expiration date.",
            "type": "string"
          },
          "replace": {
            "description": "Replace the file if file with same name exists",
            "type": "string"
          }
        }
      },
      "DailyStorage": {
        "description": "Class Storage",
        "properties": {
          "dateTime": {
            "description": "Date",
            "type": "string",
            "format": "date"
          },
          "usage": {
            "description": "Storage Usage",
            "type": "integer"
          }
        }
      },
      "ECSource": {
        "description": "Class ECSource",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of Repositories Gateway Source",
            "type": "string"
          },
          "sourceTypeId": {
            "description": "Unique identifier of Repositories Gateway Source Type",
            "type": "string"
          },
          "basePath": {
            "description": "Repositories Gateway Source basepath",
            "type": "string"
          },
          "url": {
            "description": "Repositories Gateway Source url",
            "type": "string"
          }
        }
      },
      "UserMe": {
        "description": "Class UserMe",
        "required": [
          "basedirId",
          "email",
          "id",
          "mydirId",
          "name",
          "syncdirId"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of the user",
            "type": "string"
          },
          "basedirId": {
            "description": "The unique identifier of the user's root Kiteworks directory.",
            "type": "string"
          },
          "created": {
            "description": "User creation date",
            "type": "string",
            "format": "date"
          },
          "email": {
            "description": "The user's email",
            "type": "string"
          },
          "mydirId": {
            "description": "The unique identifier of the user's mydir system directory.",
            "type": "string"
          },
          "name": {
            "description": "The name of the user",
            "type": "string"
          },
          "syncdirId": {
            "description": "The unique identifier of the user's 'My Folder'.",
            "type": "string"
          },
          "userTypeId": {
            "description": "The unique identifier of the user type (profile).",
            "type": "integer"
          },
          "internal": {
            "description": "Indicates that the user is an internal user",
            "type": "boolean"
          },
          "profileIcon": {
            "description": "User profile icon link",
            "type": "string"
          },
          "extDL": {
            "description": "Indicates that the user is External Distribution List",
            "type": "boolean"
          },
          "metadata": {
            "description": "List of user's metadata",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMetadata"
            }
          },
          "adminRoleId": {
            "description": "The ID of the admin role assigned to the user.",
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "serviceName": {
            "description": "Service name",
            "type": "string"
          }
        }
      },
      "UserMe.Post": {
        "description": "Class UserMe",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "description": "The user's email",
            "type": "string"
          },
          "name": {
            "description": "The name of the user",
            "type": "string"
          },
          "password": {
            "description": "The user's password",
            "type": "string"
          },
          "userTypeId": {
            "description": "The unique identifier of the user type",
            "type": "integer"
          },
          "verified": {
            "description": "Indicates that the user is verified.",
            "type": "boolean"
          },
          "sendNotification": {
            "description": "Indicates whether send notification to user or not",
            "type": "boolean"
          }
        }
      },
      "UserMe.Put": {
        "description": "Class UserMe",
        "properties": {
          "suspended": {
            "description": "Indicates whether the user is suspended. Set to true to suspend the user.",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the user",
            "type": "string"
          },
          "password": {
            "description": "The user's password",
            "type": "string"
          },
          "verified": {
            "description": "Indicates that the user is verified.",
            "type": "boolean"
          },
          "deactivated": {
            "description": "Indicates whether the user is deactivated. Set to true to deactivate the user.",
            "type": "boolean"
          }
        }
      },
      "PasswordSetLink": {
        "description": "Class ObjectLink",
        "properties": {
          "expire": {
            "description": "Expiration date of link",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Entity type ID",
            "type": "integer"
          },
          "entityId": {
            "description": "Entity ID",
            "type": "string"
          },
          "entityTypeName": {
            "description": "Entity type name",
            "type": "string"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "PasswordSetLink.Post": {
        "description": "Class ObjectLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "PasswordSetLink.Put": {
        "description": "Class ObjectLink",
        "properties": {
          "ref": {
            "description": "Shortlink handle. Example:abcdefg12",
            "type": "string"
          },
          "expire": {
            "description": "Expiration date",
            "type": "string",
            "format": "date"
          },
          "entityTypeId": {
            "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
            "type": "string"
          },
          "entityId": {
            "description": "Unique identifier of entity",
            "type": "string"
          },
          "length": {
            "description": "Length of shortlink",
            "type": "string"
          }
        }
      },
      "Timezone": {
        "description": "Class Timezone",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "description": "Timezone unique identifier",
            "type": "integer"
          },
          "name": {
            "description": "Timezone name",
            "type": "string"
          },
          "offset": {
            "description": "Timezone offset in seconds",
            "type": "integer"
          },
          "supportsDST": {
            "description": "Indicates that Timezone supports DST",
            "type": "boolean"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "DliFolder": {
        "description": "Class DliFolder",
        "required": [
          "id",
          "name",
          "parentId",
          "type",
          "userId"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier of object",
            "type": "string"
          },
          "created": {
            "description": "Object creation date",
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "description": "Indicates that object is deleted",
            "type": "boolean"
          },
          "permDeleted": {
            "description": "Indicates that object is permanently deleted",
            "type": "boolean"
          },
          "expire": {
            "description": "Object expiry date",
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "description": "Object modification date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Object name",
            "type": "string"
          },
          "parentId": {
            "description": "Parent Folder identifier",
            "type": "string"
          },
          "userId": {
            "description": "Unique identifier of Object creator",
            "type": "string"
          },
          "parent": {
            "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Folder"
          },
          "permalink": {
            "description": "Object permalink",
            "type": "string"
          },
          "creator": {
            "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/UserBasicInfo"
          },
          "permissions": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "vendorDocId": {
            "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "vendorDocName": {
            "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "source": {
            "type": "integer"
          },
          "links": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "description": {
            "description": "Folder description",
            "type": "string"
          },
          "syncable": {
            "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
            "type": "boolean"
          },
          "fileLifetime": {
            "description": "The file's lifetime in the folder",
            "type": "string"
          },
          "useFolderQuota": {
            "description": "Set to True if folder is a system quota folder or belongs to it",
            "type": "string"
          },
          "members": {
            "description": "Folder members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberBase"
            }
          },
          "secure": {
            "description": "Indicates that Folder is secure. Only top level folders under user's root folder can be set to secure",
            "type": "boolean"
          },
          "isFavorite": {
            "description": "Indicates that Folder is marked as favorite for current user (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "boolean"
          },
          "pushedFilesCount": {
            "description": "Count of pushed files inside folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "integer"
          },
          "path": {
            "description": "Shows folder full path up to folder on which current folder has permissions",
            "type": "string"
          },
          "currentUserRole": {
            "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "$ref": "#/components/schemas/Role"
          },
          "totalFilesCount": {
            "description": "Count of files inside folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "integer"
          },
          "totalFoldersCount": {
            "description": "Count of child folders (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "integer"
          },
          "totalMembersCount": {
            "description": "Count of folder's members (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "integer"
          },
          "isShared": {
            "description": "Indicates that Folder is shared to users/groups (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "boolean"
          },
          "avStatus": {
            "description": "Check folder availability status according to AV settings and folder files scanned/infected status (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "dlpStatus": {
            "description": "Check folder availability status according to DLP settings and folder files scanned/infected status (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
            "type": "string"
          },
          "maxFolderExpiration": {
            "description": "Get profile max folder expiration as a date",
            "type": "string"
          },
          "maxFileLifetime": {
            "description": "Get profile max file lifetime",
            "type": "string"
          }
        }
      },
      "DliFolder.Post": {
        "description": "Class DliFolder",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Folder name",
            "type": "string"
          },
          "description": {
            "description": "Folder description",
            "type": "string"
          },
          "syncable": {
            "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
            "type": "boolean"
          },
          "expire": {
            "description": "The folder expiration date. Applicable to top level folders",
            "type": "string",
            "format": "date"
          },
          "fileLifetime": {
            "description": "The file's lifetime in the folder",
            "type": "integer"
          },
          "secure": {
            "description": "Indicates whether folder is secure. Only top level folders under user's root folder can be set to secure",
            "type": "boolean"
          }
        }
      },
      "DliFolder.Put": {
        "description": "Class DliFolder",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Folder name",
            "type": "string"
          },
          "description": {
            "description": "Folder description",
            "type": "string"
          },
          "syncable": {
            "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
            "type": "boolean"
          },
          "expire": {
            "description": "The folder expiration date. Applicable to top level folders",
            "type": "string",
            "format": "date"
          },
          "fileLifetime": {
            "description": "The file's lifetime in the folder",
            "type": "integer"
          },
          "applyFileLifetimeToFiles": {
            "description": "Apply file lifetime setting to existing files",
            "type": "boolean"
          },
          "applyFileLifetimeToNested": {
            "description": "Apply file lifetime setting to nested folders",
            "type": "boolean"
          },
          "secure": {
            "description": "Indicates whether folder is secure. Only top level folders under user's root folder can be set to secure",
            "type": "boolean"
          }
        }
      },
      "BaseNotification": {
        "description": "Class Notification",
        "properties": {
          "objectId": {
            "description": "Id of folder included in Notification",
            "type": "string"
          },
          "fileAdded": {
            "description": "Number of files which are added to the Notification",
            "type": "integer"
          },
          "commentAdded": {
            "description": "Number of comments which are added to the Notification",
            "type": "integer"
          },
          "links": {
            "type": "string"
          }
        }
      },
      "BaseNotification.Post": {
        "description": "Class Notification",
        "properties": {
          "fileAdded": {
            "description": "Number of files which are added to the Notification",
            "type": "integer"
          },
          "commentAdded": {
            "description": "Number of comments which are added to the Notification",
            "type": "integer"
          }
        }
      },
      "BaseNotification.Put": {
        "description": "Class Notification",
        "properties": {
          "fileAdded": {
            "description": "Number of files which are added to the Notification",
            "type": "integer"
          },
          "commentAdded": {
            "description": "Number of comments which are added to the Notification",
            "type": "integer"
          }
        }
      },
      "UserDemoteToRecipient.Post": {
        "description": "Class UserDemoteToRecipient",
        "properties": {
          "remoteWipe": {
            "description": "Indicates whether to remotely wipe data from both desktop and mobile devices.",
            "type": "boolean"
          },
          "deleteUnsharedData": {
            "description": "Indicates whether data owned by the user should be deleted. This is required and must be set to True if `retainData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainData": {
            "description": "Indicates whether data should be retained and transferred to another user. This is required and must be True if `deleteUnsharedData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainToUser": {
            "description": "The ID of the new owner to whom the data will be transferred, applicable when `retainData` and/or `retainPermissionToSharedData` are set to true.",
            "type": "string"
          },
          "retainPermissionToSharedData": {
            "description": "Indicates whether permissions to shared folder should be retained.",
            "type": "boolean"
          },
          "withdrawRequestFiles": {
            "description": "Indicates whether request files should be withdrawn.",
            "type": "boolean"
          },
          "withdrawFileLinks": {
            "description": "Indicates whether sent files should be withdrawn.",
            "type": "boolean"
          }
        }
      },
      "UserDemoteToRecipient.Put": {
        "description": "Class UserDemoteToRecipient",
        "properties": {
          "remoteWipe": {
            "description": "Indicates whether to remotely wipe data from both desktop and mobile devices.",
            "type": "boolean"
          },
          "deleteUnsharedData": {
            "description": "Indicates whether data owned by the user should be deleted. This is required and must be set to True if `retainData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainData": {
            "description": "Indicates whether data should be retained and transferred to another user. This is required and must be True if `deleteUnsharedData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainToUser": {
            "description": "The ID of the new owner to whom the data will be transferred, applicable when `retainData` and/or `retainPermissionToSharedData` are set to true.",
            "type": "string"
          },
          "retainPermissionToSharedData": {
            "description": "Indicates whether permissions to shared folder should be retained.",
            "type": "boolean"
          },
          "withdrawRequestFiles": {
            "description": "Indicates whether request files should be withdrawn.",
            "type": "boolean"
          },
          "withdrawFileLinks": {
            "description": "Indicates whether sent files should be withdrawn.",
            "type": "boolean"
          }
        }
      },
      "FilePermissions": {
        "description": "Class FilePermissions",
        "properties": {
          "fileId": {
            "description": "Id of file",
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FilePermissions.Post": {
        "description": "Class FilePermissions",
        "properties": {
          "fileId": {
            "description": "Id of file",
            "type": "integer"
          },
          "fileGuid": {
            "description": "Guid of file",
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FilePermissions.Put": {
        "description": "Class FilePermissions",
        "properties": {
          "fileId": {
            "description": "Id of file",
            "type": "integer"
          },
          "fileGuid": {
            "description": "Guid of file",
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProfileMappingChanges": {
        "description": "Class ProfileMappingChanges",
        "required": [
          "impact"
        ],
        "properties": {
          "impact": {
            "description": "Get the User Profile mapping order",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProfileMappingChanges.Post": {
        "description": "Class ProfileMappingChanges",
        "properties": {
          "peek": {
            "description": "Set if we are peeking into the impact",
            "type": "boolean"
          },
          "changes": {
            "description": "policy changes to be tested/applied",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfileMapping"
            }
          }
        }
      },
      "ProfileMappingChanges.Put": {
        "description": "Class ProfileMappingChanges",
        "properties": {
          "peek": {
            "description": "Set if we are peeking into the impact",
            "type": "boolean"
          },
          "changes": {
            "description": "policy changes to be tested/applied",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfileMapping"
            }
          }
        }
      },
      "UserTfaTotpResetSecret.Post": {
        "description": "Class UserTfaTotpResetSecret",
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "description": "The user's password",
            "type": "string"
          },
          "otp": {
            "description": "OTP to verify the new secret",
            "type": "string"
          }
        }
      },
      "UserTfaTotpResetSecret.Put": {
        "description": "Class UserTfaTotpResetSecret",
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "description": "The user's password",
            "type": "string"
          },
          "otp": {
            "description": "OTP to verify the new secret",
            "type": "string"
          }
        }
      },
      "UserDemoteToRestricted.Post": {
        "description": "Class UserDemoteToRestricted",
        "properties": {
          "remoteWipe": {
            "description": "Indicates whether to remotely wipe data from both desktop and mobile devices.",
            "type": "boolean"
          },
          "deleteUnsharedData": {
            "description": "Indicates whether data owned by the user should be deleted. This is required and must be set to True if `retainData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainData": {
            "description": "Indicates whether data should be retained and transferred to another user. This is required and must be True if `deleteUnsharedData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainToUser": {
            "description": "The ID of the new owner to whom the data will be transferred, applicable when `retainData` and/or `retainPermissionToSharedData` are set to true.",
            "type": "string"
          },
          "retainPermissionToSharedData": {
            "description": "Indicates whether permissions to shared folder should be retained.",
            "type": "boolean"
          },
          "withdrawRequestFiles": {
            "description": "Indicates whether request files should be withdrawn.",
            "type": "boolean"
          },
          "withdrawFileLinks": {
            "description": "Indicates whether sent files should be withdrawn.",
            "type": "boolean"
          }
        }
      },
      "UserDemoteToRestricted.Put": {
        "description": "Class UserDemoteToRestricted",
        "properties": {
          "remoteWipe": {
            "description": "Indicates whether to remotely wipe data from both desktop and mobile devices.",
            "type": "boolean"
          },
          "deleteUnsharedData": {
            "description": "Indicates whether data owned by the user should be deleted. This is required and must be set to True if `retainData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainData": {
            "description": "Indicates whether data should be retained and transferred to another user. This is required and must be True if `deleteUnsharedData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainToUser": {
            "description": "The ID of the new owner to whom the data will be transferred, applicable when `retainData` and/or `retainPermissionToSharedData` are set to true.",
            "type": "string"
          },
          "retainPermissionToSharedData": {
            "description": "Indicates whether permissions to shared folder should be retained.",
            "type": "boolean"
          },
          "withdrawRequestFiles": {
            "description": "Indicates whether request files should be withdrawn.",
            "type": "boolean"
          },
          "withdrawFileLinks": {
            "description": "Indicates whether sent files should be withdrawn.",
            "type": "boolean"
          }
        }
      },
      "FolderMove.Post": {
        "description": "Class FolderMove",
        "required": [
          "destinationFolderId"
        ],
        "properties": {
          "destinationFolderId": {
            "description": "Destination Folder unique identifier",
            "type": "string"
          }
        }
      },
      "FolderMove.Put": {
        "description": "Class FolderMove",
        "required": [
          "destinationFolderId"
        ],
        "properties": {
          "destinationFolderId": {
            "description": "Destination Folder unique identifier",
            "type": "string"
          }
        }
      },
      "UserOtp.Post": {
        "description": "Class UserOtpChallenge",
        "required": [
          "username",
          "referral"
        ],
        "properties": {
          "username": {
            "description": "username",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "UserOtp.Put": {
        "description": "Class UserOtpChallenge",
        "required": [
          "username",
          "referral"
        ],
        "properties": {
          "username": {
            "description": "username",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "ProfileMappingsTest": {
        "description": "Class ProfileMappingsTest",
        "properties": {
          "result": {
            "description": "Get profile mapping test results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfileMapping"
            }
          }
        }
      },
      "FileCopyMove.Post": {
        "description": "Class FileCopyMove",
        "required": [
          "destinationFolderId"
        ],
        "properties": {
          "destinationFolderId": {
            "description": "Destination Folder unique identifier. Repositories Gateway folders are also supported.",
            "type": "string"
          },
          "replace": {
            "description": "Replace the file if the same file name exists. Default value is false",
            "type": "boolean"
          }
        }
      },
      "FileCopyMove.Put": {
        "description": "Class FileCopyMove",
        "required": [
          "destinationFolderId"
        ],
        "properties": {
          "destinationFolderId": {
            "description": "Destination Folder unique identifier. Repositories Gateway folders are also supported.",
            "type": "string"
          },
          "replace": {
            "description": "Replace the file if the same file name exists. Default value is false",
            "type": "boolean"
          }
        }
      },
      "UserTfaTotpVerifySecret.Post": {
        "description": "Class UserTfaTotpVerifySecret",
        "required": [
          "otp"
        ],
        "properties": {
          "otp": {
            "description": "OTP",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "UserTfaTotpVerifySecret.Put": {
        "description": "Class UserTfaTotpVerifySecret",
        "required": [
          "otp"
        ],
        "properties": {
          "otp": {
            "description": "OTP",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "UserRequestPasswordReset.Post": {
        "description": "Class UserRequestPasswordReset",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "description": "User's email",
            "type": "string"
          }
        }
      },
      "UserRequestPasswordReset.Put": {
        "description": "Class UserRequestPasswordReset",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "description": "User's email",
            "type": "string"
          }
        }
      },
      "OnPremiseSourceLogin.Post": {
        "description": "Class OnPremiseSourceLogin",
        "required": [
          "login",
          "password"
        ],
        "properties": {
          "login": {
            "description": "Login",
            "type": "string"
          },
          "password": {
            "description": "Password",
            "type": "string"
          }
        }
      },
      "OnPremiseSourceLogin.Put": {
        "description": "Class OnPremiseSourceLogin",
        "required": [
          "login",
          "password"
        ],
        "properties": {
          "login": {
            "description": "Login",
            "type": "string"
          },
          "password": {
            "description": "Password",
            "type": "string"
          }
        }
      },
      "MemberBulk.Post": {
        "description": "Class MemberBulk",
        "required": [
          "roleId"
        ],
        "properties": {
          "notify": {
            "description": "Indicates whether user would like to receive emails when new member is added into folder",
            "type": "boolean",
            "default": true
          },
          "emails": {
            "description": "Member emails",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userIds": {
            "description": "User Ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ldapGroupIds": {
            "description": "Member group ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roleId": {
            "description": "Role id",
            "type": "integer"
          },
          "notifyFileAdded": {
            "type": "boolean"
          }
        }
      },
      "MemberBulk.Put": {
        "description": "Class MemberBulk",
        "required": [
          "roleId"
        ],
        "properties": {
          "notify": {
            "description": "Indicates whether user would like to receive emails when new member is added into folder",
            "type": "boolean",
            "default": true
          },
          "emails": {
            "description": "Member emails",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userIds": {
            "description": "User Ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ldapGroupIds": {
            "description": "Member group ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roleId": {
            "description": "Role id",
            "type": "integer"
          },
          "notifyFileAdded": {
            "type": "boolean"
          }
        }
      },
      "SendfileExternal.Post": {
        "description": "Class SendfileExternal",
        "properties": {
          "to": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bcc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "acl": {
            "type": "string",
            "enum": [
              "verify_recipient",
              "no_auth",
              "otp",
              "internal",
              "anyone_auth",
              "email_otp"
            ]
          },
          "expire": {
            "type": "string",
            "format": "date-time"
          },
          "draft": {
            "type": "boolean"
          },
          "preview": {
            "description": "Indicates that email is a preview email",
            "type": "boolean"
          },
          "watermark": {
            "description": "The watermark on the preview email",
            "type": "string"
          },
          "secureBody": {
            "type": "boolean"
          },
          "selfCopy": {
            "type": "boolean"
          },
          "includeFingerprint": {
            "type": "boolean"
          },
          "parentEmailId": {
            "type": "integer"
          },
          "isSelfReturnReceipt": {
            "type": "boolean"
          },
          "returnReceipts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "description": "Email type",
            "type": "string",
            "enum": [
              "original",
              "resend",
              "forward",
              "reply"
            ]
          },
          "uploading": {
            "description": "Indicates whether upload is still in progress. Prevents sending if is set to true.",
            "type": "boolean"
          },
          "body": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "SendfileExternal.Put": {
        "description": "Class SendfileExternal",
        "properties": {
          "to": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bcc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "updateFid": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "acl": {
            "type": "string",
            "enum": [
              "verify_recipient",
              "no_auth",
              "otp",
              "internal",
              "anyone_auth",
              "email_otp"
            ]
          },
          "expire": {
            "type": "string",
            "format": "date-time"
          },
          "draft": {
            "type": "boolean"
          },
          "preview": {
            "description": "Indicates that email is a preview email",
            "type": "boolean"
          },
          "watermark": {
            "description": "The watermark on the preview email",
            "type": "string"
          },
          "secureBody": {
            "type": "boolean"
          },
          "selfCopy": {
            "type": "boolean"
          },
          "includeFingerprint": {
            "type": "boolean"
          },
          "isSelfReturnReceipt": {
            "type": "boolean"
          },
          "returnReceipts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uploading": {
            "description": "Indicates whether upload is still in progress. Prevents sending if is set to true.",
            "type": "boolean"
          },
          "body": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "AdminRoleGroupPolicyChanges.Post": {
        "description": "Class AdminRoleGroupPolicyChanges",
        "properties": {
          "changes": {
            "description": "policy changes to be applied",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminRoleGroupPolicy"
            }
          }
        }
      },
      "AdminRoleGroupPolicyChanges.Put": {
        "description": "Class AdminRoleGroupPolicyChanges",
        "properties": {
          "changes": {
            "description": "policy changes to be applied",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminRoleGroupPolicy"
            }
          }
        }
      },
      "MigrateUsersCsv.Post": {
        "description": "Class MigrateUsersCsv",
        "properties": {
          "deleteIfExists": {
            "description": "Indicates whether to delete users whose emails match any in the newEmail field.",
            "type": "boolean"
          }
        }
      },
      "MigrateUsersCsv.Put": {
        "description": "Class MigrateUsersCsv",
        "properties": {
          "deleteIfExists": {
            "description": "Indicates whether to delete users whose emails match any in the newEmail field.",
            "type": "boolean"
          }
        }
      },
      "FileInput.Post": {
        "description": "Class FileInput",
        "properties": {
          "clientCreated": {
            "description": "File creation date set from client",
            "type": "string",
            "format": "date"
          },
          "clientModified": {
            "description": "File modify date set from client",
            "type": "string",
            "format": "date"
          },
          "note": {
            "description": "Indicates whether the file is note",
            "type": "boolean"
          }
        }
      },
      "Sendfile.Post": {
        "description": "Class Sendfile",
        "properties": {
          "to": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bcc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "acl": {
            "type": "string",
            "enum": [
              "verify_recipient",
              "no_auth",
              "otp",
              "internal",
              "anyone_auth",
              "email_otp"
            ]
          },
          "expire": {
            "type": "string",
            "format": "date-time"
          },
          "draft": {
            "type": "boolean"
          },
          "preview": {
            "description": "Indicates that email is a preview email",
            "type": "boolean"
          },
          "watermark": {
            "description": "The watermark on the preview email",
            "type": "string"
          },
          "secureBody": {
            "type": "boolean"
          },
          "selfCopy": {
            "type": "boolean"
          },
          "includeFingerprint": {
            "type": "boolean"
          },
          "parentEmailId": {
            "type": "integer"
          },
          "isSelfReturnReceipt": {
            "type": "boolean"
          },
          "returnReceipts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "description": "Email type",
            "type": "string",
            "enum": [
              "original",
              "resend",
              "forward",
              "reply"
            ]
          },
          "uploading": {
            "description": "Indicates whether upload is still in progress. Prevents sending if is set to true.",
            "type": "boolean"
          },
          "body": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "webFormId": {
            "type": "string"
          },
          "webFormFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Sendfile.Put": {
        "description": "Class Sendfile",
        "properties": {
          "to": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bcc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "updateFid": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "acl": {
            "type": "string",
            "enum": [
              "verify_recipient",
              "no_auth",
              "otp",
              "internal",
              "anyone_auth",
              "email_otp"
            ]
          },
          "expire": {
            "type": "string",
            "format": "date-time"
          },
          "draft": {
            "type": "boolean"
          },
          "preview": {
            "description": "Indicates that email is a preview email",
            "type": "boolean"
          },
          "watermark": {
            "description": "The watermark on the preview email",
            "type": "string"
          },
          "secureBody": {
            "type": "boolean"
          },
          "selfCopy": {
            "type": "boolean"
          },
          "includeFingerprint": {
            "type": "boolean"
          },
          "isSelfReturnReceipt": {
            "type": "boolean"
          },
          "returnReceipts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uploading": {
            "description": "Indicates whether upload is still in progress. Prevents sending if is set to true.",
            "type": "boolean"
          },
          "body": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "webFormId": {
            "type": "string"
          },
          "webFormFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EncryptUsername.Post": {
        "description": "Class EncryptUsername",
        "required": [
          "username",
          "clientId",
          "clientSecret"
        ],
        "properties": {
          "username": {
            "description": "username",
            "type": "string"
          },
          "clientId": {
            "description": "client id",
            "type": "string"
          },
          "clientSecret": {
            "description": "client secret",
            "type": "string"
          }
        }
      },
      "EncryptUsername.Put": {
        "description": "Class EncryptUsername",
        "required": [
          "username",
          "clientId",
          "clientSecret"
        ],
        "properties": {
          "username": {
            "description": "username",
            "type": "string"
          },
          "clientId": {
            "description": "client id",
            "type": "string"
          },
          "clientSecret": {
            "description": "client secret",
            "type": "string"
          }
        }
      },
      "SearchMetadata": {
        "properties": {
          "total": {
            "description": "Total items count",
            "type": "integer"
          },
          "totalFilesCount": {
            "description": "Total files count",
            "type": "integer"
          },
          "totalFoldersCount": {
            "description": "Total folders count",
            "type": "integer"
          },
          "totalEmailsCount": {
            "description": "Total emails count",
            "type": "integer"
          }
        }
      },
      "UserPreauth.Post": {
        "description": "Class UserPreauth",
        "required": [
          "username"
        ],
        "properties": {
          "username": {
            "description": "username",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "UserPreauth.Put": {
        "description": "Class UserPreauth",
        "required": [
          "username"
        ],
        "properties": {
          "username": {
            "description": "username",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "RequestFilePermission": {
        "properties": {
          "name": {
            "description": "Action name",
            "type": "string"
          },
          "enabled": {
            "description": "Determines if action is valid",
            "type": "boolean"
          }
        }
      },
      "UserDemoteOptions.Post": {
        "description": "Class UserDemoteOptions",
        "properties": {
          "remoteWipe": {
            "description": "Indicates whether to remotely wipe data from both desktop and mobile devices.",
            "type": "boolean"
          },
          "deleteUnsharedData": {
            "description": "Indicates whether data owned by the user should be deleted. This is required and must be set to True if `retainData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainData": {
            "description": "Indicates whether data should be retained and transferred to another user. This is required and must be True if `deleteUnsharedData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainToUser": {
            "description": "The ID of the new owner to whom the data will be transferred, applicable when `retainData` and/or `retainPermissionToSharedData` are set to true.",
            "type": "string"
          },
          "retainPermissionToSharedData": {
            "description": "Indicates whether permissions to shared folder should be retained.",
            "type": "boolean"
          },
          "withdrawRequestFiles": {
            "description": "Indicates whether request files should be withdrawn.",
            "type": "boolean"
          },
          "withdrawFileLinks": {
            "description": "Indicates whether sent files should be withdrawn.",
            "type": "boolean"
          }
        }
      },
      "UserDemoteOptions.Put": {
        "description": "Class UserDemoteOptions",
        "properties": {
          "remoteWipe": {
            "description": "Indicates whether to remotely wipe data from both desktop and mobile devices.",
            "type": "boolean"
          },
          "deleteUnsharedData": {
            "description": "Indicates whether data owned by the user should be deleted. This is required and must be set to True if `retainData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainData": {
            "description": "Indicates whether data should be retained and transferred to another user. This is required and must be True if `deleteUnsharedData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainToUser": {
            "description": "The ID of the new owner to whom the data will be transferred, applicable when `retainData` and/or `retainPermissionToSharedData` are set to true.",
            "type": "string"
          },
          "retainPermissionToSharedData": {
            "description": "Indicates whether permissions to shared folder should be retained.",
            "type": "boolean"
          },
          "withdrawRequestFiles": {
            "description": "Indicates whether request files should be withdrawn.",
            "type": "boolean"
          },
          "withdrawFileLinks": {
            "description": "Indicates whether sent files should be withdrawn.",
            "type": "boolean"
          }
        }
      },
      "UserRegister.Post": {
        "description": "Class UserRegister",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "description": "User's email",
            "type": "string"
          },
          "password": {
            "description": "Password",
            "type": "string"
          },
          "link": {
            "description": "Ref link",
            "type": "string"
          },
          "activationCode": {
            "description": "activation code",
            "type": "string"
          },
          "redirect": {
            "description": "Special handling for redirect (sharedfiles)",
            "type": "string"
          }
        }
      },
      "UserRegister.Put": {
        "description": "Class UserRegister",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "description": "User's email",
            "type": "string"
          },
          "password": {
            "description": "Password",
            "type": "string"
          },
          "link": {
            "description": "Ref link",
            "type": "string"
          },
          "activationCode": {
            "description": "activation code",
            "type": "string"
          },
          "redirect": {
            "description": "Special handling for redirect (sharedfiles)",
            "type": "string"
          }
        }
      },
      "UserNamePassword.Post": {
        "description": "Class UserNamePassword",
        "properties": {
          "password": {
            "description": "The user's password",
            "type": "string"
          },
          "previousPassword": {
            "description": "The user's previous password",
            "type": "string"
          },
          "name": {
            "description": "The user's name",
            "type": "string"
          }
        }
      },
      "UserNamePassword.Put": {
        "description": "Class UserNamePassword",
        "properties": {
          "password": {
            "description": "The user's password",
            "type": "string"
          },
          "previousPassword": {
            "description": "The user's previous password",
            "type": "string"
          },
          "name": {
            "description": "The user's name",
            "type": "string"
          }
        }
      },
      "ProfileMappingOrder": {
        "description": "Class ProfileMappingOrder",
        "required": [
          "impact",
          "order"
        ],
        "properties": {
          "order": {
            "description": "Get the User Profile mapping order",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "impact": {
            "description": "Get the User Profile mapping order",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProfileMappingOrder.Post": {
        "description": "Class ProfileMappingOrder",
        "required": [
          "order"
        ],
        "properties": {
          "peek": {
            "description": "Set if we are peeking into the impact",
            "type": "boolean"
          },
          "order": {
            "description": "Set the User Profile mapping order",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "ProfileMappingOrder.Put": {
        "description": "Class ProfileMappingOrder",
        "required": [
          "order"
        ],
        "properties": {
          "peek": {
            "description": "Set if we are peeking into the impact",
            "type": "boolean"
          },
          "order": {
            "description": "Set the User Profile mapping order",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "ProfileMapping": {
        "description": "Class ProfileMapping",
        "required": [
          "impact"
        ],
        "properties": {
          "impact": {
            "description": "Get the User Profile mapping order",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "description": "Get the id of the target authentication source",
            "type": "string"
          },
          "name": {
            "description": "Get the name of the target authentication source",
            "type": "string"
          },
          "filter": {
            "description": "Get the filter of the target authentication source",
            "type": "string"
          }
        }
      },
      "ProfileMapping.Post": {
        "description": "Class ProfileMapping",
        "required": [
          "id"
        ],
        "properties": {
          "peek": {
            "description": "Set if we are peeking into the impact",
            "type": "boolean"
          },
          "id": {
            "description": "Specify the id of the target authentication source",
            "type": "string"
          },
          "filter": {
            "description": "Set the filter of the target authentication source",
            "type": "string"
          }
        }
      },
      "ProfileMapping.Put": {
        "description": "Class ProfileMapping",
        "required": [
          "id"
        ],
        "properties": {
          "peek": {
            "description": "Set if we are peeking into the impact",
            "type": "boolean"
          },
          "id": {
            "description": "Specify the id of the target authentication source",
            "type": "string"
          },
          "filter": {
            "description": "Set the filter of the target authentication source",
            "type": "string"
          }
        }
      },
      "EmailCounters": {
        "description": "Class EmailCounters",
        "properties": {
          "draft": {
            "description": "Number of emails in 'draft' bucket",
            "type": "integer"
          },
          "outgoing": {
            "description": "Number of emails in 'outgoing' bucket",
            "type": "integer"
          },
          "outgoingTransferring": {
            "description": "Number of emails in 'outgoing' bucket in transferring state",
            "type": "integer"
          },
          "outgoingTransferringIds": {
            "description": "Number of emails in 'outgoing' bucket in transferring state",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outgoingQueued": {
            "description": "Number of emails in 'outgoing' bucket in queued state",
            "type": "integer"
          },
          "outgoingError": {
            "description": "Number of emails in 'outgoing' bucket in error state",
            "type": "integer"
          },
          "inboxUnread": {
            "description": "Number of unread emails in 'inbox' bucket",
            "type": "integer"
          },
          "trash": {
            "description": "Number of emails in 'trash' bucket",
            "type": "integer"
          }
        }
      },
      "FileZip.Post": {
        "description": "Class FileZip",
        "properties": {
          "fileIds": {
            "description": "List of file IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "folderIds": {
            "description": "List of folder IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FileZip.Put": {
        "description": "Class FileZip",
        "properties": {
          "fileIds": {
            "description": "List of file IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "folderIds": {
            "description": "List of folder IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ActivationCodeSend.Post": {
        "description": "Class ActivationCodeSend",
        "required": [
          "email",
          "referral"
        ],
        "properties": {
          "email": {
            "description": "email",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          },
          "resend": {
            "description": "resend",
            "type": "string"
          }
        }
      },
      "ActivationCodeSend.Put": {
        "description": "Class ActivationCodeSend",
        "required": [
          "email",
          "referral"
        ],
        "properties": {
          "email": {
            "description": "email",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          },
          "resend": {
            "description": "resend",
            "type": "string"
          }
        }
      },
      "TokenExchange.Post": {
        "description": "Class TokenExchange",
        "required": [
          "clientId"
        ],
        "properties": {
          "clientId": {
            "description": "client id",
            "type": "string"
          }
        }
      },
      "TokenExchange.Put": {
        "description": "Class TokenExchange",
        "required": [
          "clientId"
        ],
        "properties": {
          "clientId": {
            "description": "client id",
            "type": "string"
          }
        }
      },
      "SendRequestFile.Post": {
        "description": "Class SendRequestFile",
        "required": [
          "fileIds"
        ],
        "properties": {
          "body": {
            "type": "string"
          },
          "fileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "selfCopy": {
            "type": "boolean"
          }
        }
      },
      "SendRequestFile.Put": {
        "description": "Class SendRequestFile",
        "required": [
          "fileIds"
        ],
        "properties": {
          "body": {
            "type": "string"
          },
          "fileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "selfCopy": {
            "type": "boolean"
          }
        }
      },
      "UserResetPassword.Post": {
        "description": "Class UserResetPassword",
        "required": [
          "link",
          "password"
        ],
        "properties": {
          "link": {
            "description": "The password reset link",
            "type": "string"
          },
          "password": {
            "description": "Password",
            "type": "string"
          }
        }
      },
      "UserResetPassword.Put": {
        "description": "Class UserResetPassword",
        "required": [
          "link",
          "password"
        ],
        "properties": {
          "link": {
            "description": "The password reset link",
            "type": "string"
          },
          "password": {
            "description": "Password",
            "type": "string"
          }
        }
      },
      "RemoteWipe.Post": {
        "description": "Class RemoteWipe",
        "properties": {
          "userId": {
            "description": "Unique identifier of user",
            "type": "integer"
          },
          "clientId": {
            "description": "Unique identifier of client",
            "type": "string"
          },
          "installTagId": {
            "description": "Unique identifier of install tag",
            "type": "string"
          }
        }
      },
      "RemoteWipe.Put": {
        "description": "Class RemoteWipe",
        "properties": {
          "userId": {
            "description": "Unique identifier of user",
            "type": "integer"
          },
          "clientId": {
            "description": "Unique identifier of client",
            "type": "string"
          },
          "installTagId": {
            "description": "Unique identifier of install tag",
            "type": "string"
          }
        }
      },
      "LdapSearchResultUser": {
        "description": "Class LdapSearchResultUser",
        "properties": {
          "email": {
            "description": "User's email",
            "type": "string"
          },
          "displayName": {
            "description": "Users's display name",
            "type": "string"
          }
        }
      },
      "UserAuthCode.Post": {
        "description": "Class UserAuthCode",
        "required": [
          "childClientId"
        ],
        "properties": {
          "childClientId": {
            "description": "Client id of the child client",
            "type": "string"
          }
        }
      },
      "UserAuthCode.Put": {
        "description": "Class UserAuthCode",
        "required": [
          "childClientId"
        ],
        "properties": {
          "childClientId": {
            "description": "Client id of the child client",
            "type": "string"
          }
        }
      },
      "LdapSearchResults": {
        "description": "Class LdapSearchResults",
        "required": [
          "matches"
        ],
        "properties": {
          "matches": {
            "description": "Search matches",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LdapSearchResultUser"
            }
          }
        }
      },
      "UserEmail.Post": {
        "description": "Class UserEmail",
        "required": [
          "oldEmail",
          "newEmail"
        ],
        "properties": {
          "oldEmail": {
            "description": "Email that the user currently has.",
            "type": "string"
          },
          "newEmail": {
            "description": "Email that the user should have after migration.",
            "type": "string"
          }
        }
      },
      "UserEmail.Put": {
        "description": "Class UserEmail",
        "required": [
          "oldEmail",
          "newEmail"
        ],
        "properties": {
          "oldEmail": {
            "description": "Email that the user currently has.",
            "type": "string"
          },
          "newEmail": {
            "description": "Email that the user should have after migration.",
            "type": "string"
          }
        }
      },
      "UserTfa.Post": {
        "description": "Class UserTfa",
        "required": [
          "otp"
        ],
        "properties": {
          "otp": {
            "description": "OTP",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          },
          "rememberDevice": {
            "description": "remember device",
            "type": "boolean"
          }
        }
      },
      "UserTfa.Put": {
        "description": "Class UserTfa",
        "required": [
          "otp"
        ],
        "properties": {
          "otp": {
            "description": "OTP",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          },
          "rememberDevice": {
            "description": "remember device",
            "type": "boolean"
          }
        }
      },
      "TenantSuspend.Post": {
        "description": "Class TenantSuspend",
        "properties": {
          "comment": {
            "description": "Additional comment\\reason",
            "type": "string"
          }
        }
      },
      "TenantSuspend.Put": {
        "description": "Class TenantSuspend",
        "properties": {
          "comment": {
            "description": "Additional comment\\reason",
            "type": "string"
          }
        }
      },
      "OtpRecipientModel": {
        "description": "Class ProfileMapping",
        "properties": {
          "userId": {
            "description": "The otp recipient email",
            "type": "integer"
          },
          "mobileNumber": {
            "description": "Get the mobile number of the otp recipient",
            "type": "string"
          }
        }
      },
      "OtpRecipientModel.Post": {
        "description": "Class ProfileMapping",
        "required": [
          "userId",
          "mobileNumber"
        ],
        "properties": {
          "userId": {
            "description": "Specify the otp recipient's user id",
            "type": "integer"
          },
          "mobileNumber": {
            "description": "Set the filter of the target authentication source",
            "type": "string"
          }
        }
      },
      "OtpRecipientModel.Put": {
        "description": "Class ProfileMapping",
        "required": [
          "userId",
          "mobileNumber"
        ],
        "properties": {
          "userId": {
            "description": "Specify the otp recipient's user id",
            "type": "integer"
          },
          "mobileNumber": {
            "description": "Set the filter of the target authentication source",
            "type": "string"
          }
        }
      },
      "UserPassword.Post": {
        "description": "Class UserPassword",
        "properties": {
          "password": {
            "description": "The user's password",
            "type": "string"
          },
          "previousPassword": {
            "description": "The user's previous password",
            "type": "string"
          }
        }
      },
      "UserPassword.Put": {
        "description": "Class UserPassword",
        "properties": {
          "password": {
            "description": "The user's password",
            "type": "string"
          },
          "previousPassword": {
            "description": "The user's previous password",
            "type": "string"
          }
        }
      },
      "AdminRoleGroupPolicy": {
        "description": "Class AdminRoleGroupPolicy",
        "properties": {
          "id": {
            "description": "Get the id of the policy group",
            "type": "integer"
          },
          "description": {
            "description": "Get the name of the policy group",
            "type": "string"
          },
          "allowed": {
            "description": "Get the policy group is allowed",
            "type": "boolean"
          },
          "grouping": {
            "description": "Get the policy group grouping",
            "type": "string"
          },
          "dependencies": {
            "description": "Get the policy group dependencies",
            "$ref": "#/components/schemas/AdminRoleGroupPolicy"
          }
        }
      },
      "AdminRoleGroupPolicy.Post": {
        "description": "Class AdminRoleGroupPolicy",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "Specify the id of the policy group",
            "type": "integer"
          },
          "allowed": {
            "description": "Set the policy group allowed flag",
            "type": "boolean"
          }
        }
      },
      "AdminRoleGroupPolicy.Put": {
        "description": "Class AdminRoleGroupPolicy",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "Specify the id of the policy group",
            "type": "integer"
          },
          "allowed": {
            "description": "Set the policy group allowed flag",
            "type": "boolean"
          }
        }
      },
      "UserForcedPasswordChange.Post": {
        "description": "Class UserForcedPasswordChange",
        "properties": {
          "password": {
            "description": "The user's password",
            "type": "string"
          },
          "previousPassword": {
            "description": "The user's previous password",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "UserForcedPasswordChange.Put": {
        "description": "Class UserForcedPasswordChange",
        "properties": {
          "password": {
            "description": "The user's password",
            "type": "string"
          },
          "previousPassword": {
            "description": "The user's previous password",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "ProfileMappings": {
        "description": "Class ProfileMappings",
        "properties": {
          "ldap": {
            "description": "Get the ldap policy filters for the user profile",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfileMapping"
            }
          },
          "kiteworks": {
            "description": "Get the kiteworks policy filters for the user profile",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfileMapping"
            }
          },
          "sso": {
            "description": "Get the ldap policy filters for the user profile",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfileMapping"
            }
          }
        }
      },
      "FolderCopy.Post": {
        "description": "Class FolderCopy",
        "required": [
          "destinationFolderId"
        ],
        "properties": {
          "destinationFolderId": {
            "description": "Destination Folder unique identifier",
            "type": "integer"
          }
        }
      },
      "FolderCopy.Put": {
        "description": "Class FolderCopy",
        "required": [
          "destinationFolderId"
        ],
        "properties": {
          "destinationFolderId": {
            "description": "Destination Folder unique identifier",
            "type": "integer"
          }
        }
      },
      "FolderCreate.Post": {
        "description": "Class FolderCreate",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Folder name",
            "type": "string"
          },
          "secure": {
            "description": "Indicates whether folder is secure.\n     * Only top level folders under user's root folder can be set to secure",
            "type": "boolean"
          },
          "isSalesforceRoot": {
            "description": "",
            "type": "boolean"
          },
          "systemFolder": {
            "type": "integer"
          },
          "syncable": {
            "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
            "type": "boolean"
          },
          "expire": {
            "description": "The folder expiration date. Applicable to top level folders",
            "type": "string",
            "format": "date"
          },
          "fileLifetime": {
            "description": "The file's lifetime in the folder",
            "type": "integer"
          },
          "description": {
            "description": "Folder description",
            "type": "string"
          },
          "isFolderUpload": {
            "description": "Indicate whether is folder upload children (for internal use only)",
            "type": "boolean"
          }
        }
      },
      "FolderCreate.Put": {
        "description": "Class FolderCreate",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Folder name",
            "type": "string"
          },
          "secure": {
            "description": "Indicates whether folder is secure.\n     * Only top level folders under user's root folder can be set to secure",
            "type": "boolean"
          },
          "isSalesforceRoot": {
            "description": "",
            "type": "boolean"
          },
          "systemFolder": {
            "type": "integer"
          },
          "syncable": {
            "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
            "type": "boolean"
          },
          "expire": {
            "description": "The folder expiration date. Applicable to top level folders",
            "type": "string",
            "format": "date"
          },
          "fileLifetime": {
            "description": "The file's lifetime in the folder",
            "type": "integer"
          },
          "description": {
            "description": "Folder description",
            "type": "string"
          },
          "isFolderUpload": {
            "description": "Indicate whether is folder upload children (for internal use only)",
            "type": "boolean"
          }
        }
      },
      "ActivationCode.Post": {
        "description": "Class ActivationCode",
        "required": [
          "referral"
        ],
        "properties": {
          "code": {
            "description": "activation code",
            "type": "string"
          },
          "email": {
            "description": "email",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "ActivationCode.Put": {
        "description": "Class ActivationCode",
        "required": [
          "referral"
        ],
        "properties": {
          "code": {
            "description": "activation code",
            "type": "string"
          },
          "email": {
            "description": "email",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "UserLogin.Post": {
        "description": "Class UserLogin",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "description": "The username of the user attempting to log in.",
            "type": "string"
          },
          "password": {
            "description": "The password of the user. It must be kept confidential and securely stored.",
            "type": "string"
          },
          "referral": {
            "description": "The URL that referred the user to this login action.",
            "type": "string"
          }
        }
      },
      "UserLogin.Put": {
        "description": "Class UserLogin",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "description": "The username of the user attempting to log in.",
            "type": "string"
          },
          "password": {
            "description": "The password of the user. It must be kept confidential and securely stored.",
            "type": "string"
          },
          "referral": {
            "description": "The URL that referred the user to this login action.",
            "type": "string"
          }
        }
      },
      "OtpRecipientChanges": {
        "description": "Class ProfileMappingChanges",
        "required": [
          "recipients"
        ],
        "properties": {
          "recipients": {
            "description": "Get list of recipient, mobile number value pairs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OtpRecipientChanges.Post": {
        "description": "Class ProfileMappingChanges",
        "properties": {
          "recipients": {
            "description": "Set list of otp recipient changes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtpRecipientModel"
            }
          }
        }
      },
      "OtpRecipientChanges.Put": {
        "description": "Class ProfileMappingChanges",
        "properties": {
          "recipients": {
            "description": "Set list of otp recipient changes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtpRecipientModel"
            }
          }
        }
      },
      "UserDeleteOptions.Post": {
        "description": "Class UserDeleteOptions",
        "properties": {
          "remoteWipe": {
            "description": "Indicates whether to remotely wipe data from both desktop and mobile devices.",
            "type": "boolean"
          },
          "deleteUnsharedData": {
            "description": "Indicates whether data owned by the user should be deleted. This is required and must be set to True if `retainData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainData": {
            "description": "Indicates whether data should be retained and transferred to another user. This is required and must be True if `deleteUnsharedData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainToUser": {
            "description": "The ID of the new owner to whom the data will be transferred, applicable when `retainData` and/or `retainPermissionToSharedData` are set to true.",
            "type": "string"
          },
          "retainPermissionToSharedData": {
            "description": "Indicates whether permissions to shared folder should be retained.",
            "type": "boolean"
          },
          "withdrawRequestFiles": {
            "description": "Indicates whether request files should be withdrawn.",
            "type": "boolean"
          },
          "withdrawFileLinks": {
            "description": "Indicates whether sent files should be withdrawn.",
            "type": "boolean"
          }
        }
      },
      "UserDeleteOptions.Put": {
        "description": "Class UserDeleteOptions",
        "properties": {
          "remoteWipe": {
            "description": "Indicates whether to remotely wipe data from both desktop and mobile devices.",
            "type": "boolean"
          },
          "deleteUnsharedData": {
            "description": "Indicates whether data owned by the user should be deleted. This is required and must be set to True if `retainData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainData": {
            "description": "Indicates whether data should be retained and transferred to another user. This is required and must be True if `deleteUnsharedData` is False, and vice versa.",
            "type": "boolean"
          },
          "retainToUser": {
            "description": "The ID of the new owner to whom the data will be transferred, applicable when `retainData` and/or `retainPermissionToSharedData` are set to true.",
            "type": "string"
          },
          "retainPermissionToSharedData": {
            "description": "Indicates whether permissions to shared folder should be retained.",
            "type": "boolean"
          },
          "withdrawRequestFiles": {
            "description": "Indicates whether request files should be withdrawn.",
            "type": "boolean"
          },
          "withdrawFileLinks": {
            "description": "Indicates whether sent files should be withdrawn.",
            "type": "boolean"
          }
        }
      },
      "UsersEmailMigration.Post": {
        "description": "Class UsersEmailMigration",
        "properties": {
          "users": {
            "description": "Array of user objects, each containing old and new email values.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEmail.Post"
            }
          },
          "deleteIfExists": {
            "description": "Indicates whether to delete users whose emails match any in the newEmail field.",
            "type": "boolean"
          }
        }
      },
      "UsersEmailMigration.Put": {
        "description": "Class UsersEmailMigration",
        "properties": {
          "users": {
            "description": "Array of user objects, each containing old and new email values.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEmail.Post"
            }
          },
          "deleteIfExists": {
            "description": "Indicates whether to delete users whose emails match any in the newEmail field.",
            "type": "boolean"
          }
        }
      },
      "UserMobileNumberPassword.Post": {
        "description": "Class UserPassword",
        "required": [
          "password",
          "mobileNumber"
        ],
        "properties": {
          "password": {
            "description": "The current password of the user",
            "type": "string"
          },
          "mobileNumber": {
            "description": "The user's new mobile number",
            "type": "string"
          },
          "testOnly": {
            "description": "If true, a short message will be sent to the number, and the number will not be saved",
            "type": "boolean"
          }
        }
      },
      "UserMobileNumberPassword.Put": {
        "description": "Class UserPassword",
        "required": [
          "password",
          "mobileNumber"
        ],
        "properties": {
          "password": {
            "description": "The current password of the user",
            "type": "string"
          },
          "mobileNumber": {
            "description": "The user's new mobile number",
            "type": "string"
          },
          "testOnly": {
            "description": "If true, a short message will be sent to the number, and the number will not be saved",
            "type": "boolean"
          }
        }
      },
      "UserTos.Post": {
        "description": "Class UserTos",
        "required": [
          "accept"
        ],
        "properties": {
          "accept": {
            "description": "accept",
            "type": "boolean"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "UserTos.Put": {
        "description": "Class UserTos",
        "required": [
          "accept"
        ],
        "properties": {
          "accept": {
            "description": "accept",
            "type": "boolean"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "UserOtpAuth.Post": {
        "description": "Class UserOtpAuth",
        "required": [
          "username",
          "otp",
          "referral"
        ],
        "properties": {
          "username": {
            "description": "The unique identifier of the user.",
            "type": "string"
          },
          "otp": {
            "description": "user otp",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "UserOtpAuth.Put": {
        "description": "Class UserOtpAuth",
        "required": [
          "username",
          "otp",
          "referral"
        ],
        "properties": {
          "username": {
            "description": "The unique identifier of the user.",
            "type": "string"
          },
          "otp": {
            "description": "user otp",
            "type": "string"
          },
          "referral": {
            "description": "referral",
            "type": "string"
          }
        }
      },
      "InitiateUploadPostRequest": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "File name"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32",
            "description": "Total file size"
          },
          "totalChunks": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "description": "Total chunks amount"
          },
          "clientCreated": {
            "type": "string",
            "description": "File created date set from client"
          },
          "clientModified": {
            "type": "string",
            "description": "File modified date set from client"
          },
          "resume": {
            "type": "boolean",
            "description": "Indicate if this is resume upload and only applicable when same file name already exists. Currently only used internally in SFTP"
          }
        },
        "required": [
          "filename"
        ]
      },
      "BaseChunkUploadRequest": {
        "type": "object",
        "properties": {
          "compressionMode": {
            "type": "string",
            "enum": [
              "NORMAL",
              "GZIP",
              "ZLIB"
            ],
            "description": "The compression mode used for the chunk. Options include \"NORMAL\", \"GZIP\", and \"ZLIB\"."
          },
          "compressionSize": {
            "type": "integer",
            "format": "int32",
            "description": "The size of the chunk after compression."
          },
          "content": {
            "type": "string",
            "description": "The content of the chunk. If the request is in JSON format, this will be base64-encoded."
          },
          "originalSize": {
            "type": "integer",
            "format": "int32",
            "description": "The original upload content size before compression."
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "The sequential index of the chunk (starts from 1)."
          },
          "lastChunk": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates if this is the last chunk of the file (1 if last, 0 otherwise)."
          }
        },
        "required": [
          "compressionMode",
          "compressionSize",
          "content",
          "originalSize"
        ]
      },
      "Fingerprint": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "The resulting hash value representing the fingerprint of the file or object."
          },
          "algo": {
            "type": "string",
            "description": "The algorithm used to generate the fingerprint (e.g., sha3-256, md5)."
          }
        }
      },
      "MobileInfo": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user."
          },
          "schemeSupport": {
            "type": "string",
            "description": "Indicates the level of support the mobile app has for the URI scheme."
          },
          "scheme": {
            "type": "string",
            "description": "URI scheme used by the mobile application to handle the file."
          },
          "service": {
            "type": "string",
            "description": "The WOPI service ID."
          },
          "wopiSrc": {
            "type": "string",
            "description": "The WOPI (Web Application Open Platform Interface) source URL for the mobile application."
          }
        }
      },
      "UserBasic": {
        "type": "object",
        "properties": {
          "profileIcon": {
            "type": "string",
            "description": "URL or identifier for the user's profile icon."
          },
          "id": {
            "type": "string",
            "description": "Unique identifier (UUID) for the user."
          },
          "email": {
            "type": "string",
            "description": "Email address associated with the user."
          },
          "name": {
            "type": "string",
            "description": "Full name of the user."
          }
        }
      },
      "SafeEdit": {
        "type": "object",
        "properties": {
          "safeEditLocked": {
            "type": "boolean",
            "description": "Indicates if the file is locked through a SafeEdit session."
          },
          "user": {
            "description": "The user responsible for locking the file via SafeEdit.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          }
        }
      },
      "BaseSendMailPostRequest": {
        "type": "object",
        "properties": {
          "to": {
            "type": "array",
            "description": "List of recipients' email addresses (To field).",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "cc": {
            "type": "array",
            "description": "List of recipients' email addresses (CC field).",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "bcc": {
            "type": "array",
            "description": "List of recipients' email addresses (BCC field).",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "files": {
            "type": "array",
            "description": "List of attached file IDs.",
            "items": {
              "type": "string"
            }
          },
          "acl": {
            "type": "string",
            "enum": [
              "verify_recipient",
              "no_auth",
              "otp",
              "internal",
              "anyone_auth",
              "email_otp"
            ],
            "description": "Defines the access control level for the email.<br>`verify_recipient` \u2013 Accessible only to specified recipients.<br>`no_auth` \u2013 Public access, no authentication required.<br>`otp` \u2013 Accessible to recipients; allows one-time passcode (OTP) via SMS for authentication.<br>`internal` \u2013 Accessible to recipients and users within the organization.<br>`anyone_auth` \u2013 Accessible to recipients and any authenticated user.<br>`email_otp` \u2013 Accessible to recipients; allows one-time passcode (OTP) via email for authentication."
          },
          "expire": {
            "type": "string",
            "description": "The expiration date of the email."
          },
          "draft": {
            "type": "boolean",
            "description": "Indicates if the email is being saved as a draft."
          },
          "preview": {
            "type": "boolean",
            "description": "Indicates if the email is a view-only version."
          },
          "watermark": {
            "type": "string",
            "description": "Text watermark applied to the email attachments (only applicable when `preview` is enabled)."
          },
          "secureBody": {
            "type": "boolean",
            "description": "Indicates if the email body is secure."
          },
          "selfCopy": {
            "type": "boolean",
            "description": "Indicates if the sender should receive a copy of the email."
          },
          "includeFingerprint": {
            "type": "boolean",
            "description": "Indicates if a fingerprint should be included in the email."
          },
          "parentEmailId": {
            "type": "string",
            "description": "The parent email ID used for email threading. Applicable only for `forward` or `reply` types."
          },
          "isSelfReturnReceipt": {
            "type": "boolean",
            "description": "(Deprecated) Send download notification to the sender. Use 'returnReceipts' instead."
          },
          "returnReceipts": {
            "type": "array",
            "description": "List of recipients who should receive a download notification.",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "original",
              "forward",
              "reply",
              "resend"
            ],
            "description": "The type of email. Defaults to `original`."
          },
          "uploading": {
            "type": "boolean",
            "description": "Indicates whether file upload is still in progress. Prevents sending if set to `true`."
          },
          "body": {
            "type": "string",
            "description": "The body content of the email."
          },
          "subject": {
            "type": "string",
            "maxLength": 998,
            "description": "The subject of the email (maximum length: 998 characters)."
          },
          "webFormId": {
            "type": "string",
            "description": "The web form ID associated with the email."
          },
          "webFormFields": {
            "type": "object",
            "description": "Custom web form fields associated with the email."
          },
          "notifyExpired": {
            "type": "boolean",
            "description": "Indicates whether to send a notification email to the sender when the email expires."
          },
          "sharedMailboxId": {
            "type": "string",
            "description": "The shared mailbox ID."
          },
          "trackingAccess": {
            "type": "array",
            "description": "List of email addresses for tracking access.",
            "items": {
              "type": "string",
              "format": "email"
            }
          }
        }
      },
      "EmailReturnRecipient": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user who requested the return receipt."
          },
          "user": {
            "description": "Details of the user who requested the return receipt.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          }
        }
      },
      "TrackingAccessRecipient": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user associated with the recipient."
          },
          "user": {
            "description": "Details of the user associated with the recipient.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "isDistributionList": {
            "type": "boolean",
            "description": "Indicates if the recipient is a distribution list rather than an individual user."
          },
          "type": {
            "type": "integer",
            "format": "int32",
            "description": "The recipient type -> 0: TO, 1: CC, 2: BCC."
          },
          "email": {
            "type": "string",
            "description": "Email address of the recipient."
          },
          "revoked": {
            "type": "boolean",
            "description": "Indicates whether the recipient's tracking access has been revoked."
          }
        }
      },
      "Variables": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The variable value"
          },
          "variable": {
            "type": "string",
            "description": "The variable name"
          }
        }
      },
      "DrmFile": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "Size of the DRM-protected file in bytes."
          },
          "name": {
            "type": "string",
            "description": "Name of the DRM-protected file."
          }
        }
      },
      "Mail": {
        "type": "object",
        "properties": {
          "parentEmailId": {
            "type": "string",
            "description": "Unique identifier of the parent email, if applicable."
          },
          "isPreview": {
            "type": "boolean",
            "description": "Indicates whether the email is a view-only version, typically used for previewing attachments without enabling downloading."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates if the email has been deleted."
          },
          "emailFrom": {
            "type": "string",
            "description": "The email address from which the email was sent."
          },
          "templateId": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of the email template used."
          },
          "webFormId": {
            "type": "string",
            "description": "Unique identifier of the web form associated with the email."
          },
          "sharedMailboxId": {
            "type": "string",
            "description": "Unique identifier of the shared mailbox, if applicable."
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date the email was last modified."
          },
          "error": {
            "type": "string",
            "description": "Error message associated with the email, if any."
          },
          "headline": {
            "type": "string",
            "description": "Headline or main title of the email."
          },
          "actor": {
            "description": "The user responsible for sending the email, applicable when the email is sent on behalf of a shared mailbox.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "emailReturnReceipt": {
            "description": "List of recipients who requested return receipts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailReturnRecipient"
            }
          },
          "trackingAccess": {
            "description": "List of recipients with tracking access.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingAccessRecipient"
            }
          },
          "sender": {
            "description": "Details of the sender.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "subject": {
            "type": "string",
            "description": "Subject line of the email."
          },
          "bucket": {
            "type": "string",
            "description": "The bucket where the email is stored. (e.g. inbox, sent, trash)"
          },
          "exists": {
            "type": "boolean",
            "description": "Indicates whether the email already exists in the system."
          },
          "darkModeStyle": {
            "type": "string",
            "description": "CSS styles applied for dark mode."
          },
          "dlpStatus": {
            "type": "string",
            "description": "Data Loss Prevention (DLP) scan status of the email."
          },
          "avStatus": {
            "type": "string",
            "description": "Antivirus (AV) scan status of the email."
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date of the email package, if applicable."
          },
          "notice": {
            "type": "string",
            "description": "Notice part of the email."
          },
          "variables": {
            "description": "List of dynamic variables used in the email.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variables"
            }
          },
          "package": {
            "description": "Details of the associated email package.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Package"
              }
            ]
          },
          "rawBody": {
            "type": "string",
            "description": "Raw email body content without HTML element"
          },
          "fullHtmlBody": {
            "type": "string",
            "description": "Full HTML body of the email."
          },
          "templateBody": {
            "type": "string",
            "description": "Body content generated from the email template."
          },
          "isUserSent": {
            "type": "boolean",
            "description": "Indicates whether the email was sent by the current user or another user."
          },
          "secureBody": {
            "type": "boolean",
            "description": "Indicates if the email body is secured."
          },
          "status": {
            "type": "string",
            "description": "Current status of the email (e.g., sent, draft, error and etc)."
          },
          "withdrawnDate": {
            "type": "string",
            "description": "Date when the email was withdrawn, if applicable."
          },
          "hasTrackingAccess": {
            "type": "boolean",
            "description": "Indicates if tracking access is enabled for the email."
          },
          "senderId": {
            "type": "string",
            "description": "Unique identifier of the sender."
          },
          "watermark": {
            "type": "string",
            "description": "Text watermark applied to the email attachments (applicable only for view-only version)."
          },
          "webFormFields": {
            "type": "string",
            "description": "Fields included in the associated web form with the mail."
          },
          "body": {
            "type": "string",
            "description": "The body of the email."
          },
          "attachmentCount": {
            "type": "string",
            "description": "Number of attachments in the email."
          },
          "emailPackageId": {
            "type": "string",
            "description": "Unique identifier of the associated email package."
          },
          "isRead": {
            "type": "boolean",
            "description": "Indicates if the email has been read."
          },
          "type": {
            "type": "string",
            "description": "Type of the email (e.g., original, reply, forward and etc)."
          },
          "recipients": {
            "description": "List of recipients for the email.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Recipient"
            }
          },
          "date": {
            "type": "string",
            "description": "Date the email was last modified or sent."
          },
          "htmlBody": {
            "type": "string",
            "description": "HTML version of the email body."
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the email."
          }
        }
      },
      "DestinationFolderIdRequest": {
        "type": "object",
        "properties": {
          "destinationFolderId": {
            "type": "string",
            "description": "The ID of the destination folder where the item will be copied/moved."
          },
          "addVersion": {
            "type": "boolean",
            "description": "If a file with the same name exists, create a new version instead of overwriting it. Default is True."
          }
        },
        "required": [
          "destinationFolderId"
        ]
      },
      "UserAttachment": {
        "type": "object",
        "properties": {
          "size": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "webFormId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "modifiedDate": {
            "type": "string"
          },
          "mime": {
            "type": "string"
          },
          "emailId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "sentDate": {
            "type": "string"
          },
          "attachmentId": {
            "type": "string"
          }
        }
      },
      "MetaData": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MailAttachments": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAttachment"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          }
        }
      },
      "Mail1": {
        "type": "object",
        "properties": {
          "parentEmailId": {
            "type": "string",
            "description": "Unique identifier of the parent email, if applicable."
          },
          "isPreview": {
            "type": "boolean",
            "description": "Indicates whether the email is a view-only version, typically used for previewing attachments without enabling downloading."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates if the email has been deleted."
          },
          "emailFrom": {
            "type": "string",
            "description": "The email address from which the email was sent."
          },
          "templateId": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of the email template used."
          },
          "webFormId": {
            "type": "string",
            "description": "Unique identifier of the web form associated with the email."
          },
          "sharedMailboxId": {
            "type": "string",
            "description": "Unique identifier of the shared mailbox, if applicable."
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date the email was last modified."
          },
          "error": {
            "type": "string",
            "description": "Error message associated with the email, if any."
          },
          "headline": {
            "type": "string",
            "description": "Headline or main title of the email."
          },
          "actor": {
            "description": "The user responsible for sending the email, applicable when the email is sent on behalf of a shared mailbox.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "emailReturnReceipt": {
            "description": "List of recipients who requested return receipts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailReturnRecipient"
            }
          },
          "trackingAccess": {
            "description": "List of recipients with tracking access.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingAccessRecipient"
            }
          },
          "sender": {
            "description": "Details of the sender.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "subject": {
            "type": "string",
            "description": "Subject line of the email."
          },
          "bucket": {
            "type": "string",
            "description": "The bucket where the email is stored. (e.g. inbox, sent, trash)"
          },
          "exists": {
            "type": "boolean",
            "description": "Indicates whether the email already exists in the system."
          },
          "darkModeStyle": {
            "type": "string",
            "description": "CSS styles applied for dark mode."
          },
          "dlpStatus": {
            "type": "string",
            "description": "Data Loss Prevention (DLP) scan status of the email."
          },
          "avStatus": {
            "type": "string",
            "description": "Antivirus (AV) scan status of the email."
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date of the email package, if applicable."
          },
          "notice": {
            "type": "string",
            "description": "Notice part of the email."
          },
          "package": {
            "description": "Details of the associated email package.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Package"
              }
            ]
          },
          "rawBody": {
            "type": "string",
            "description": "Raw email body content without HTML element"
          },
          "fullHtmlBody": {
            "type": "string",
            "description": "Full HTML body of the email."
          },
          "templateBody": {
            "type": "string",
            "description": "Body content generated from the email template."
          },
          "isUserSent": {
            "type": "boolean",
            "description": "Indicates whether the email was sent by the current user or another user."
          },
          "secureBody": {
            "type": "boolean",
            "description": "Indicates if the email body is secured."
          },
          "status": {
            "type": "string",
            "description": "Current status of the email (e.g., sent, draft, error and etc)."
          },
          "withdrawnDate": {
            "type": "string",
            "description": "Date when the email was withdrawn, if applicable."
          },
          "hasTrackingAccess": {
            "type": "boolean",
            "description": "Indicates if tracking access is enabled for the email."
          },
          "senderId": {
            "type": "string",
            "description": "Unique identifier of the sender."
          },
          "watermark": {
            "type": "string",
            "description": "Text watermark applied to the email attachments (applicable only for view-only version)."
          },
          "webFormFields": {
            "type": "string",
            "description": "Fields included in the associated web form with the mail."
          },
          "body": {
            "type": "string",
            "description": "The body of the email."
          },
          "attachmentCount": {
            "type": "string",
            "description": "Number of attachments in the email."
          },
          "emailPackageId": {
            "type": "string",
            "description": "Unique identifier of the associated email package."
          },
          "isRead": {
            "type": "boolean",
            "description": "Indicates if the email has been read."
          },
          "type": {
            "type": "string",
            "description": "Type of the email (e.g., original, reply, forward and etc)."
          },
          "recipients": {
            "description": "List of recipients for the email.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Recipient"
            }
          },
          "date": {
            "type": "string",
            "description": "Date the email was last modified or sent."
          },
          "htmlBody": {
            "type": "string",
            "description": "HTML version of the email body."
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the email."
          }
        }
      },
      "Mails": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mail1"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          }
        }
      },
      "MailCounters": {
        "type": "object",
        "properties": {
          "draft": {
            "type": "integer",
            "format": "int32"
          },
          "outgoingTransferring": {
            "type": "integer",
            "format": "int32"
          },
          "inbox": {
            "type": "integer",
            "format": "int32"
          },
          "inboxUnread": {
            "type": "integer",
            "format": "int32"
          },
          "outgoingQueued": {
            "type": "integer",
            "format": "int32"
          },
          "outgoingTransferringIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trash": {
            "type": "integer",
            "format": "int32"
          },
          "outgoingError": {
            "type": "integer",
            "format": "int32"
          },
          "outgoing": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MailWithdrawRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "A list of email IDs",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ids"
        ]
      },
      "ErrorInteger": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Associated field, if applicable."
          },
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "failedIds": {
            "type": "array",
            "description": "List of failed IDs.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "BulkOperationInteger": {
        "type": "object",
        "properties": {
          "errors": {
            "description": "List of errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorInteger"
            }
          },
          "successIds": {
            "type": "array",
            "description": "List of succeeded IDs.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "Attachments": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          }
        }
      },
      "SendMailSettingPutRequest": {
        "type": "object",
        "properties": {
          "trackingAccess": {
            "type": "array",
            "description": "List of email addresses for tracking access.",
            "items": {
              "type": "string",
              "format": "email"
            }
          }
        }
      },
      "RecentObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "object id"
          },
          "lastAccessed": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "lastAccessed"
        ]
      },
      "RecentObjectsPostRequest": {
        "type": "object",
        "properties": {
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecentObject"
            }
          }
        },
        "required": [
          "objects"
        ]
      },
      "SystemFolders": {
        "type": "object",
        "properties": {
          "per_folder_default_quota": {
            "type": "integer",
            "format": "int32",
            "description": "Default quota assigned to each folder."
          },
          "max_num_sys_folders": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum allowed number of system folders."
          },
          "per_folder_quota_options": {
            "type": "array",
            "description": "List of available quota options per folder.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "current_num_sys_folders": {
            "type": "integer",
            "format": "int32",
            "description": "Current number of system folders."
          }
        }
      },
      "UserQuota": {
        "type": "object",
        "properties": {
          "send_quota_used": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of send quota used by the user."
          },
          "send_quota_allowed": {
            "type": "integer",
            "format": "int32",
            "description": "The allowed send quota for the user."
          },
          "sys_folders": {
            "description": "Details of the system folders quota.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemFolders"
              }
            ]
          },
          "folder_quota_allowed": {
            "type": "integer",
            "format": "int32",
            "description": "The allowed folder quota for the user."
          },
          "folder_quota_used": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of folder quota used by the user."
          }
        }
      },
      "UserMePinsPostRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "ids",
          "type"
        ]
      },
      "AdminUserImportError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Description of the error."
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the error."
          }
        }
      },
      "AdminUserImport": {
        "type": "object",
        "properties": {
          "added_users": {
            "type": "integer",
            "format": "int32",
            "description": "Number of users successfully added."
          },
          "updated_users": {
            "type": "integer",
            "format": "int32",
            "description": "Number of users successfully updated."
          },
          "errors": {
            "description": "List of error details encountered during import.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminUserImportError"
            }
          },
          "failed_ids": {
            "type": "array",
            "description": "List of user emails that failed during import.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserDistributionList": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "isDl": {
            "type": "boolean"
          }
        }
      },
      "AdminDeleteTOTPSecretRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ids"
        ]
      },
      "UserMeConcurrentChallenge": {
        "type": "object",
        "properties": {
          "userAgent": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "created": {
            "type": "string"
          }
        }
      },
      "RequestFileToInboxPostRequest": {
        "type": "object",
        "properties": {
          "to": {
            "type": "array",
            "description": "List of email addresses to send the files to.",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "subject": {
            "type": "string",
            "minLength": 1,
            "maxLength": 998,
            "description": "Subject of the email. Must be between 1 and 998 characters."
          },
          "body": {
            "type": "string",
            "description": "The body of the email."
          },
          "expire": {
            "type": "string",
            "description": "The expiration date of the file."
          },
          "fileLimit": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The maximum number of files to attach."
          },
          "requireAuth": {
            "type": "boolean",
            "description": "Indicates if authentication is required to access the files."
          },
          "returnReceipts": {
            "type": "array",
            "description": "List of email addresses to send read receipts to.",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "sharedMailboxId": {
            "type": "string",
            "description": "Unique identifier for the Shared Mailbox. Used to search for results belonging to this Shared Mailbox."
          }
        },
        "required": [
          "subject",
          "to"
        ]
      },
      "RequestFileToFolderPostRequest": {
        "type": "object",
        "properties": {
          "to": {
            "type": "array",
            "description": "List of email addresses to send the files to.",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "subject": {
            "type": "string",
            "minLength": 1,
            "maxLength": 998,
            "description": "Subject of the email. Must be between 1 and 998 characters."
          },
          "body": {
            "type": "string",
            "description": "The body of the email."
          },
          "expire": {
            "type": "string",
            "description": "The expiration date of the file."
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The maximum number of files to attach."
          },
          "requireAuth": {
            "type": "boolean",
            "description": "Indicates if authentication is required to access the files."
          },
          "files": {
            "type": "array",
            "description": "List of object GUIDs representing the files to be sent.",
            "items": {
              "type": "string"
            }
          },
          "actionId": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 2,
            "description": "The action ID, must be 1 or 2."
          },
          "showToken": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 1,
            "description": "Indicates whether to show the token. Must be 0 or 1."
          }
        },
        "required": [
          "subject",
          "to"
        ]
      },
      "UserBasic1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier (UUID) for the user."
          },
          "email": {
            "type": "string",
            "description": "Email address associated with the user."
          }
        }
      },
      "RequestFileConfig": {
        "type": "object",
        "properties": {
          "excludedFileExtensions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Mail2": {
        "type": "object",
        "properties": {
          "fullHtmlBody": {
            "type": "string",
            "description": "Full HTML body of the email."
          },
          "body": {
            "type": "string",
            "description": "The body of the email."
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the email."
          },
          "subject": {
            "type": "string",
            "description": "Subject line of the email."
          },
          "parentEmailId": {
            "type": "string",
            "description": "Unique identifier of the parent email, if applicable."
          },
          "emailPackageId": {
            "type": "string",
            "description": "Unique identifier of the associated email package."
          },
          "senderId": {
            "type": "string",
            "description": "Unique identifier of the sender."
          },
          "sharedMailboxId": {
            "type": "string",
            "description": "Unique identifier of the shared mailbox, if applicable."
          }
        }
      },
      "RequestFileReplyPostRequest": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "The body of the reply. This field is optional."
          }
        }
      },
      "Folder1": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "The total storage size used by the folder (in bytes)."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the object has been deleted."
          },
          "isUnderMyFolder": {
            "type": "boolean",
            "description": "Indicates if this folder is a subfolder of the user's \"My Folder\"."
          },
          "created": {
            "type": "string",
            "description": "The date and time when the object was created."
          },
          "currentUserRole": {
            "description": "The role of the current user in this folder.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ]
          },
          "vendorDocId": {
            "type": "string",
            "description": "Vendor document ID associated with the object."
          },
          "totalFilesCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of files within this folder."
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier (UUID) of the parent object."
          },
          "source": {
            "type": "integer",
            "format": "int32",
            "description": "ID representing the source of the object (1 - Salesforce, 2 - Teams)."
          },
          "path": {
            "type": "string",
            "description": "Path to the folder in the hierarchy."
          },
          "vendorDocName": {
            "type": "string",
            "description": "Name of the vendor document associated with the object."
          },
          "permissions": {
            "description": "List of permissions associated with the object.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "isFavorite": {
            "type": "boolean",
            "description": "Indicates if the folder is marked as a favorite by the user."
          },
          "syncable": {
            "type": "boolean",
            "description": "Indicates if the folder can be synced by Desktop Sync Client."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier (UUID) who created the folder."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          },
          "totalMembersCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of members who have access to this folder."
          },
          "maxFolderExpiration": {
            "type": "string",
            "description": "The maximum expiration date allowed for files in this folder."
          },
          "pushedFilesCount": {
            "type": "integer",
            "format": "int32",
            "description": "The number of files that have been pushed to mobile apps in this folder."
          },
          "useFolderQuota": {
            "type": "boolean",
            "description": "Indicates if a folder quota is applied to this folder."
          },
          "dlpStatus": {
            "type": "string",
            "description": "The Data Loss Prevention (DLP) status of the folder."
          },
          "avStatus": {
            "type": "string",
            "description": "The Antivirus (AV) status of the folder."
          },
          "permalink": {
            "type": "string",
            "description": "Permanent URL link to access the object."
          },
          "maxFileLifetime": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum duration (in days) that files in this folder can be kept after being added to the folder."
          },
          "isLdapGroupMember": {
            "type": "boolean",
            "description": "Indicates if the folder is part of an LDAP group."
          },
          "permDeleted": {
            "type": "boolean",
            "description": "Indicates whether the object has been permanently deleted."
          },
          "freeSpace": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of free space available in the folder (in bytes)."
          },
          "members": {
            "description": "List of members who have access to the object.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "fileLifetime": {
            "type": "integer",
            "format": "int32",
            "description": "Time duration (in days) for which the files in this folder are kept after being added to the folder."
          },
          "totalFoldersCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of subfolders within this folder."
          },
          "rootId": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the root folder if this is a subfolder."
          },
          "secure": {
            "type": "boolean",
            "description": "Indicates whether the folder or the parent folder containing the file is marked as secure."
          },
          "description": {
            "type": "string",
            "description": "The description of the folder."
          },
          "isRoot": {
            "type": "boolean",
            "description": "Indicates if this folder is a root folder."
          },
          "quota": {
            "type": "integer",
            "format": "int32",
            "description": "The storage quota for the folder (in bytes)."
          },
          "pathIds": {
            "type": "string",
            "description": "A list of IDs representing the path of the folder within the folder hierarchy."
          },
          "modified": {
            "type": "string",
            "description": "The date and time when the object was last modified."
          },
          "type": {
            "type": "string",
            "description": "Type of the object (e.g., f - file, d - folder)"
          },
          "expire": {
            "type": "string",
            "description": "Expiration timestamp of the object, if applicable."
          },
          "creator": {
            "description": "Details of the user who created the object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier (UUID) of the folder."
          },
          "isShared": {
            "type": "boolean",
            "description": "Indicates if the folder is shared with other users."
          },
          "parent": {
            "description": "The parent folder of the current folder.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Folder"
              }
            ]
          }
        }
      },
      "MultipleFolderIdRequest": {
        "type": "object",
        "properties": {
          "folderIds": {
            "type": "array",
            "description": "A list of folder IDs to be processed.",
            "items": {
              "type": "string"
            }
          },
          "destinationFolderId": {
            "type": "string",
            "description": "The destination folder"
          }
        },
        "required": [
          "destinationFolderId",
          "folderIds"
        ]
      },
      "ErrorString": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Associated field, if applicable."
          },
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "failedIds": {
            "type": "array",
            "description": "List of failed IDs.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BulkOperationMoveFolders": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Details of moved folders.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Folder1"
            }
          },
          "errors": {
            "description": "List of errors.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorString"
            }
          },
          "successIds": {
            "type": "array",
            "description": "List of successfully moved folder IDs.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FolderQuota": {
        "type": "object",
        "properties": {
          "owner_sys_folder_quota_options": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "storage_used": {
            "type": "integer",
            "format": "int32"
          },
          "storage_quota": {
            "type": "integer",
            "format": "int32"
          },
          "quota_allowance": {
            "type": "integer",
            "format": "int32"
          },
          "folder_size": {
            "type": "integer",
            "format": "int32"
          },
          "storage_available": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Members": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          }
        }
      },
      "FolderMemberPostRequest": {
        "type": "object",
        "properties": {
          "notify": {
            "type": "boolean",
            "description": "If set to `true`, notifies the user being invited to the folder via email."
          },
          "emails": {
            "type": "array",
            "description": "List of email addresses for new members.",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "userIds": {
            "type": "array",
            "description": "List of user IDs for new members.",
            "items": {
              "type": "string"
            }
          },
          "ldapGroupIds": {
            "type": "array",
            "description": "List of LDAP group IDs for new members.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "roleId": {
            "type": "integer",
            "format": "int32",
            "description": "The role ID to assign to the new members."
          },
          "notifyFileAdded": {
            "type": "boolean",
            "description": "If set to `true`, subscribes the user to notifications for file additions."
          }
        },
        "required": [
          "roleId"
        ]
      },
      "FolderFileAddMembers": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorString"
            }
          },
          "successIds": {
            "type": "array",
            "description": "List of succeeded IDs.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BaseError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code"
          }
        }
      },
      "Errors": {
        "type": "object",
        "properties": {
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "FoldersMetaData": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "totalDeletedFoldersCount": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "totalDeletedFilesCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Folders": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Folder1"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/FoldersMetaData"
          }
        }
      },
      "FolderUpdatePutRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Folder name"
          },
          "description": {
            "type": "string",
            "description": "Folder description"
          },
          "syncable": {
            "type": "boolean",
            "description": "Indicates that folder is syncable. Can only be set at a top level folder"
          },
          "expire": {
            "type": "string",
            "description": "The folder expiration date. Applicable to top level folders"
          },
          "fileLifetime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0,
            "description": "The file's lifetime in the folder"
          },
          "applyFileLifetimeToFiles": {
            "type": "boolean",
            "description": "(optional) Apply file lifetime setting to existing files. Applicable when fileLifetime is set"
          },
          "applyFileLifetimeToNested": {
            "type": "boolean",
            "description": "(optional) Apply file lifetime setting to nested folders. Applicable when fileLifetime is set"
          },
          "secure": {
            "type": "boolean",
            "description": "Indicates whether folder is secure. Only top level folders under user's root folder can be set to secure"
          },
          "clientId": {
            "type": "string"
          },
          "vendorDocId": {
            "type": "string"
          },
          "vendorDocName": {
            "type": "string"
          },
          "useFolderQuota": {
            "type": "boolean",
            "description": "Indicate if folder is system folder with folder quotas"
          },
          "quota": {
            "type": "integer",
            "format": "int32",
            "enum": [
              1073741824,
              2147483648,
              5368709120,
              10737418240,
              53687091200,
              -1
            ],
            "description": "Folder quota (in bytes)"
          }
        }
      },
      "FolderCreatePostRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Folder name"
          },
          "secure": {
            "type": "boolean",
            "description": "Indicates whether folder is secure. Only top level folders under user's root folder can be set to secure"
          },
          "syncable": {
            "type": "boolean",
            "description": "Indicates that folder is syncable. Can only be set at a top level folder"
          },
          "expire": {
            "type": "string",
            "description": "The folder expiration date. Applicable to top level folders"
          },
          "fileLifetime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0,
            "description": "The file's lifetime in the folder"
          },
          "rename": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "description": "Folder description"
          },
          "clientId": {
            "type": "string"
          },
          "vendorDocId": {
            "type": "string",
            "nullable": true
          },
          "vendorDocName": {
            "type": "string",
            "nullable": true
          },
          "isFolderUpload": {
            "type": "boolean",
            "description": "Indicate whether is folder upload children (for internal use only)"
          },
          "useFolderQuota": {
            "type": "boolean",
            "description": "Indicate if folder is system folder with folder quotas"
          },
          "quota": {
            "type": "integer",
            "format": "int32",
            "enum": [
              1073741824,
              2147483648,
              5368709120,
              10737418240,
              53687091200,
              -1
            ],
            "description": "Folder quota (in bytes)"
          }
        },
        "required": [
          "name"
        ]
      },
      "ActivityUser": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "description": "Email address associated with the user."
          },
          "profileIcon": {
            "type": "string",
            "description": "URL or identifier for the user's profile icon."
          },
          "name": {
            "type": "string",
            "description": "Full name of the user."
          }
        }
      },
      "ActivityList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Activity"
            }
          }
        }
      },
      "AdminFolderPutRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "List of folder object IDs to be updated.",
            "items": {
              "type": "string"
            }
          },
          "expire": {
            "type": "string",
            "description": "Expiration date for the folder."
          },
          "applyTo": {
            "type": "string",
            "enum": [
              "folders_only",
              "files_only",
              "folders_and_files"
            ],
            "description": "Defines where the expiration applies: folders only, files only, or both folders and files."
          },
          "quota": {
            "type": "integer",
            "format": "int32",
            "enum": [
              1073741824,
              2147483648,
              5368709120,
              10737418240,
              53687091200,
              -1
            ],
            "description": "Storage quota for the folder (in bytes)."
          },
          "applyToNestedFiles": {
            "type": "boolean",
            "description": "If set to `true`, expiration will also apply to files in child folders."
          }
        },
        "required": [
          "ids"
        ]
      },
      "FolderChildrenFiles": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          }
        }
      },
      "FolderPermissionsRequest": {
        "type": "object",
        "properties": {
          "actionId": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "description": "The unique identifier for the action."
          },
          "id:in": {
            "type": "array",
            "description": "List of unique action identifiers. Search for results that match any of the specified values.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "name": {
            "type": "string",
            "enum": [
              "view",
              "download",
              "comment_view",
              "comment_add",
              "comment_edit",
              "comment_reply",
              "comment_delete",
              "task_view",
              "task_update_status",
              "notification_subscribe",
              "notification_unsubscribe",
              "properties_view",
              "file_send",
              "tray_add",
              "favorite_add",
              "file_copy",
              "mobile_sync",
              "file_preview_send",
              "folder_copy",
              "message_send",
              "task_add",
              "task_edit",
              "task_delete",
              "user_view",
              "children_view_deleted",
              "folder_add",
              "file_add",
              "folder_delete",
              "lock",
              "unlock",
              "file_recover",
              "version_view",
              "version_create",
              "version_promote",
              "version_delete",
              "file_delete",
              "file_edit",
              "properties_edit",
              "user_add",
              "user_edit",
              "user_remove",
              "rename",
              "folder_recover",
              "folder_permanent_delete",
              "sync_enable",
              "sync_disable",
              "file_permanent_delete",
              "user_add_external",
              "user_edit_external",
              "user_remove_external",
              "mobile_sync_push",
              "mobile_sync_unpush",
              "folder_move",
              "file_move",
              "top_shared_folder_delete"
            ],
            "description": "The name of the action."
          },
          "name:contains": {
            "type": "string",
            "description": "Action name filter. Search for actions whose names contain the specified characters."
          },
          "with": {
            "type": "string",
            "description": "Specifies additional fields to include in the response."
          },
          "mode": {
            "type": "string",
            "enum": [
              "compact",
              "full_no_links",
              "full_with_links",
              "full"
            ],
            "description": "Determines the detail level of the response body."
          }
        }
      },
      "Logout": {
        "type": "object",
        "properties": {
          "redirectUri": {
            "type": "string"
          }
        }
      },
      "FileMembersPostRequest": {
        "type": "object",
        "properties": {
          "notify": {
            "type": "boolean",
            "description": "If set to `true`, notifies the user being invited to the file via email."
          },
          "emails": {
            "type": "array",
            "description": "List of email addresses for new members.",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "userIds": {
            "type": "array",
            "description": "List of user IDs (UUID) for new members. (Recommended request size <= 100)",
            "items": {
              "type": "string"
            }
          },
          "ids": {
            "type": "array",
            "description": "List of unique folder or file identifiers.",
            "items": {
              "type": "string"
            }
          },
          "roleId": {
            "type": "integer",
            "format": "int32",
            "enum": [
              8,
              9
            ],
            "description": "The role ID to assign to the new members."
          },
          "message": {
            "type": "string",
            "description": "Optional message to include with the file sharing."
          }
        },
        "required": [
          "roleId"
        ]
      },
      "FilePreviewSupport": {
        "type": "object",
        "properties": {
          "supportedIds": {
            "type": "array",
            "description": "Unique identifier (UUID) of the supported files",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AdminFilePutRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "List of file object IDs (UUID) to be updated",
            "items": {
              "type": "string"
            }
          },
          "expire": {
            "type": "string",
            "description": "New expiration date for the file(s)"
          }
        },
        "required": [
          "ids"
        ]
      },
      "Files": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          }
        }
      },
      "PostFileZipStatusBodyRequest": {
        "type": "object",
        "properties": {
          "fileIds": {
            "type": "array",
            "maxItems": 1000,
            "description": "A list of file IDs to include in the bulk download.",
            "items": {
              "type": "string"
            }
          },
          "folderIds": {
            "type": "array",
            "maxItems": 100,
            "description": "A list of folder IDs to include in the bulk download.",
            "items": {
              "type": "string"
            }
          },
          "fileId": {
            "type": "string",
            "description": "A single file ID to include in the request."
          },
          "versionId": {
            "type": "string",
            "description": "The version ID of the specified file."
          }
        }
      },
      "DownloadLink": {
        "type": "object",
        "properties": {
          "downloadLinks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AdminFileRescan": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string",
            "description": "The successful response message"
          }
        }
      },
      "FileLockPostRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "string",
            "description": "A list of file object IDs to be locked/unlocked."
          }
        }
      },
      "BulkOperationLockFile": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorString"
            }
          },
          "successIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FileUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The new name for the file."
          },
          "expire": {
            "type": "string",
            "description": "The updated expiration date for the file."
          },
          "replace": {
            "type": "boolean",
            "description": "Indicates whether to replace the existing file if one with the same name already exists."
          }
        }
      },
      "FileMovePostBodyRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "string",
            "description": "The object_ids to move"
          },
          "destinationFolderId": {
            "type": "string"
          },
          "replace": {
            "type": "boolean"
          }
        },
        "required": [
          "destinationFolderId"
        ]
      },
      "FileCopyPostBodyRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "string",
            "description": "The object_ids to copy"
          },
          "destinationFolderId": {
            "type": "string"
          },
          "replace": {
            "type": "boolean"
          },
          "newFileName": {
            "type": "string",
            "maxLength": 255,
            "description": "New file name for the file that is being copied to the same folder"
          }
        },
        "required": [
          "destinationFolderId"
        ]
      },
      "ExternalDLUpdateRequest": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            }
          }
        },
        "required": [
          "emails"
        ]
      },
      "ExternalDL": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "ExternalDLs": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalDL"
            }
          }
        }
      },
      "Sources": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          }
        }
      },
      "Site": {
        "type": "object",
        "properties": {
          "ecmTypeId": {
            "type": "string"
          },
          "isAdded": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "SearchSharePointSitesResult": {
        "type": "object",
        "properties": {
          "sites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Site"
            }
          }
        }
      },
      "MobileSyncList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MobileSync"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          }
        }
      },
      "FavoriteOpenAPI2": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "object": {
            "$ref": "#/components/schemas/Folder1"
          },
          "objectId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "FavoriteListOpenAPI2": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteOpenAPI2"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          }
        }
      },
      "SharedMailbox": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBasic"
            }
          },
          "id": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserBasic"
          }
        }
      },
      "SharedMailboxList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SharedMailbox"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          }
        }
      },
      "SharedMailboxPostRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "shared mailbox user id"
          },
          "memberIds": {
            "type": "array",
            "description": "List of member ids  (Recommended request size <= 100)",
            "items": {
              "type": "string"
            }
          },
          "remoteWipe": {
            "type": "boolean"
          },
          "deleteUnsharedData": {
            "type": "boolean"
          },
          "retainData": {
            "type": "boolean"
          },
          "retainToUser": {
            "type": "string"
          },
          "retainPermissionToSharedData": {
            "type": "boolean"
          }
        },
        "required": [
          "memberIds",
          "userId"
        ]
      },
      "SharedMailboxPatchRequest": {
        "type": "object",
        "properties": {
          "memberIds": {
            "type": "array",
            "description": "List of member ids  (Recommended request size <= 100)",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "memberIds"
        ]
      },
      "SharedMailboxMemberStatusPatchRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "active",
          "id"
        ]
      },
      "SharedMailboxStatusPatchRequest": {
        "type": "object",
        "properties": {
          "data": {
            "description": "shared box status",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SharedMailboxMemberStatusPatchRequest"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "MailIdCounters": {
        "type": "object",
        "properties": {
          "counters": {
            "$ref": "#/components/schemas/MailCounters"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "MailCountersList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MailIdCounters"
            }
          }
        }
      },
      "SendOption": {
        "type": "object",
        "properties": {
          "linkExpiry": {
            "type": "boolean"
          },
          "ACL": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SharedMailboxSetting": {
        "type": "object",
        "properties": {
          "aclDefault": {
            "type": "string"
          },
          "secureMessageBody": {
            "type": "string"
          },
          "maxLinkExpiration": {
            "type": "integer",
            "format": "int32"
          },
          "returnReceipt": {
            "type": "string"
          },
          "defaultCountryCode": {
            "type": "string"
          },
          "watermarkPreview": {
            "type": "string"
          },
          "defaultForm": {
            "type": "string"
          },
          "mailExpirationNotification": {
            "type": "string"
          },
          "defaultLinkExpiry": {
            "type": "integer",
            "format": "int32"
          },
          "selfCopyDefault": {
            "type": "boolean"
          },
          "selfCopy": {
            "type": "string"
          },
          "secureMessageBodyDefault": {
            "type": "boolean"
          },
          "includeFingerprint": {
            "type": "string"
          },
          "allowedFileExtensions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "watermarkEnabled": {
            "type": "boolean"
          },
          "fileFilterCustomFileTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excludedFileExtensions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fileFilterExclusionGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "returnReceiptDefault": {
            "type": "boolean"
          },
          "sendExternal": {
            "type": "boolean"
          },
          "sendOptionEnabled": {
            "$ref": "#/components/schemas/SendOption"
          },
          "sendFileLimit": {
            "type": "integer",
            "format": "int32"
          },
          "includeFingerprintDefault": {
            "type": "boolean"
          },
          "zipLimit": {
            "type": "integer",
            "format": "int32"
          },
          "ACL": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WebFormList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebForm"
            }
          }
        }
      },
      "CardHost": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "CardAction": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "Card": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "host": {
            "$ref": "#/components/schemas/CardHost"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardAction"
            }
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "message",
          "severity",
          "type"
        ]
      },
      "CardActionPostRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "retry",
              "delete"
            ],
            "description": "Action to take (e.g. dismiss, retry, delete)"
          },
          "type": {
            "type": "string",
            "enum": [
              "content_encryption",
              "email_json_migration",
              "event_log_partitioning_migration",
              "system_security_scanning",
              "events_table_monitor",
              "appadmin_db",
              "sysadmin_db",
              "sysadmin_hosts",
              "epg_warnings"
            ],
            "description": "Type of card to retrieve. Available card type(s): content_encryption,email_json_migration,event_log_partitioning_migration,system_security_scanning,events_table_monitor,appadmin_db,sysadmin_db,sysadmin_hosts,epg_warnings"
          },
          "hostId": {
            "type": "string",
            "description": "Host ID"
          },
          "storageType": {
            "type": "string",
            "description": "Storage type for files (either 'user_files' or 'replication_files')"
          },
          "volume": {
            "type": "string",
            "description": "Volume for files"
          },
          "fileId": {
            "type": "array",
            "description": "List of File IDs to retry encryption",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "emailId": {
            "type": "array",
            "description": "List of Email IDs to retry migrating to JSON format",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "required": [
          "action",
          "type"
        ]
      },
      "UserGeneratedSshPublicKeyKey": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string"
          },
          "privateKey": {
            "type": "string"
          }
        }
      },
      "UserSshPublicKey": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "adminActive": {
            "type": "boolean"
          },
          "publicKey": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserSshPublicKeyList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSshPublicKey"
            }
          }
        }
      },
      "UserSshPublicKey1": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "adminActive": {
            "type": "boolean"
          },
          "publicKey": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AdminUserSshPublicKeyList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSshPublicKey1"
            }
          }
        }
      },
      "UserSshPublicKeysPostCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "description": "The name of SSH Public key"
          },
          "publicKey": {
            "type": "string",
            "description": "SSH Public key"
          }
        },
        "required": [
          "name",
          "publicKey"
        ]
      },
      "UserSshPublicKeysPostGenerateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "description": "The name of SSH Public key"
          },
          "passphrase": {
            "type": "string",
            "description": "The passphrase of SSH Public key"
          }
        },
        "required": [
          "name"
        ]
      },
      "ContactList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          }
        }
      },
      "ContactEmail": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "email"
        ]
      },
      "ContactCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/ContactEmail"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "GroupEmail": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "email"
        ]
      },
      "GroupCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/GroupEmail"
            }
          }
        },
        "required": [
          "items",
          "name"
        ]
      },
      "ClientEventLogsPostRequest": {
        "type": "object",
        "properties": {
          "created": {
            "type": "integer",
            "format": "int32",
            "description": "when this event created on client"
          },
          "eventName": {
            "type": "string",
            "description": "Event name of the log"
          },
          "successful": {
            "type": "boolean",
            "description": "success/failed"
          },
          "eventId": {
            "type": "string",
            "description": "event identifier on client side"
          },
          "data": {
            "type": "object",
            "description": "event details"
          },
          "singleLine": {
            "type": "string",
            "description": "event singleline"
          }
        },
        "required": [
          "data",
          "eventId",
          "eventName",
          "singleLine",
          "successful"
        ]
      },
      "BulkClientEventLogsPostRequest": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientEventLogsPostRequest"
            }
          }
        }
      },
      "ClientCustomEventLog": {
        "type": "object",
        "properties": {
          "failedIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "successIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchResult": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mail"
            }
          },
          "totalEmails": {
            "type": "integer",
            "format": "int32"
          },
          "fileHighlightings": {
            "type": "object"
          },
          "emailSuggestions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "totalFolders": {
            "type": "integer",
            "format": "int32"
          },
          "folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Folder1"
            }
          },
          "fileSuggestions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "totalFiles": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AccessVerificationCallbackOptionsParams": {
        "type": "object",
        "properties": {
          "tag_group": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "AccessVerificationCallbackOptions": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "params": {
            "$ref": "#/components/schemas/AccessVerificationCallbackOptionsParams"
          }
        }
      },
      "AccessVerificationMetadata": {
        "type": "object",
        "properties": {
          "html_label": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "hide_select_all": {
            "type": "boolean"
          }
        }
      },
      "AccessVerificationField": {
        "type": "object",
        "properties": {
          "mandatory": {
            "type": "boolean"
          },
          "options_typeahead_callback": {
            "$ref": "#/components/schemas/AccessVerificationCallbackOptions"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "maxlength": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/AccessVerificationMetadata"
          }
        }
      },
      "AccessVerificationForm": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessVerificationField"
            }
          },
          "id": {
            "type": "string"
          },
          "assetClassId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "AccessVerificationData": {
        "type": "object",
        "properties": {
          "forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessVerificationForm"
            }
          }
        }
      },
      "AccessVerification": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AccessVerificationData"
          }
        }
      },
      "AccessVerificationApprovalPostRequest": {
        "type": "object",
        "properties": {
          "approvalStatus": {
            "type": "string",
            "enum": [
              "approved",
              "denied"
            ]
          },
          "comment": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "approvalStatus"
        ]
      },
      "AccessVerificationResponse": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "string",
            "format": "uuid"
          },
          "answers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "fieldId"
        ]
      },
      "AccessVerificationForm1": {
        "type": "object",
        "properties": {
          "formId": {
            "type": "string",
            "format": "uuid"
          },
          "assetClassId": {
            "type": "string",
            "format": "uuid"
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessVerificationResponse"
            }
          }
        },
        "required": [
          "assetClassId",
          "formId",
          "responses"
        ]
      },
      "AccessVerificationPostRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "submitted",
              "cancelled"
            ]
          },
          "forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessVerificationForm1"
            }
          }
        },
        "required": [
          "status"
        ]
      },
      "AccessVerificationRequirementPostRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "submitted",
              "cancelled"
            ]
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessVerificationResponse"
            }
          },
          "accessVerificationIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "accessVerificationIds",
          "status"
        ]
      },
      "AccessVerificationFile": {
        "type": "object",
        "properties": {
          "objectGuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "VerifiedAccessVerification": {
        "type": "object",
        "properties": {
          "verifiedAccessVerifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessVerificationFile"
            }
          }
        }
      },
      "VerifiedAccessVerificationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VerifiedAccessVerification"
          },
          "initiateUploadResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Upload"
            }
          }
        }
      },
      "ScimMeta": {
        "type": "object",
        "properties": {
          "lastModified": {
            "type": "string"
          },
          "resourceType": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "created": {
            "type": "string"
          }
        }
      },
      "ScimMultiValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "primary": {
            "type": "boolean"
          }
        }
      },
      "ScimUser": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/ScimMeta"
          },
          "userName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "userType": {
            "type": "string"
          },
          "preferredLanguage": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimMultiValue"
            }
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimMultiValue"
            }
          },
          "photos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimMultiValue"
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimMultiValue"
            }
          }
        }
      },
      "ScimUsers": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "totalResults": {
            "type": "integer",
            "format": "int32"
          },
          "itemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimUser"
            }
          }
        }
      },
      "ScimMultiValueMobile": {
        "type": "object",
        "properties": {
          "primary": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ScimMultiValue1": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "pattern": "^[A-Za-z0-9 _-]+$"
          }
        }
      },
      "ScimUsersPostRequest": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "password": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "pattern": "^[^<>]+$"
          },
          "userType": {
            "type": "string",
            "pattern": "^[A-Za-z0-9_-]+$"
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimMultiValueMobile"
            }
          },
          "roles": {
            "type": "array",
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/ScimMultiValue1"
            }
          },
          "userName": {
            "type": "string",
            "format": "email"
          },
          "notify": {
            "type": "boolean",
            "default": false
          },
          "userMustChange": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "schemas",
          "userName"
        ]
      },
      "DataRetentionOption": {
        "type": "object",
        "properties": {
          "remoteWipe": {
            "type": "boolean",
            "default": false
          },
          "deleteUnsharedData": {
            "type": "boolean",
            "default": null,
            "nullable": true
          },
          "retainData": {
            "type": "boolean",
            "default": null,
            "nullable": true
          },
          "retainPermissionToSharedData": {
            "type": "boolean",
            "default": false
          },
          "retainToUser": {
            "type": "string",
            "default": false
          }
        }
      },
      "ScimUsersPutRequest": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "password": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "pattern": "^[^<>]+$"
          },
          "userType": {
            "type": "string",
            "pattern": "^[A-Za-z0-9_-]+$"
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScimMultiValueMobile"
            }
          },
          "roles": {
            "type": "array",
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/ScimMultiValue1"
            }
          },
          "active": {
            "type": "boolean"
          },
          "userTypeDemotionOptions": {
            "$ref": "#/components/schemas/DataRetentionOption"
          }
        },
        "required": [
          "schemas"
        ]
      },
      "LocationList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      }
    }
  }
}
