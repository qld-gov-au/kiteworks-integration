{
    "host": "filetransfer.services.qld.gov.au",
    "schemes": [
        "https"
    ],
    "basePath": "/",
    "swagger": "2.0",
    "info": {
        "version": "28",
        "title": "Kiteworks API Documentation"
    },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://filetransfer.services.qld.gov.au/oauth/auth",
      "tokenUrl": "https://filetransfer.services.qld.gov.au/oauth/token",
      "scopes": {
        "*/*/*": "Grants full access"
      }
    }
  },
  "security": [
    {
      "OAuth2": [
        "*/*/*"
      ]
    }
  ],
    "paths": {
        "/rest/activities": {
            "get": {
                "tags": [
                    "activities"
                ],
                "summary": "Return the list of all Activities",
                "description": "Return the list of all Activities.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Activity"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "noDayBack",
                        "description": "Number of days back to search",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "description": "Start date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "description": "End date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "description": "All or my activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "search",
                        "description": "Search by mail body, subject and sender/recipients",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "Activity type",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "transactionId",
                        "description": "Transaction ID associated with the activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/availableLdapGroups": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Returns a list of available LDAP groups.",
                "description": "Returns a list of available LDAP groups.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AvailableLdapGroup"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "description": "Text to search for in cn, dn or description.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/clients": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "List clients",
                "description": "Return a list of clients",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Client"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Client name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Client name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "description:contains",
                        "description": "Client description. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Create a client",
                "description": "Create a new client that will be able to access the kiteworks system.\n    e.g.: A new mobile app that is customized for your company.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_EXISTS<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_NOT_INTEGER<br />ERR_INPUT_MIN_VALUE"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Details of the client",
                        "schema": {
                            "$ref": "#/definitions/Client.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/clients/{client_id}/scopes": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "List scopes of a client",
                "description": "Return a list of scopes for a specific client.\n    This returns the methods that this client is allowed to use\n    such as folders, files, members, comments, etc.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "client_id",
                        "description": "ID of the client whose scopes to be retrieved",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/admin/clients/{id}": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Get a client",
                "description": "Return the admin settings of a specified client.\n    e.g.: I want the admin settings for my iOS client; pin timeout, token lifetime, etc., ",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the client to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "put": {
                "tags": [
                    "admin"
                ],
                "summary": "Update a client",
                "description": "Update the admin settings for the specified client",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the client to be updated",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Details of the client",
                        "schema": {
                            "$ref": "#/definitions/Client.Put"
                        },
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "admin"
                ],
                "summary": "Delete a client",
                "description": "Delete a client from the client list.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the client to be deleted",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/admin/devices": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "List devices",
                "description": "Return a list of devices. e.g.: Returns a list of devices, per user,\n    that have authenticated on this server.\n    The list includes the name of the device (iPad, iPhone, etc),\n    install tag id, client id, and remote wipe flag.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Device"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "installTagId",
                        "description": "Unique identifier of install tag for this Device",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "installTagId:contains",
                        "description": "Unique identifier of install tag for this Device. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "description": "Unique identifier of user for this Device",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId:in",
                        "description": "Unique identifier of user for this Device. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "clientId",
                        "description": "Unique identifier of client for this Device",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "clientId:contains",
                        "description": "Unique identifier of client for this Device. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Add a device",
                "description": "Add a device. This method is used when a user logs in to kiteworks\n    to track the device they use.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />Errors\\ERR_ENTITY_EXISTS<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Details of the device",
                        "schema": {
                            "$ref": "#/definitions/Device.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/devices/actions/wipe": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Remote wipe the specified device",
                "description": "Set the remote wipe flag for the specified install_tag_id",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Details of device to wipe",
                        "schema": {
                            "$ref": "#/definitions/RemoteWipe.Post"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/admin/devices/{id}": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Get a device",
                "description": "Return the details of a specified device. Given the device id,\n    return the device name, install tag id, client id, and remote wipe flag.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Device"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the device to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "put": {
                "tags": [
                    "admin"
                ],
                "summary": "Update a device",
                "description": "Update the details of a device. Can change the mobile key store and messaging registration token.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the device to be updated",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Details of the device",
                        "schema": {
                            "$ref": "#/definitions/Device.Put"
                        },
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "admin"
                ],
                "summary": "Delete a device",
                "description": "Delete a device given the client id",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the device to be deleted",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/admin/devices/{install_tag_id}/wipe": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Get the wipe status",
                "description": "Returns the remote wipe status of a specified device identified by install_tag_id",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "install_tag_id",
                        "description": "ID of the device to be retrieved",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/admin/hostnames": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "List hostnames",
                "description": "Returns a list of hostnames",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hostname"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "admin"
                ],
                "summary": "Deletes list of hostnames",
                "description": "Deletes list of hostnames.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Create an alias hostname",
                "description": "Create an alias hostname.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_EXISTS<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_NOT_BOOLEAN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "comment to activity",
                        "schema": {
                            "$ref": "#/definitions/Hostname.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/hostnames/{id}": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Returns the details of hostname of the specified ID.",
                "description": "Returns the details of hostname of the specified ID.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hostname"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the hostname to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "put": {
                "tags": [
                    "admin"
                ],
                "summary": "Disable / enable alias hostname",
                "description": "Disable / enable the specified hostname.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the hostname to disable",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "comment to activity",
                        "schema": {
                            "$ref": "#/definitions/Hostname.Put"
                        },
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "admin"
                ],
                "summary": "Mark specified hostname as deleted.",
                "description": "Marks the specified hostname as deleted.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the hostname",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/admin/ldapGroups": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Returns a list of LDAP groups.",
                "description": "Returns a list of LDAP groups that have been enabled through the kiteworks admin.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LdapGroup"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "description": "LDAP group name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "LDAP group name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "description": "LDAP group Email",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "email:contains",
                        "description": "LDAP group Email. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Create an LDAP group",
                "description": "Creates an LDAP group",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_REQUIRED<br />ERR_INPUT_INVALID_EMAIL"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The LDAP group details",
                        "schema": {
                            "$ref": "#/definitions/LdapGroup.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/ldapGroups/{id}": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Gets an LDAP group",
                "description": "Returns the details of a specified LDAP group. This includes the settings from the admin.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LdapGroup"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the LDAP group to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "put": {
                "tags": [
                    "admin"
                ],
                "summary": "Updates an LDAP group",
                "description": "Updates an LDAP group",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the LDAP to update",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The LDAP group details",
                        "schema": {
                            "$ref": "#/definitions/LdapGroup.Put"
                        },
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "admin"
                ],
                "summary": "Deletes an LDAP group",
                "description": "Deletes an LDAP group",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the LDAP group to delete",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/admin/locations": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "List locations",
                "description": "Returns a list of available kiteworks locations.\n    Locations are logical collection of multiple kiteworks servers,\n    usually with a common geography or particular purpose.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Create a location entry.",
                "description": "Creates a location entry by providing a name.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_SYSTEM_ADMIN<br />Errors\\ERR_ENTITY_EXISTS<br />ERR_INPUT_INVALID_FORMAT<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The location details",
                        "schema": {
                            "$ref": "#/definitions/Location.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/locations/{id}": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Return location name.",
                "description": "Returns the name of a specified location.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the location to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "admin"
                ],
                "summary": "Delete a location.",
                "description": "Delete the specified location.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_SYSTEM_ADMIN<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the location to remove from",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/admin/mail": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "List emails",
                "description": "Returns the list of all emails for this user.\n    This includes sent emails, received emails, draft emails, and request a file emails.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Email"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "senderId",
                        "description": "Unique identifier of User who sent Email",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "senderId:in",
                        "description": "Unique identifier of User who sent Email. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "date",
                        "description": "Email creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "date:gt",
                        "description": "Email creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "date:gte",
                        "description": "Email creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "date:lt",
                        "description": "Email creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "date:lte",
                        "description": "Email creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified_date",
                        "description": "Email modification date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified_date:gt",
                        "description": "Email modification date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified_date:gte",
                        "description": "Email modification date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified_date:lt",
                        "description": "Email modification date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified_date:lte",
                        "description": "Email modification date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Indicates that Email is deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "emailPackageId",
                        "description": "Email Package unique identifier",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "emailPackageId:in",
                        "description": "Email Package unique identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "templateId",
                        "description": "Email Template unique identifier",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "templateId:in",
                        "description": "Email Template unique identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Email status",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "isPreview",
                        "description": "Whether the email is a preview email",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "isUserSent",
                        "description": "Whether the email was sent by some user",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "webFormId",
                        "description": "Email web form ID",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "webFormId:contains",
                        "description": "Email web form ID. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    }
                ]
            }
        },
        "/rest/admin/mail/actions/withdrawFiles/users/{userId}": {
            "delete": {
                "tags": [
                    "admin"
                ],
                "summary": "Withdraw all files from deleted/demoted users' emails",
                "description": "Withdraw all files from deleted/demoted users' emails",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "description": "ID of the user to withdraw files",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "emailId:in",
                        "description": "A list of email ids which will be processed",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/profiles": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "List user types",
                "description": "Returns a list of user types supported by kiteworks. e.g.:\n    Today we return Standard and Restricted",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Profile"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Profile name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Profile name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/profiles/mappingOrder": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Get profile mapping order",
                "description": "Get profile mapping order that determines application of filters on login",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ProfileMappingOrder"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "admin"
                ],
                "summary": "Update profile mapping order",
                "description": "Update profile mapping order that determines application of filters on login",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_NOT_BOOLEAN<br />ERR_INPUT_NOT_ARRAY_OF_INTEGERS<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "profile ordering",
                        "schema": {
                            "$ref": "#/definitions/ProfileMappingOrder.Put"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/profiles/mappings": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Get profile mapping results for user",
                "description": "Get profile mapping results for user",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ProfileMappingsTest"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "user",
                        "description": "User to test mappings for",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/admin/profiles/{id}": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Return an user type",
                "description": "Returns the details of a specified user type. e.g.: Returns user type id and name.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Profile"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user type to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/admin/profiles/{id}/mappings": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Get profile mapping details",
                "description": "Get profile mapping details for user profile",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ProfileMappings"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Id of the profile to get mapping details for",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "put": {
                "tags": [
                    "admin"
                ],
                "summary": "Update profile mapping details",
                "description": "Update profile mapping details for user profile",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_NOT_BOOLEAN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Profile mapping details",
                        "schema": {
                            "$ref": "#/definitions/ProfileMappingChanges.Put"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Id of the profile to get mapping details for",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/profiles/{id}/users": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Return list of users with the specified types",
                "description": "Returns the list of users who have the specified type.\n    e.g.: Return me the user names and email addresses of all the Restricted Users.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user type to retrieve users for",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "description": "The user's email",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "email:contains",
                        "description": "The user's email. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "The name of the user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "The name of the user. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "metadata",
                        "description": "The metadata of the user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "metadataContains",
                        "description": "The metadata of the user. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Whether the user has been deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "active",
                        "description": "Whether the user is an actual kitework user",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "description": "Whether the user is verified",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "suspended",
                        "description": "Whether the user is suspended",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "isRecipient",
                        "description": "Whether user is recipient",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "allowsCollaboration",
                        "description": "Whether user's profile allows collaboration access",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "User creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "User creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "User creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "User creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "User creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locate_id",
                        "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "put": {
                "tags": [
                    "admin"
                ],
                "summary": "Change user type",
                "description": "Change user type for specified user",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_NOT_BOOLEAN<br />ERR_INPUT_ATTRIBUTE_FORBIDDEN<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_NOT_STRING"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user type",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The users details",
                        "schema": {
                            "$ref": "#/definitions/UserDemoteOptions.Post"
                        }
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "IDs of users, who are going to be assigned to the user type",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/sources": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "List all added sources",
                "description": "Returns a list of all available ECM sources.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Source"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "include_kw",
                        "description": "Include KW",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Add assigned ECM source",
                "description": "Add assigned source.",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "source details",
                        "schema": {
                            "$ref": "#/definitions/Source.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/sources/{id}": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Returns requested assigned ECM source",
                "description": "Returns requested assigned source.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Source"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the assigned source to be retrieved",
                        "type": "string",
                        "required": true
                    }
                ]
            },
            "put": {
                "tags": [
                    "admin"
                ],
                "summary": "Updates details of the specified ECM source",
                "description": "Updates requested source.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the source to update",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "source details",
                        "schema": {
                            "$ref": "#/definitions/Source.Put"
                        },
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "admin"
                ],
                "summary": "Deletes specified assigned source",
                "description": "Deletes specified assigned source.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_SYSTEM_ADMIN<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the assigned source to be deleted.",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/admin/users": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Get a list of Users",
                "description": "Returns a list of Users in the system.\n    This call will only work for users with admin access.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "email",
                        "description": "The user's email",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "email:contains",
                        "description": "The user's email. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "The name of the user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "The name of the user. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "metadata",
                        "description": "The metadata of the user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "metadataContains",
                        "description": "The metadata of the user. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Whether the user has been deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "active",
                        "description": "Whether the user is an actual kitework user",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "description": "Whether the user is verified",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "suspended",
                        "description": "Whether the user is suspended",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "isRecipient",
                        "description": "Whether user is recipient",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "allowsCollaboration",
                        "description": "Whether user's profile allows collaboration access",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "User creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "User creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "User creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "User creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "User creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locate_id",
                        "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Create a User",
                "description": "Creates a new User in the system by specifying an email address and name.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_INVALID_EMAIL<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_PASSWORD_COMPLEXITY_ERROR<br />ERR_INPUT_NOT_NUMERIC<br />ERR_INPUT_MIN_VALUE"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The user details",
                        "schema": {
                            "$ref": "#/definitions/User.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/users/migrateEmails": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Endpoint to bulk update users emails",
                "description": "Endpoint to bulk update users emails. Accepts array of old and new user email pairs",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "422": {
                        "description": "ERR_INPUT_INVALID_EMAIL<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_PASSWORD_COMPLEXITY_ERROR"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The user details",
                        "schema": {
                            "$ref": "#/definitions/UsersEmailMigration.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/users/migrateEmailsCsv": {
            "post": {
                "tags": [
                    "admin"
                ],
                "summary": "Endpoint to bulk update users emails",
                "description": "Endpoint to bulk update users emails. Accepts CSV file. ",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_NOT_BOOLEAN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "formData",
                        "name": "body",
                        "description": "CSV file",
                        "type": "file",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "deleteIfExists",
                        "description": "Delete users which have emails mentioned in any newEmail field",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ]
            }
        },
        "/rest/admin/users/{id}": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Get User",
                "description": "Returns the details of the specified user (this includes email address and name)",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user to retrieve",
                        "type": "string",
                        "required": true
                    }
                ]
            },
            "put": {
                "tags": [
                    "admin"
                ],
                "summary": "Update User",
                "description": "Updates the details of a user.\n    e.g.: Change their name, set as deleted, set as active or inactive, etc.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user to update",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The user details",
                        "schema": {
                            "$ref": "#/definitions/User.Put"
                        },
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "admin"
                ],
                "summary": "Deletes a User",
                "description": "Mark the specified user as deleted. This user will still be returned in the GET Users query.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_NOT_BOOLEAN<br />ERR_INPUT_ATTRIBUTE_FORBIDDEN<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_NOT_STRING"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user to delete",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "retainToUser",
                        "description": "New owner id to re-assign data to (required if retainData or retainPermissionToSharedData is True)",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "remoteWipe",
                        "description": "Remote wipe data on desktop and mobile devices",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "deleteUnsharedData",
                        "description": "Delete all data owned by the user (required and must be True if retainData is False and vice versa)",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "retainData",
                        "description": "Retain users data (required and must be True if deleteUnsharedData is False and vice versa)",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "retainPermissionToSharedData",
                        "description": "Retain permissions to shared data",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "withdrawFileLinks",
                        "description": "Delete attached files in emails sent by deleted/demoted users",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "withdrawRequestFiles",
                        "description": "Delete request files emails sent by deleted/demoted users",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/users/{id}/adminRoles": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Return admin roles of the specified user id.",
                "description": "Returns the details of all adminroles (active and deleted users)\n    with the specified user id.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AdminRole"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user to retrieve admin role",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/users/{id}/devices": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "List devices for a user",
                "description": "Return a list of devices for a specific user",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Device"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user whose devices to be retrieved",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "installTagId",
                        "description": "Unique identifier of install tag for this Device",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "installTagId:contains",
                        "description": "Unique identifier of install tag for this Device. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "description": "Unique identifier of user for this Device",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId:in",
                        "description": "Unique identifier of user for this Device. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "clientId",
                        "description": "Unique identifier of client for this Device",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "clientId:contains",
                        "description": "Unique identifier of client for this Device. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/admin/users/{id}/settings": {
            "get": {
                "tags": [
                    "admin"
                ],
                "summary": "Get User Settings",
                "description": "Returns the user settings",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Settings"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user to retrieve settings for",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/adminRoles": {
            "get": {
                "tags": [
                    "adminRoles"
                ],
                "summary": "List admin roles",
                "description": "Returns a list of admin roles supported by kiteworks. e.g.:\n                  Today we return Application and System",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AdminRole"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/adminRoles/{id}": {
            "get": {
                "tags": [
                    "adminRoles"
                ],
                "summary": "Return an admin role",
                "description": "Returns the details of a specified admin role. e.g.: Returns id and admin role name.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AdminRole"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the adminrole to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/adminRoles/{id}/users": {
            "get": {
                "tags": [
                    "adminRoles"
                ],
                "summary": "Return list of users with the specified admin role",
                "description": "Returns the list of admins who have the specified role. e.g.:\n                  Return me the user names and email addresses of all the Application admins.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the admin role to retrieve users for",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "description": "The user's email",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "email:contains",
                        "description": "The user's email. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "The name of the user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "The name of the user. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "metadata",
                        "description": "The metadata of the user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "metadataContains",
                        "description": "The metadata of the user. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Whether the user has been deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "active",
                        "description": "Whether the user is an actual kitework user",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "description": "Whether the user is verified",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "suspended",
                        "description": "Whether the user is suspended",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "isRecipient",
                        "description": "Whether user is recipient",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "allowsCollaboration",
                        "description": "Whether user's profile allows collaboration access",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "User creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "User creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "User creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "User creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "User creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locate_id",
                        "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/adminRoles/{id}/users/{user_id}": {
            "put": {
                "tags": [
                    "adminRoles"
                ],
                "summary": "Promote a user as admin role",
                "description": "Promote a user to include an admin role. The user will become a system or application admin.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_SYSTEM_ADMIN<br />Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Admin role",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "user_id",
                        "description": "ID of user to promote admin role",
                        "type": "string",
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "adminRoles"
                ],
                "summary": "Delete a user as admin role",
                "description": "Delete a user as admin role.\n                  This method does not delete the user but only the role of admin for that user.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_SYSTEM_ADMIN<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the admin role to remove from the specified user.",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "user_id",
                        "description": "ID of the user as admin role to be deleted",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/clients": {
            "get": {
                "tags": [
                    "clients"
                ],
                "summary": "List clients",
                "description": "Return a list of clients",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Client"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Client name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Client name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "description:contains",
                        "description": "Client description. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "clients"
                ],
                "summary": "Create a client",
                "description": "Create a new client that will be able to access the kiteworks system.\n               e.g.: A new mobile app that is customized for your company.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_EXISTS<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_NOT_INTEGER<br />ERR_INPUT_MIN_VALUE"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Details of the client",
                        "schema": {
                            "$ref": "#/definitions/Client.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/clients/me": {
            "get": {
                "tags": [
                    "clients"
                ],
                "summary": "Get current client",
                "description": "Return the settings of the current client.\n               e.g.: I want the admin settings for my client; pin timeout, token lifetime, etc., ",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false
            }
        },
        "/rest/clients/{id}": {
            "get": {
                "tags": [
                    "clients"
                ],
                "summary": "Get a client",
                "description": "Return the admin settings of a specified client.\n               e.g.: I want the admin settings for my iOS client; pin timeout, token lifetime, etc., ",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the client to be retrieved",
                        "type": "string",
                        "required": true
                    }
                ]
            },
            "put": {
                "tags": [
                    "clients"
                ],
                "summary": "Update a client",
                "description": "Update the admin settings for the specified client",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the client to be updated",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Details of the client",
                        "schema": {
                            "$ref": "#/definitions/Client.Put"
                        },
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "clients"
                ],
                "summary": "Delete a client",
                "description": "Delete a client from the client list.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the client to be deleted",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/clients/{id}/scopes": {
            "get": {
                "tags": [
                    "clients"
                ],
                "summary": "List scopes of a client",
                "description": "Return a list of scopes for a specific client.\n    This returns the methods that this client is allowed to use\n    such as folders, files, members, comments, etc.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the client whose scopes to be retrieved",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/comments/{id}": {
            "get": {
                "tags": [
                    "comments"
                ],
                "summary": "Get Comment by ID",
                "description": "Returns the details of a comment based on ID. e.g.:\n               I want to know the file or folder this comment is attached to and the comment itself.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the comment to retrieve",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "put": {
                "tags": [
                    "comments"
                ],
                "summary": "Update Comment",
                "description": "Updates the text of a previously entered comment.",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_MAX_VALUE<br />ERR_INPUT_HTML_TAGS_INVALID<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the comment to update",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The comment details",
                        "schema": {
                            "$ref": "#/definitions/Comment.Put"
                        },
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "comments"
                ],
                "summary": "Delete a Comment",
                "description": "Deletes the comment with the specified id.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the comment to delete",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/devices": {
            "get": {
                "tags": [
                    "devices"
                ],
                "summary": "List devices",
                "description": "Return a list of devices. e.g.: Returns a list of devices, per user,\n                  that have authenticated on this server.\n                  The list includes the name of the device (iPad, iPhone, etc),\n                  install tag id, client id, and remote wipe flag.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Device"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "installTagId",
                        "description": "Unique identifier of install tag for this Device",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "installTagId:contains",
                        "description": "Unique identifier of install tag for this Device. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "description": "Unique identifier of user for this Device",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId:in",
                        "description": "Unique identifier of user for this Device. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "clientId",
                        "description": "Unique identifier of client for this Device",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "clientId:contains",
                        "description": "Unique identifier of client for this Device. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "devices"
                ],
                "summary": "Add a device",
                "description": "Add a device.\n                   This method is used when a user logs in to kiteworks to track the device they use.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />Errors\\ERR_ENTITY_EXISTS<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Details of the device",
                        "schema": {
                            "$ref": "#/definitions/Device.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/devices/me": {
            "get": {
                "tags": [
                    "devices"
                ],
                "summary": "Get current device info",
                "description": "Return the details of the current device.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Device"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "devices"
                ],
                "summary": "Update the currently signed-in device",
                "description": "Update the details of the current device. Can change the mobile key store and messaging registration token.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Details of the device",
                        "schema": {
                            "$ref": "#/definitions/Device.Put"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/devices/me/actions/wipe": {
            "patch": {
                "tags": [
                    "devices"
                ],
                "summary": "Tell the server the device had completed the requested wipe",
                "description": "Update the wipe flag to completed",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false
            }
        },
        "/rest/devices/{id}": {
            "get": {
                "tags": [
                    "devices"
                ],
                "summary": "Get a device",
                "description": "Return the details of a specified device. Given the device id,\n                  return the device name, install tag id, client id, and remote wipe flag.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Device"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the device to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "put": {
                "tags": [
                    "devices"
                ],
                "summary": "Update a device",
                "description": "Update the details of a device. Can change the mobile key store and messaging registration token.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the device to be updated",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Details of the device",
                        "schema": {
                            "$ref": "#/definitions/Device.Put"
                        },
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "devices"
                ],
                "summary": "Delete a device",
                "description": "Delete a device given the client id",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the device to be deleted",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/devices/{install_tag_id}/wipe": {
            "get": {
                "tags": [
                    "devices"
                ],
                "summary": "Get the wipe status",
                "description": "Returns the remote wipe status of a specified device identified by install_tag_id",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "install_tag_id",
                        "description": "Unique identifier of install tag for this device. Usually the serial number of device",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/dli/exports": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Return the list of all exports for all users",
                "description": "Return the list of all exports for all users",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Export"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "description": "Unique identifier of user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "user_id:in",
                        "description": "Unique identifier of user. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Status of the generated report",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "status:contains",
                        "description": "Status of the generated report. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/dli/exports/users/{id}": {
            "post": {
                "tags": [
                    "dli"
                ],
                "summary": "Start generating export for the specified user",
                "description": "Start generating export for the specified user",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Export"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER<br />ERR_INPUT_INVALID_DATE<br />ERR_INPUT_DATE_NOT_BEFORE<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_DATE_NOT_AFTER<br />ERR_INPUT_NOT_ARRAY<br />ERR_INPUT_NOT_IN_LIST"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "report types, start date, and end date",
                        "schema": {
                            "$ref": "#/definitions/Export.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/dli/exports/{id}": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Return information of an export such as status, download url, user ID, etc.",
                "description": "Return information of an export such as status, download url, user ID, etc.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Export"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the export",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "dli"
                ],
                "summary": "Delete the specified export.",
                "description": "Delete the specified export.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Export"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the export",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/dli/exports/{id}/content": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Download the generated export.",
                "description": "Download the generated export.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Export"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the export",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/dli/files/{fileId}/users/{userId}/activities": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Return the list of Activities for this file",
                "description": "Return the list of Activities for this file.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ActivityAdmin"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "fileId",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "description": "User Id",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "noDayBack",
                        "description": "Number of days back to search",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "description": "Start date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "description": "End date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "description": "All or my activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "search",
                        "description": "Search by mail body, subject and sender/recipients",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "Activity type",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "transactionId",
                        "description": "Transaction ID associated with the activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/dli/files/{id}": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Retrieve information about the file specified.",
                "description": "Retrieve information about the file specified. This includes file name,\n               created date, modified date, file deleted, locked, fingerprint, and links to file,\n               folder, and owner.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/File"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/dli/files/{id}/content": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Read file content",
                "description": "Read content of file",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "Range",
                        "description": "Bytes range to retrieve. Example: bytes=0-1024",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/dli/files/{id}/path": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Gets the file path by its ID",
                "description": "Gets the file path by its ID",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/dli/files/{id}/preview": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Retrieve information about the file preview.",
                "description": "Retrieve information about the file preview.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Preview"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/dli/files/{id}/versions": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "List versions",
                "description": "Returns a list of versions for a given file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Version"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Object id of file to retrieve versions for",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "File Version creation date",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "File Version creation date. Search for result that has this parameter value greater than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "File Version creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "File Version creation date. Search for result that has this parameter value less than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "File Version creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locate_id",
                        "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/dli/files/{id}/versions/{version_id}": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Allow DLI admin to get specified version",
                "description": "Returns the specified version of a file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Version"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Object id of file to retrieve versions for",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "version_id",
                        "description": "version ID",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/dli/files/{id}/versions/{version_id}/content": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Download specified version",
                "description": "Download specified version",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "version_id",
                        "description": "version ID for which to retrieve content",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "Range",
                        "description": "Bytes range to retrieve. Example: bytes=0-1024",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/dli/folders/{folderId}/users/{userId}/activities": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Return the list of activities for this folder of the specified user",
                "description": "Return the list of activities for this folder of the specified user",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ActivityAdmin"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "folderId",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "description": "User Id",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "noDayBack",
                        "description": "Number of days back to search",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "description": "Start date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "description": "End date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "description": "All or my activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "search",
                        "description": "Search by mail body, subject and sender/recipients",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "Activity type",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "transactionId",
                        "description": "Transaction ID associated with the activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/dli/folders/{id}": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Retrieve folder information.",
                "description": "Return folder information for the specified folder. e.g.:\n                  I want to know creation date, get a link to the folder,\n                  find out if the folder was deleted, etc.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Folder"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/dli/mail/{id}/attachments": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "List email attachments",
                "description": "Returns a list of attachments for a given mail.\n                       e.g.: I want to the id's of all the attachments for a mail I sent.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Attachment"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Mail id to retrieve attachments for",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "ref",
                        "description": "The email reference code (Mandatory if the email can be accessed without authentication)",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locate_id",
                        "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/dli/mail/{id}/recipients": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "List Recipients",
                "description": "Returns a list of recipients for a given email",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Recipient"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the email",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "Type for Recipient. TO,CC,BCC",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "ref",
                        "description": "The email reference (Mandatory if the email can be accessed without authentication)",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locate_id",
                        "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/dli/users/{id}/activities": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Return the list of all activities of the specified user",
                "description": "Return the list of all activities of the specified user",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ActivityAdmin"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "noDayBack",
                        "description": "Number of days back to search",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "description": "Start date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "description": "End date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "description": "All or my activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "search",
                        "description": "Search by mail body, subject and sender/recipients",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "Activity type",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "transactionId",
                        "description": "Transaction ID associated with the activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/dli/users/{id}/mail": {
            "get": {
                "tags": [
                    "dli"
                ],
                "summary": "Retrieve information about the mail specified be a user",
                "description": "Retrieve information about the mail specified by one user",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Email"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_LICENSE_DLI<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "senderId",
                        "description": "Unique identifier of User who sent Email",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "senderId:in",
                        "description": "Unique identifier of User who sent Email. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "isRecipient",
                        "description": "Unique identifier of User who receive Email",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "read",
                        "description": "Whether the email is read or not by current user",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "date",
                        "description": "Email creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "date:gt",
                        "description": "Email creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "date:gte",
                        "description": "Email creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "date:lt",
                        "description": "Email creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "date:lte",
                        "description": "Email creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified_date",
                        "description": "Email modification date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified_date:gt",
                        "description": "Email modification date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified_date:gte",
                        "description": "Email modification date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified_date:lt",
                        "description": "Email modification date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified_date:lte",
                        "description": "Email modification date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Indicates that Email is deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "emailPackageId",
                        "description": "Email Package unique identifier",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "emailPackageId:in",
                        "description": "Email Package unique identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "templateId",
                        "description": "Email Template unique identifier",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "templateId:in",
                        "description": "Email Template unique identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Email status",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "isPreview",
                        "description": "Whether the email is a preview email",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "isUserSent",
                        "description": "Whether the email was sent by some user",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "bucket",
                        "description": "Email bucket",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnCustomWebForm",
                        "description": "Return all emails include those with the custom web form",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "customWebFormOnly",
                        "description": "Return only emails with the custom web form",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "webFormId",
                        "description": "Email web form ID",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "webFormId:contains",
                        "description": "Email web form ID. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locate_id",
                        "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/favorites": {
            "post": {
                "tags": [
                    "favorites"
                ],
                "summary": "Add a favorite",
                "description": "Adding a favorite",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_EXISTS<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Object ID of the folder being added to favorites",
                        "schema": {
                            "$ref": "#/definitions/Favorite.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "get": {
                "summary": "List favorites",
                "description": "List favorites",
                "tags": [
                    "favorites"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "parentId:in",
                        "required": false,
                        "description": "Parent folder. Search for results that contain any of specified values of this parameter.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "excludeEc",
                        "required": false,
                        "description": "Do not return EC folder if set to true",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "parentId",
                        "required": false,
                        "description": "Parent folder",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List favorites",
                        "schema": {
                            "$ref": "#/definitions/FavoriteListOpenAPI2"
                        }
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_DENIED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/favorites/{id}": {
            "delete": {
                "tags": [
                    "favorites"
                ],
                "summary": "Remove a favorite",
                "description": "Deleting a favorite",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the favorite to be removed",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/files": {
            "delete": {
                "tags": [
                    "files"
                ],
                "summary": "Deletes list of files",
                "description": "Deletes list of files.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/actions/copy": {
            "post": {
                "summary": "Copy file(s) within KW or from EC Source",
                "description": "Copy file(s) within KW or from EC Source",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/FileCopyPostBodyRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File(s) have been moved successfully",
                        "schema": {
                            "$ref": "#/definitions/File"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_FILTER\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ACCESS_DENIED\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_COPIED_FROM_EC\n\nERR_ENTITY_EC_TO_EC\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_VIRUS_FOUND\n\nERR_ENTITY_RESTRICTED_EXTENSION\n\nERR_ENTITY_RESTRICTED_TYPE\n\nERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_IS_MY_DIR\n"
                    },
                    "413": {
                        "description": "ERR_SYSTEM_NO_STORAGE_AVAILABLE"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/files/actions/lock": {
            "patch": {
                "summary": "Bulk lock files",
                "description": "Bulk lock files",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/FileLockPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Files are locked successfully",
                        "schema": {
                            "$ref": "#/definitions/BulkOperationLockFile"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_DLP_LOCKED\n\nERR_ENTITY_IS_ATTACHMENT\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_VIRUS_FOUND\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/files/actions/mobileSyncItems": {
            "post": {
                "tags": [
                    "mobileSync",
                    "files"
                ],
                "summary": "Add multiple files to mobile sync list",
                "description": "Add multiple files to mobile sync list This operation will not return location headers for each entity created, if the inserted records are\n        required, returnEntity should be set to true.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_EXISTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "mobileSync",
                    "files"
                ],
                "summary": "Delete multiple files from user mobile sync list",
                "description": "Delete multiple files from user mobile sync list",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/actions/move": {
            "post": {
                "summary": "Move file(s) within KW or from EC Source",
                "description": "Move file(s) within KW or from EC Source",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/FileMovePostBodyRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File(s) have been moved successfully",
                        "schema": {
                            "$ref": "#/definitions/File"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_FILTER\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ACCESS_DENIED\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_COPIED_FROM_EC\n\nERR_ENTITY_EC_TO_EC\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_VIRUS_FOUND\n\nERR_ENTITY_RESTRICTED_EXTENSION\n\nERR_ENTITY_RESTRICTED_TYPE\n\nERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_IS_MY_DIR\n"
                    },
                    "413": {
                        "description": "ERR_SYSTEM_NO_STORAGE_AVAILABLE"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/files/actions/permanent": {
            "delete": {
                "tags": [
                    "files"
                ],
                "summary": "Permanently delete list of files",
                "description": "Permanently delete list of files. These files will no longer be accessible.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/actions/push": {
            "post": {
                "tags": [
                    "mobileSync",
                    "files"
                ],
                "summary": "Push files list to mobile sync list",
                "description": "Set list of files as mobile sync item for all folder members. This operation will not return location headers for each entity created, if the inserted records are\n        required, returnEntity should be set to true.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "mobileSync",
                    "files"
                ],
                "summary": "Un-Push collection of files",
                "description": "Un-Pushing files deletes these files from all folder members sync list.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/actions/recover": {
            "patch": {
                "tags": [
                    "files"
                ],
                "summary": "Recover files",
                "description": "Recovers bulk list of files.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/actions/scan": {
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "Triggers on demand AV/DLP scan on multiple files.",
                "description": "Attempts to trigger an AV/DLP scan on requested files.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "List of IDs of entities to scan. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/actions/unlock": {
            "patch": {
                "summary": "Bulk unlock files",
                "description": "Bulk unlock files",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/FileLockPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Files are unlocked successfully",
                        "schema": {
                            "$ref": "#/definitions/BulkOperationLockFile"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_DLP_LOCKED\n\nERR_ENTITY_IS_ATTACHMENT\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_VIRUS_FOUND\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/files/actions/zip": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "Download multiple files/folders as zip",
                "description": "Download multiple files/folders as zip",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "description": "The zip filename",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fileId:in",
                        "description": "List of file ID. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "folderId:in",
                        "description": "List of folder ID. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "username",
                        "description": "User email of files' requestor",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "extensions",
                        "description": "Filter by files with these extensions",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "utcOffset",
                        "description": "The user timezone offset in (seconds). UTC+08:00 = 28800",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/actions/zipStatus": {
            "get": {
                "summary": "Check multiple files/folders AV/DLP status",
                "description": "Check multiple files/folders AV/DLP status",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "required": false,
                        "description": "Controls whether to allow partial success",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "fileId:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "extensions",
                        "required": false,
                        "description": "Filter by files with these extensions",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "folderId:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All files/folders are clear"
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_FILTER\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_SYSTEM_TENANT_SUSPENDED\n\nERR_ACCESS_USER\n\nERR_ENTITY_VIRUS_FOUND\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_DLP_LOCKED\n\nERR_ENTITY_DLP_SCANNING\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_ENTITY_DELETED\n"
                    },
                    "422": {
                        "description": "ERR_LICENSE_EXPIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/files/{file_id}/activities": {
            "get": {
                "tags": [
                    "activities"
                ],
                "summary": "Return the list of Activities for this file",
                "description": "Return the list of Activities for this file.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Activity"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "file_id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "noDayBack",
                        "description": "Number of days back to search",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "description": "Start date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "description": "End date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "description": "All or my activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "search",
                        "description": "Search by mail body, subject and sender/recipients",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "Activity type",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "transactionId",
                        "description": "Transaction ID associated with the activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}": {
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "upload new version",
                "description": "uploads new file version",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_GROUP<br />ERR_INPUT_INVALID_DATE"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "body",
                        "description": "file content",
                        "type": "file",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "clientCreated",
                        "description": "Client created field for the file",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "formData",
                        "name": "clientModified",
                        "description": "Client modified field for the file",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ]
            },
            "get": {
                "summary": "Retrieve information about the file specified.",
                "description": "Retrieve information about the file specified.",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File is returned successfully",
                        "schema": {
                            "$ref": "#/definitions/File"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_FILTER\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ACCESS_DENIED\n\nERR_ENTITY_DELETED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "put": {
                "summary": "Update the details of the file specified",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/FileUpdateRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "File is updated successfully"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ACCESS_DENIED\n\nERR_ENTITY_DELETED\n"
                    },
                    "422": {
                        "description": "ERR_ENTITY_LOCKED\n\nERR_INVALID_PARAMETER\n\nERR_ENTITY_RESTRICTED_EXTENSION\n\nERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM\n\nERR_ENTITY_RESTRICTED_TYPE\n\nERR_ENTITY_RESTRICTED_TYPE_CUSTOM\n\nERR_ENTITY_RESTRICTED_TYPE_GROUP\n\nERR_ENTITY_EXISTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "delete": {
                "tags": [
                    "files"
                ],
                "summary": "Mark file for deletion.",
                "description": "Marks a file with the given ID as deleted. This file will be cleaned up\n                       after x days as set in the admin.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/files/{id}/actions/lock": {
            "patch": {
                "tags": [
                    "files"
                ],
                "summary": "Locks the file by its ID",
                "description": "Lock the given file from access.\n                  Other users will not be able to add a new version of this file\n                  until it is unlocked by the owner.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/actions/permanent": {
            "delete": {
                "tags": [
                    "files"
                ],
                "summary": "Permanently delete a file",
                "description": "Permanently delete the specified file. This file will no longer be accessible.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/files/{id}/actions/push": {
            "post": {
                "tags": [
                    "mobileSync",
                    "files"
                ],
                "summary": "Push file to mobile sync list",
                "description": "Set file as mobile sync item for all folder members.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "mobileSync",
                    "files"
                ],
                "summary": "Un-Push file",
                "description": "Un-Pushing file deletes this file from all folder members sync list.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "File id",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/actions/recover": {
            "patch": {
                "tags": [
                    "files"
                ],
                "summary": "Recovers deleted file.",
                "description": "Recover deleted file by its ID. This marks an already deleted file as not deleted.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/actions/return": {
            "patch": {
                "tags": [
                    "files"
                ],
                "summary": "Returns file to EC source",
                "description": "Returns file to EC source",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Object ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/actions/scan": {
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "Triggers on demand AV/DLP file scan.",
                "description": "Attempts to trigger an AV/DLP scan on requested file.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/actions/unlock": {
            "patch": {
                "tags": [
                    "files"
                ],
                "summary": "Unlocks the file by its ID",
                "description": "Unlock the given file.\n                  This will allow other users in the folder to upload a new version of the file.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED_BY_ANOTHER_USER<br />Errors\\ERR_ENTITY_UNLOCKED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/comments": {
            "get": {
                "tags": [
                    "comments",
                    "files"
                ],
                "summary": "Get Comments for a file",
                "description": "Returns all comments for a file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Comment"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "File object ID of the comments to retrieve",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "parentId",
                        "description": "Parent Comment unique identifier",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "parentId:in",
                        "description": "Parent Comment unique identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "description": "Unique identifier of comment author",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId:in",
                        "description": "Unique identifier of comment author. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "Comment creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "Comment creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "Comment creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "Comment creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "Comment creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified",
                        "description": "Comment modification date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gt",
                        "description": "Comment modification date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gte",
                        "description": "Comment modification date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lt",
                        "description": "Comment modification date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lte",
                        "description": "Comment modification date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "contents:contains",
                        "description": "Comment content. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "comments",
                    "files"
                ],
                "summary": "Create a Comment on a file",
                "description": "Create a Comment on a file.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_MAX_VALUE<br />ERR_INPUT_HTML_TAGS_INVALID<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Object ID of the file being commented on",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The comment details",
                        "schema": {
                            "$ref": "#/definitions/Comment.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/content": {
            "get": {
                "summary": "Download a file",
                "description": "Download a file",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File download request is successful",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_DLP_LOCKED\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_VIRUS_FOUND"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/files/{id}/externalEdit": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "Get access token for external file edit.",
                "description": "Retrieve refresh token for external file edit.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/RefreshToken"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/members": {
            "get": {
                "summary": "List of members in with access to the file",
                "description": "Returns a list of members in with access to the file",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "roleId",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "groupId:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "roleId:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId:in",
                        "required": false,
                        "description": "Member id list recommended request size <= 100",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "groupId",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "List of members in with access to the file",
                        "schema": {
                            "$ref": "#/definitions/Members"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_SYSTEM_TENANT_SUSPENDED\n\nERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n"
                    },
                    "422": {
                        "description": "ERR_LICENSE_EXPIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "delete": {
                "summary": "Delete all members in file",
                "description": "Delete member from the file",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return user's all shared files and permissions"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/files/{id}/members/ldapGroup": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "List members",
                "description": "Returns a list of group members in with access to the file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MemberGroup"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "groupId",
                        "description": "Unique identifier of group",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "groupId:in",
                        "description": "Unique identifier of group. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "roleId",
                        "description": "Unique identifier of role",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "roleId:in",
                        "description": "Unique identifier of role. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/members/ldapGroup/{ldap_group_id}": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "display group member",
                "description": "Display the specified group member in the file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Member"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "ldap_group_id",
                        "description": "id of the member",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/members/{member_user_id}": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "display member",
                "description": "Display the specified member in the file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Member"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "member_user_id",
                        "description": "ID of the member",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "summary": "Delete member from the file",
                "description": "Delete member from the file",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "member_user_id",
                        "required": true,
                        "description": "The member user ID",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return user's all shared files and permissions"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "put": {
                "summary": "Update members in the file",
                "description": "Update members in the file",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "member_user_id",
                        "required": true,
                        "description": "The member user ID",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return user's all shared files and permissions"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_IS_MY_DIR\n\nERR_ENTITY_IS_SYNC_DIR\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n"
                    },
                    "409": {
                        "description": "ERR_ENTITY_EXISTS\n\nERR_ENTITY_ROLE_IS_ASSIGNED\n\nERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/files/{id}/path": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "Gets the file path by its ID",
                "description": "Gets the file path by its ID",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/preview": {
            "get": {
                "summary": "Retrieve information about the file preview.",
                "description": "Retrieve information about the file preview.",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_FILTER\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ACCESS_DENIED\n\nERR_ENTITY_DELETED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/files/{id}/tasks": {
            "get": {
                "tags": [
                    "files",
                    "tasks"
                ],
                "summary": "Get Tasks for a file",
                "description": "Returns all tasks for a file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "File object ID of the task to retrieve",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "assigneeId",
                        "description": "Assigned User unique identifier",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "assigneeId:in",
                        "description": "Assigned User unique identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "due",
                        "description": "Task due date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "due:gt",
                        "description": "Task due date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "due:gte",
                        "description": "Task due date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "due:lt",
                        "description": "Task due date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "due:lte",
                        "description": "Task due date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "parentId",
                        "description": "Parent Comment identifier",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "parentId:in",
                        "description": "Parent Comment identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "description": "Identifier of User who created a Task",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId:in",
                        "description": "Identifier of User who created a Task. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "Task creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "Task creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "Task creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "Task creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "Task creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified",
                        "description": "Task modification date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gt",
                        "description": "Task modification date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gte",
                        "description": "Task modification date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lt",
                        "description": "Task modification date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lte",
                        "description": "Task modification date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "contents:contains",
                        "description": "Task content. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Task status",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Whether the task has been deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "files",
                    "tasks"
                ],
                "summary": "Create a Task on a file",
                "description": "Creates a task on a file",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_DATE_NOT_AFTER<br />ERR_INPUT_HTML_TAGS_INVALID"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Object ID of the file task is created on",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The task details",
                        "schema": {
                            "$ref": "#/definitions/Task.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/versions": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "List versions",
                "description": "Returns a list of versions for a given file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Version"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Object id of file to retrieve versions for",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "File Version creation date",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "File Version creation date. Search for result that has this parameter value greater than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "File Version creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "File Version creation date. Search for result that has this parameter value less than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "File Version creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locate_id",
                        "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "Uploads a new file version",
                "description": "Uploads a new file version",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_GROUP<br />Errors\\ERR_ENTITY_EXISTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file to replace",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "body",
                        "description": "file content",
                        "type": "file",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ]
            }
        },
        "/rest/files/{id}/versions/{version_id}": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "Get specified version",
                "description": "Returns the specified version of a file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Version"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Object id of file to retrieve versions for",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "version_id",
                        "description": "version ID",
                        "type": "string",
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "files"
                ],
                "summary": "Deletes the specified file version",
                "description": "Delete version",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Object id of file to delete version from",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "version_id",
                        "description": "version ID to delete",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/files/{id}/versions/{version_id}/actions/promote": {
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "promote specified file version",
                "description": "promote version",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Object id of file to promote version from",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "version_id",
                        "description": "version ID to promote to version 0",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/versions/{version_id}/actions/scan": {
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "Triggers on demand AV/DLP file scan.",
                "description": "Attempts to trigger an AV/DLP scan on requested file version.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Object ID of the file to scan",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "version_id",
                        "description": "Version ID of the file to scan",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/versions/{version_id}/content": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "download specified version",
                "description": "download specified version",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "version_id",
                        "description": "version ID for which to retrieve content",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "Range",
                        "description": "Bytes range to retrieve. Example: bytes=0-1024",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/files/{id}/versions/{version_id}/preview": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "Retrieve information about the file preview.",
                "description": "Retrieve information about the file preview.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Preview"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Object id of file to retrieve version preview for",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "version_id",
                        "description": "version ID",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/folders": {
            "delete": {
                "tags": [
                    "folders"
                ],
                "summary": "Deletes list of folders",
                "description": "Deletes list of folders.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/actions/favorite": {
            "post": {
                "tags": [
                    "favorites",
                    "folders"
                ],
                "summary": "Set multiple folders as favorite",
                "description": "Set multiple folders as favorite",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_EXISTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "favorites",
                    "folders"
                ],
                "summary": "Removes specified folders from favorites",
                "description": "Removes specified folders from favorites",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/actions/permanent": {
            "delete": {
                "tags": [
                    "folders"
                ],
                "summary": "Permanently delete the specified folders.",
                "description": "Permanently delete the specified folders.\n               These folders will no longer be accessible by any means.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/actions/recover": {
            "patch": {
                "tags": [
                    "folders"
                ],
                "summary": "Recover deleted folders.",
                "description": "Recover deleted folders and their children files and folders.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/actions/scan": {
            "post": {
                "tags": [
                    "folders"
                ],
                "summary": "Triggers on demand AV/DLP scan on multiple folders.",
                "description": "Attempts to trigger an AV/DLP scan on requested folders.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "List of IDs of entities to scan. Search for results that contain any of specified values of this parameter.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/shared": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "List top level shared folders",
                "description": "Return the list of top level shared folders.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Folder"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Folder name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Folder name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "description": "Unique identifier of Object creator",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId:in",
                        "description": "Unique identifier of Object creator. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "Object creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "Object creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "Object creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "Object creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "Object creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified",
                        "description": "Object modification date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gt",
                        "description": "Object modification date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gte",
                        "description": "Object modification date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lt",
                        "description": "Object modification date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lte",
                        "description": "Object modification date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Indicates that object is deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "expire",
                        "description": "Expiration date",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "expire:gt",
                        "description": "Expiration date. Search for result that has this parameter value greater than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "expire:gte",
                        "description": "Expiration date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "expire:lt",
                        "description": "Expiration date. Search for result that has this parameter value less than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "expire:lte",
                        "description": "Expiration date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "fileLifetime",
                        "description": "Folder lifetime",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "fileLifetime:gt",
                        "description": "Folder lifetime. Search for result that has this parameter value greater than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "fileLifetime:gte",
                        "description": "Folder lifetime. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "fileLifetime:lt",
                        "description": "Folder lifetime. Search for result that has this parameter value less than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "fileLifetime:lte",
                        "description": "Folder lifetime. Search for result that has this parameter value less or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "secure",
                        "description": "Folder secure flag",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "description:contains",
                        "description": "Folder description. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sharedByMe",
                        "description": "true - return only folders shared by me;\n                              false - return only folders shared with me;\n                              empty - return both",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/{id}/actions/file": {
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "upload content",
                "description": "uploads file content to a folder",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_GROUP<br />Errors\\ERR_ENTITY_EXISTS<br />ERR_INPUT_INVALID_DATE"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "body",
                        "description": "file content",
                        "type": "file",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "clientCreated",
                        "description": "Client created field for the file",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "formData",
                        "name": "clientModified",
                        "description": "Client modified field for the file",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "formData",
                        "name": "disableAutoVersion",
                        "description": "Indicates whether Client would like to save file as new version",
                        "type": "boolean"
                    },
                    {
                        "in": "formData",
                        "name": "note",
                        "description": "Indicates whether the file is note",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ]
            }
        },
        "/rest/folders/{id}/actions/fileBase64Encoded": {
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "upload  base64 encoded content",
                "description": "uploads base64 encoded file content to a folder",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_GROUP<br />Errors\\ERR_ENTITY_EXISTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "Body",
                        "description": "File information",
                        "schema": {
                            "$ref": "#/definitions/Content.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/{id}/actions/move": {
            "post": {
                "summary": "Move the folder",
                "description": "Move the folder",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/DestinationFolderIdRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Folder is moved successfully",
                        "schema": {
                            "$ref": "#/definitions/Folder1"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_CONTAINS_LOCKED_FILES\n\nERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_IS_MY_DIR\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_ENTITY_IS_SYNC_DIR\n"
                    },
                    "409": {
                        "description": "ERR_ENTITY_EXISTS\n"
                    },
                    "413": {
                        "description": "ERR_SYSTEM_NO_STORAGE_AVAILABLE\n"
                    },
                    "422": {
                        "description": "ERR_CANNOT_MOVE_FOLDER_TO_SELF\n\nERR_CANNOT_MOVE_TO_CHILD\n\nERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}/actions/permanent": {
            "delete": {
                "tags": [
                    "folders"
                ],
                "summary": "Permanently delete the specified folder.",
                "description": "Permanently delete the specified folder.\n               This folder will no longer be accessible by any means.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/folders/{id}/actions/recover": {
            "patch": {
                "tags": [
                    "folders"
                ],
                "summary": "Recover deleted folder.",
                "description": "Recover the specified folder. This un-marks the folder for deletion.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Folder"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/{id}/actions/requestFile": {
            "post": {
                "summary": "Send a Request File to Folder",
                "description": "Send a Request File to Folder",
                "tags": [
                    "requestFile"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/RequestFileToFolderPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Request File to Folder is processed successfully"
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_DLP_LOCKED\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_VIRUS_FOUND\n\nERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST\n\nERR_LICENSE_MAX_USERS_COUNT_REACHED\n\nERR_USER_HAS_NO_USER_TYPE\n\nERR_USER_TYPE_NO_ACCESS\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_HYPERLINK\n\nERR_INPUT_INVALID_DATE\n\nERR_INPUT_REQUIRED\n\nERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}/actions/scan": {
            "post": {
                "tags": [
                    "folders"
                ],
                "summary": "Triggers on demand AV/DLP folder scan.",
                "description": "Attempts to trigger an AV/DLP scan on requested folder.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "folderId:in",
                        "description": "List of folder IDs of entities to scan. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fileId:in",
                        "description": "List of file IDs of entities to scan. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/{id}/actions/sendMessage": {
            "post": {
                "tags": [
                    "mail",
                    "folders"
                ],
                "summary": "Create a send message email entry",
                "description": "Creates a send message email entry",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_MAX_VALUE<br />ERR_INPUT_HTML_TAGS_INVALID"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The email details",
                        "schema": {
                            "$ref": "#/definitions/SendMessage.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/{id}/actions/setNotifications": {
            "put": {
                "tags": [
                    "notifications"
                ],
                "summary": "Set/Update notifications",
                "description": "Set/Update notifications",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_NOT_INTEGER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Notification options",
                        "schema": {
                            "$ref": "#/definitions/UserNotification.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "includeNested",
                        "description": "Set notification for nested folders as well",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/{id}/comments": {
            "get": {
                "tags": [
                    "comments",
                    "folders"
                ],
                "summary": "Return the list of Comments for this folder",
                "description": "Returns all comments made on this folder.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Comment"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the parent folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "parentId",
                        "description": "Parent Comment unique identifier",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "parentId:in",
                        "description": "Parent Comment unique identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "description": "Unique identifier of comment author",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId:in",
                        "description": "Unique identifier of comment author. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "Comment creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "Comment creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "Comment creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "Comment creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "Comment creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified",
                        "description": "Comment modification date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gt",
                        "description": "Comment modification date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gte",
                        "description": "Comment modification date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lt",
                        "description": "Comment modification date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lte",
                        "description": "Comment modification date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "contents:contains",
                        "description": "Comment content. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/{id}/folders": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "List children folders of specified parent",
                "description": "Return the list of folders in the specified folder including its metadata.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Folder"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_DLI_ADMIN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the parent folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Folder name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Folder name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "description": "Unique identifier of Object creator",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId:in",
                        "description": "Unique identifier of Object creator. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "Object creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "Object creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "Object creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "Object creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "Object creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified",
                        "description": "Object modification date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gt",
                        "description": "Object modification date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gte",
                        "description": "Object modification date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lt",
                        "description": "Object modification date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lte",
                        "description": "Object modification date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Indicates that object is deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "expire",
                        "description": "Expiration date",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "expire:gt",
                        "description": "Expiration date. Search for result that has this parameter value greater than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "expire:gte",
                        "description": "Expiration date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "expire:lt",
                        "description": "Expiration date. Search for result that has this parameter value less than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "expire:lte",
                        "description": "Expiration date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "fileLifetime",
                        "description": "Folder lifetime",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "fileLifetime:gt",
                        "description": "Folder lifetime. Search for result that has this parameter value greater than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "fileLifetime:gte",
                        "description": "Folder lifetime. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "fileLifetime:lt",
                        "description": "Folder lifetime. Search for result that has this parameter value less than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "fileLifetime:lte",
                        "description": "Folder lifetime. Search for result that has this parameter value less or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "secure",
                        "description": "Folder secure flag",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "description:contains",
                        "description": "Folder description. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locate_id",
                        "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "summary": "Create a new folder",
                "description": "Create a new folder under the specified parent_id",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/FolderCreatePostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Folder is added successfully",
                        "schema": {
                            "$ref": "#/definitions/Folder1"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_DENIED\n\nERR_ACCESS_USER\n"
                    },
                    "409": {
                        "description": "ERR_ENTITY_EXISTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}/members": {
            "post": {
                "summary": "Add multiple members",
                "description": "Add multiple members to the folder",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "updateIfExists",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "downgradeNested",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/FolderMemberPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Members is added successfully",
                        "schema": {
                            "$ref": "#/definitions/FolderAddMembers"
                        }
                    },
                    "207": {
                        "description": "Members is added partially",
                        "schema": {
                            "$ref": "#/definitions/FolderAddMembers"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_IS_MY_DIR\n\nERR_ENTITY_IS_SYNC_DIR\n\nERR_ACCESS_USER\n\nERR_LICENSE_MAX_USERS_COUNT_REACHED\n\nERR_USER_HAS_NO_USER_TYPE\n\nERR_USER_TYPE_NO_ACCESS\n\nERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST\n\nERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS\n\nERR_PROFILE_COLLABORATION_DISABLED\n\nERR_ENTITY_IS_OWNER\n\nERR_ENTITY_DELETED\n"
                    },
                    "409": {
                        "description": "ERR_ENTITY_EXISTS\n\nERR_ENTITY_ROLE_IS_ASSIGNED\n\nERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "get": {
                "summary": "List folder members",
                "description": "Returns a list of members in the folder.",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "roleId",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "groupId:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "roleId:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId:in",
                        "required": false,
                        "description": "Member id list recommended request size <= 100",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "groupId",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "List of folder members",
                        "schema": {
                            "$ref": "#/definitions/Members"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_SYSTEM_TENANT_SUSPENDED\n\nERR_ACCESS_USER\n\nERR_ACCESS_DENIED\n\nERR_ENTITY_DELETED\n"
                    },
                    "422": {
                        "description": "ERR_LICENSE_EXPIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}/members/ldapGroup": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "List LDAP group members",
                "description": "Returns a list of LDAP group members in the folder.\n                       This returns LDAP name, email, and privileges.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MemberGroup"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "groupId",
                        "description": "Unique identifier of group",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "groupId:in",
                        "description": "Unique identifier of group. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "roleId",
                        "description": "Unique identifier of role",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "roleId:in",
                        "description": "Unique identifier of role. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/{id}/members/ldapGroup/{ldap_group_id}": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Display group member",
                "description": "Display the specified group member in the folder",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Member"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "ldap_group_id",
                        "description": "id of the group member",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "put": {
                "tags": [
                    "folders"
                ],
                "summary": "update group members",
                "description": "updates group members in the folder",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "members and roles details",
                        "schema": {
                            "$ref": "#/definitions/MemberGroup.Put"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "ldap_group_id",
                        "description": "id of the group member",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "downgradeNested",
                        "description": "Downgrade member role for nested folders",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "summary": "Deletes group member",
                "description": "Deletes group member in the folder",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "ldap_group_id",
                        "required": true,
                        "description": "The ldap group ID",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "downgradeNested",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deletes group member in the folder"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_INPUT_IS_OWNER\n\nERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}/members/{member_user_id}": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Display member",
                "description": "Display the specified member in the folder",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Member"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "member_user_id",
                        "description": "ID of the member",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "put": {
                "tags": [
                    "folders"
                ],
                "summary": "update members",
                "description": "updates members in the folder",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_INVALID_EMAIL"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "member_user_id",
                        "description": "ID of the member",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "members and roles details",
                        "schema": {
                            "$ref": "#/definitions/Member.Put"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "downgradeNested",
                        "description": "Downgrade member role for nested folders",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "summary": "Deletes member",
                "description": "Deletes member in the folder",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "member_user_id",
                        "required": true,
                        "description": "The member user ID",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "downgradeNested",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deletes member in the folder"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_INPUT_IS_OWNER\n\nERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}/tasks": {
            "get": {
                "tags": [
                    "folders",
                    "tasks"
                ],
                "summary": "Get Tasks for a folder",
                "description": "Returns all tasks for a folder",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Folder object ID of the task to retrieve",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "assigneeId",
                        "description": "Assigned User unique identifier",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "assigneeId:in",
                        "description": "Assigned User unique identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "due",
                        "description": "Task due date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "due:gt",
                        "description": "Task due date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "due:gte",
                        "description": "Task due date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "due:lt",
                        "description": "Task due date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "due:lte",
                        "description": "Task due date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "parentId",
                        "description": "Parent Comment identifier",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "parentId:in",
                        "description": "Parent Comment identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "description": "Identifier of User who created a Task",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId:in",
                        "description": "Identifier of User who created a Task. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "Task creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "Task creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "Task creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "Task creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "Task creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified",
                        "description": "Task modification date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gt",
                        "description": "Task modification date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gte",
                        "description": "Task modification date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lt",
                        "description": "Task modification date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lte",
                        "description": "Task modification date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "contents:contains",
                        "description": "Task content. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Task status",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Whether the task has been deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/{id}/tree": {
            "get": {
                "tags": [
                    "folders"
                ],
                "summary": "Gets the folder path by its ID",
                "description": "Gets the folder path by its ID",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_DLI_ADMIN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/folders/{parent_id}/actions/fileFromTemplate": {
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "Create a new empty file from template",
                "description": "Create a new empty file from template",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_INVALID_DATE<br />Errors\\ERR_ENTITY_LOCKED<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_GROUP"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "parent_id",
                        "description": "ID of the parent folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "FIle from template parameters",
                        "schema": {
                            "$ref": "#/definitions/FileNameRequest.Post"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/folders/{parent}/files": {
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "Uploads a new file",
                "description": "Uploads a new file",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_GROUP<br />Errors\\ERR_ENTITY_EXISTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "parent",
                        "description": "ID of the parent folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "body",
                        "description": "file content",
                        "type": "file",
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "X-KW-Note",
                        "description": "Specifies that this file is a note",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ]
            },
            "get": {
                "summary": "Returns the list of files in the specified folder.",
                "description": "Returns the list of files in the specified folder.",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "parent",
                        "required": true,
                        "description": "The ID of the parent folder",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "required": false,
                        "description": "Unique identifier of Object creator",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "modified:lte",
                        "required": false,
                        "description": "Object modified date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "modified:lt",
                        "required": false,
                        "description": "Object modified date. Search for result that has this parameter value less than specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "required": false,
                        "description": "Don't show deleted, true - show only deleted, none - show both",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "required": false,
                        "description": "Email creation date. Search for result that has this parameter value less than specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "description": "Sorting options. Accepts id, name, modified, created, size. Sample format is id:asc",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "required": false,
                        "description": "Object name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "required": false,
                        "description": "Object creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "modified:gte",
                        "required": false,
                        "description": "Object modified date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "required": false,
                        "description": "Object creation date",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "required": false,
                        "description": "Email creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "modified:gt",
                        "required": false,
                        "description": "Object modified date. Search for result that has this parameter value greater than specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "expire:lte",
                        "required": false,
                        "description": "Expiration date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "modified",
                        "required": false,
                        "description": "Object modified date",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId:in",
                        "required": false,
                        "description": "Unique identifier of Object creator recommended request size <= 100",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "expire:lt",
                        "required": false,
                        "description": "Expiration date. Search for result that has this parameter value less than specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "expire:gte",
                        "required": false,
                        "description": "Expiration date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "required": false,
                        "description": "Object creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "description": "Object name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "isPushed",
                        "required": false,
                        "description": "Whether the file is pushed",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "expire:gt",
                        "required": false,
                        "description": "Expiration date. Search for result that has this parameter value greater than specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "expire",
                        "required": false,
                        "description": "Object modified date",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of files.\n",
                        "schema": {
                            "$ref": "#/definitions/FolderChildrenFiles"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/hostnames": {
            "get": {
                "tags": [
                    "hostnames"
                ],
                "summary": "List hostnames",
                "description": "Returns a list of hostnames",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Hostname"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "alias_name",
                        "description": "Alias name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "alias_name:contains",
                        "description": "Alias name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "tenant_id",
                        "description": "Tenant ID",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "tenant_id:gt",
                        "description": "Tenant ID. Search for result that has this parameter value greater than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "tenant_id:gte",
                        "description": "Tenant ID. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "tenant_id:lt",
                        "description": "Tenant ID. Search for result that has this parameter value less than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "tenant_id:lte",
                        "description": "Tenant ID. Search for result that has this parameter value less or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Alias name deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "disabled",
                        "description": "Alias name disabled",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "hostnames"
                ],
                "summary": "Deletes list of hostnames",
                "description": "Deletes list of hostnames.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "hostnames"
                ],
                "summary": "Create an alias hostname",
                "description": "Create an alias hostname.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hostname"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ENTITY_EXISTS<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_NOT_BOOLEAN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "comment to activity",
                        "schema": {
                            "$ref": "#/definitions/Hostname.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/hostnames/{id}": {
            "get": {
                "tags": [
                    "hostnames"
                ],
                "summary": "Get hostname info from the hostname ID",
                "description": "Returns the details of the specified hostname.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hostname"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the hostname to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "put": {
                "tags": [
                    "hostnames"
                ],
                "summary": "Disable alias hostname",
                "description": "Disable the specified hostname.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the hostname to disable",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "comment to activity",
                        "schema": {
                            "$ref": "#/definitions/Hostname.Put"
                        },
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "hostnames"
                ],
                "summary": "Mark specified hostname as deleted.",
                "description": "Marks the specified hostname as deleted.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the hostname",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/jobs/{id}": {
            "get": {
                "tags": [
                    "jobs"
                ],
                "summary": "Retrieve information about scheduled job in queue.",
                "description": "Return job information for the specified job. e.g.:\n                  I want to check job status for copy EC file from tray",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the job",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "post": {
                "tags": [
                    "jobs"
                ],
                "summary": "Execute job",
                "description": "Execute job",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the job",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/languages": {
            "get": {
                "tags": [
                    "languages"
                ],
                "summary": "List languages",
                "description": "Returns a list of available languages.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Language"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Language name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Language name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "symbol",
                        "description": "Language symbol",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/languages/{id}": {
            "get": {
                "tags": [
                    "languages"
                ],
                "summary": "Get a language",
                "description": "Returns the details of a specified language including language symbol, name, and link.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Language"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the language to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/ldapGroups": {
            "get": {
                "tags": [
                    "ldapGroups"
                ],
                "summary": "Returns a list of LDAP groups.",
                "description": "Returns a list of LDAP groups that have been enabled through the kiteworks admin.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LdapGroup"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "description": "LDAP group name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "LDAP group name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "description": "LDAP group Email",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "email:contains",
                        "description": "LDAP group Email. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "ldapGroups"
                ],
                "summary": "Create an LDAP group",
                "description": "Creates an LDAP group",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_REQUIRED<br />ERR_INPUT_INVALID_EMAIL"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The LDAP group details",
                        "schema": {
                            "$ref": "#/definitions/LdapGroup.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/ldapGroups/{id}": {
            "get": {
                "tags": [
                    "ldapGroups"
                ],
                "summary": "Gets an LDAP group",
                "description": "Returns the details of a specified LDAP group.\n                  This includes the settings from the admin.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LdapGroup"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the LDAP group to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "put": {
                "tags": [
                    "ldapGroups"
                ],
                "summary": "Updates an LDAP group",
                "description": "Updates an LDAP group",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the LDAP to update",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The LDAP group details",
                        "schema": {
                            "$ref": "#/definitions/LdapGroup.Put"
                        },
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "ldapGroups"
                ],
                "summary": "Deletes an LDAP group",
                "description": "Deletes an LDAP group",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the LDAP group to delete",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/locations": {
            "get": {
                "tags": [
                    "locations"
                ],
                "summary": "List locations",
                "description": "Returns a list of available kiteworks locations.\n                  Locations are logical collection of multiple kiteworks servers,\n                  usually with a common geography or particular purpose.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "locations"
                ],
                "summary": "Create a location entry.",
                "description": "Creates a location entry by providing a name.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_SYSTEM_ADMIN<br />Errors\\ERR_ENTITY_EXISTS<br />ERR_INPUT_INVALID_FORMAT<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The location details",
                        "schema": {
                            "$ref": "#/definitions/Location.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/locations/{id}": {
            "get": {
                "tags": [
                    "locations"
                ],
                "summary": "Return location name.",
                "description": "Returns the name of a specified location.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the location to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "locations"
                ],
                "summary": "Delete a location.",
                "description": "Delete the specified location.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_SYSTEM_ADMIN<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the location to remove from",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/mail": {
            "get": {
                "summary": "List emails",
                "description": "Returns the list of all emails for this user.\n\nThis includes sent emails, received emails,draft emails, and request a file emails.\n",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "date:gt",
                        "required": false,
                        "description": "Email creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "sharedMailboxId",
                        "required": false,
                        "description": "Shared Mailbox unique identifier. Search for result belongs to the Shared Mailbox.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "trackingOnly",
                        "required": false,
                        "description": "Return only emails with tracking access",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "date",
                        "required": false,
                        "description": "Email creation date",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "isRecipient",
                        "required": false,
                        "description": "Unique identifier of User who receive Email",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "description": "Email status",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "sent",
                                "draft",
                                "queued",
                                "error",
                                "self_send",
                                "pending_review",
                                "denied"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "senderId:in",
                        "required": false,
                        "description": "Unique identifier of User who sent Email Search for results that contain any of specified values of this parameter.recommended request size <= 100",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "required": false,
                        "description": "Indicates that Email is deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "webFormId",
                        "required": false,
                        "description": "Email web form ID",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "date:gte",
                        "required": false,
                        "description": "Email creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "customWebFormOnly",
                        "required": false,
                        "description": "Return only emails with the custom web form",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "description": "Sorting options",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "date:lt",
                        "required": false,
                        "description": "Email creation date. Search for result that has this parameter value less than specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "emailPackageId:in",
                        "required": false,
                        "description": "Email Package unique identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "modified_date:gt",
                        "required": false,
                        "description": "Email modified date. Search for result that has this parameter value greater than specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "bucket",
                        "required": false,
                        "description": "Email bucket",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "isPreview",
                        "required": false,
                        "description": "Whether the email is a preview email",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "date:lte",
                        "required": false,
                        "description": "Email creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "senderId",
                        "required": false,
                        "description": "Unique identifier of User who sent Email",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "modified_date:lte",
                        "required": false,
                        "description": "Email modified date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "templateId",
                        "required": false,
                        "description": "Email Template unique identifier",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "modified_date:lt",
                        "required": false,
                        "description": "Email modified date. Search for result that has this parameter value less than specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "isUserSent",
                        "required": false,
                        "description": "Whether the email was sent by some user",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "returnCustomWebForm",
                        "required": false,
                        "description": "Return all emails include those with the custom web form",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "read",
                        "required": false,
                        "description": "Whether the email is read or not by current user",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "modified_date:gte",
                        "required": false,
                        "description": "Email modified date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "templateId:in",
                        "required": false,
                        "description": "Email Template unique identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "in": "query",
                        "name": "emailPackageId",
                        "required": false,
                        "description": "Email Package unique identifier",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "modified_date",
                        "required": false,
                        "description": "Email modified date",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mails are listed out successfully",
                        "schema": {
                            "$ref": "#/definitions/Mails"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "delete": {
                "summary": "Delete a list of email drafts",
                "description": "Allows a sender to delete a list of email drafts (Support up to 100 emails)",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "required": false,
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "emailId:in",
                        "required": true,
                        "description": "A list of email ids which will be processed",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The mail are deleted successfully"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_NOT_SENDER\n\nERR_ACCESS_USER\n\nERR_ENTITY_EMAIL_IS_SENT\n\nERR_PROFILE_MAIL_DISABLED\n\nERR_ENTITY_DELETED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/actions/counters": {
            "get": {
                "summary": "Returns number of emails in each bucket",
                "description": "Returns number of emails in each bucket",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "returnCustomWebForm",
                        "required": false,
                        "description": "Return all emails include those with the custom web form.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Number of emails in each bucket",
                        "schema": {
                            "$ref": "#/definitions/MailCounters"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/actions/deletePermanent": {
            "patch": {
                "summary": "Permanently deletes list of emails",
                "description": "Permanently deletes list of emails",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "required": false,
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "emailId:in",
                        "required": true,
                        "description": "A list of email ids which will be processed",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "207": {
                        "description": "Partially successful operation",
                        "schema": {
                            "$ref": "#/definitions/BulkOperationInteger"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_NOT_DELETED\n\nERR_ENTITY_EMAIL_IS_NOT_COMPLETED\n"
                    },
                    "410": {
                        "description": "ERR_ENTITY_DELETED_PERMANENTLY"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/actions/distributionList": {
            "get": {
                "tags": [
                    "mail"
                ],
                "summary": "Returns list of emails inside distribution list",
                "description": "Returns list of emails inside distribution list",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/DistributionList"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "email",
                        "description": "Email address to check/expand",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "expand",
                        "description": "Whether to return distribution list members emails",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "emailId",
                        "description": "If specified, DL members list will contain members who actually received this email",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/mail/actions/read": {
            "patch": {
                "summary": "Mark the mail read status to true on the given email ids",
                "description": "Mark the mail read status to true on the given email ids",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "required": false,
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "emailId:in",
                        "required": true,
                        "description": "A list of email ids which will be processed",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "207": {
                        "description": "Partially successful operation",
                        "schema": {
                            "$ref": "#/definitions/BulkOperationInteger"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/actions/recover": {
            "patch": {
                "summary": "Moves the list of emails back to original bucket from trash",
                "description": "Moves the list of emails back to original bucket from trash",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "required": false,
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "emailId:in",
                        "required": true,
                        "description": "A list of email ids which will be processed",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "207": {
                        "description": "Partially successful operation",
                        "schema": {
                            "$ref": "#/definitions/BulkOperationInteger"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_NOT_DELETED\n\nERR_ENTITY_EMAIL_IS_NOT_COMPLETED\n"
                    },
                    "410": {
                        "description": "ERR_ENTITY_DELETED_PERMANENTLY"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/actions/sendFile": {
            "post": {
                "summary": "Create a mail",
                "description": "Create a mail",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/BaseSendMailPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Mail is created successfully",
                        "schema": {
                            "$ref": "#/definitions/Mail"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_IS_DELETED_ATTACHMENT\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED\n\nERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED\n\nERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED\n\nERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED\n\nERR_PROFILE_RETURN_RECEIPT_DISABLED\n\nERR_PROFILE_RETURN_RECEIPT_ENABLED\n\nERR_PROFILE_SECURE_EMAIL_DISABLED\n\nERR_PROFILE_SELF_COPY_DISABLED\n\nERR_PROFILE_SELF_COPY_ENABLED\n\nERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED\n\nERR_USER_HAS_NO_USER_TYPE\n\nERR_USER_TYPE_NO_ACCESS\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_EXCEEDS_MAX_VALUE\n\nERR_INPUT_HYPERLINK\n\nERR_INPUT_INVALID_DATE\n\nERR_INPUT_PAST_DATE\n\nERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/actions/sendFileExternal": {
            "post": {
                "summary": "Create a mail",
                "description": "Create a mail",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/BaseSendMailPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Mail is created successfully",
                        "schema": {
                            "$ref": "#/definitions/Mail"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_IS_DELETED_ATTACHMENT\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED\n\nERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED\n\nERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED\n\nERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED\n\nERR_PROFILE_RETURN_RECEIPT_DISABLED\n\nERR_PROFILE_RETURN_RECEIPT_ENABLED\n\nERR_PROFILE_SECURE_EMAIL_DISABLED\n\nERR_PROFILE_SELF_COPY_DISABLED\n\nERR_PROFILE_SELF_COPY_ENABLED\n\nERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED\n\nERR_USER_HAS_NO_USER_TYPE\n\nERR_USER_TYPE_NO_ACCESS\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_EXCEEDS_MAX_VALUE\n\nERR_INPUT_HYPERLINK\n\nERR_INPUT_INVALID_DATE\n\nERR_INPUT_PAST_DATE\n\nERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/actions/trash": {
            "patch": {
                "summary": "Moves the list of emails to trash for current user",
                "description": "Moves the list of emails to trash for current user",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "required": false,
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "emailId:in",
                        "required": true,
                        "description": "A list of email ids which will be processed",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "207": {
                        "description": "Partially successful operation",
                        "schema": {
                            "$ref": "#/definitions/BulkOperationInteger"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_EMAIL_IS_NOT_COMPLETED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/actions/unread": {
            "patch": {
                "summary": "Mark the mail read status to false on the given email ids",
                "description": "Mark the mail read status to false on the given email ids",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "required": false,
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "emailId:in",
                        "required": true,
                        "description": "A list of email ids which will be processed",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "207": {
                        "description": "Partially successful operation",
                        "schema": {
                            "$ref": "#/definitions/BulkOperationInteger"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/actions/withdrawFiles/users/{userId}": {
            "delete": {
                "tags": [
                    "mail"
                ],
                "summary": "Withdraw all files from deleted/demoted users' emails",
                "description": "Withdraw all files from deleted/demoted users' emails",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "description": "ID of the user to withdraw files",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "emailId:in",
                        "description": "A list of email ids which will be processed",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/mail/{emailId}/attachments/actions/zip": {
            "get": {
                "tags": [
                    "mail"
                ],
                "summary": "Download multiple attachments as zip",
                "description": "Download multiple attachments as zip",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "emailId",
                        "description": "Mail id to download attachments as zip",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "attachmentId:in",
                        "description": "Search for results that contain any of specified values of this parameter.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "The zip filename",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "ref",
                        "description": "The email reference (Mandatory if the email can be accessed without authentication)",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "username",
                        "description": "User email of file's requestor",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "utcOffset",
                        "description": "The user timezone offset in (seconds). UTC+08:00 = 28800",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/mail/{emailId}/attachments/actions/zipStatus": {
            "get": {
                "tags": [
                    "mail"
                ],
                "summary": "Get multiple attachments AV/DLP status",
                "description": "Get multiple attachments AV/DLP status",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "emailId",
                        "description": "The mail id",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "attachmentId:in",
                        "description": "Search for results that contain any of specified values of this parameter.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "ref",
                        "description": "The email reference (Mandatory if the email can be accessed without authentication)",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/mail/{emailId}/attachments/report": {
            "get": {
                "tags": [
                    "mail"
                ],
                "summary": "Get a report about downloaded attachments",
                "description": "Get a report about downloaded attachments",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "emailId",
                        "description": "The mail id",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/mail/{emailId}/attachments/reportCsv": {
            "get": {
                "tags": [
                    "mail"
                ],
                "summary": "Get a report about downloaded attachments as a CSV file",
                "description": "Get a report about downloaded attachments as a CSV file",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "emailId",
                        "description": "The mail id",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/mail/{emailId}/attachments/{id}/content": {
            "get": {
                "tags": [
                    "mail"
                ],
                "summary": "Return attachment content",
                "description": "Returns the content of the specified attachment.\n                       e.g: return the file in this email attachment.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "emailId",
                        "description": "Mail id to retrieve attachment content for",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Attachment id (frozen object id)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "Range",
                        "description": "Bytes range to retrieve. Example: bytes=0-1024",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "ref",
                        "description": "The email reference code (Mandatory if the email can be accessed without authentication)",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/mail/{emailId}/attachments/{id}/preview": {
            "get": {
                "tags": [
                    "mail"
                ],
                "summary": "Retrieve information about the file preview of given email.",
                "description": "Retrieve information about the file preview of given email.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Preview"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "emailId",
                        "description": "Mail id to retrieve attachments for",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Attachment id (frozen object id)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "ref",
                        "description": "The email reference code (Mandatory if the email can be accessed without authentication)",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/mail/{id}": {
            "get": {
                "summary": "Get an email entry",
                "description": "Returns the details of a specified email which includes sender id, date, package id, etc.",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "ref",
                        "required": false,
                        "description": "The email reference (Mandatory if the email can be accessed without authentication)",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mail is listed out successfully",
                        "schema": {
                            "$ref": "#/definitions/Mail"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "delete": {
                "summary": "Delete an email draft",
                "description": "Allows a sender to delete a draft of email",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The mail is deleted successfully"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_NOT_SENDER\n\nERR_ACCESS_USER\n\nERR_ENTITY_EMAIL_IS_SENT\n\nERR_PROFILE_MAIL_DISABLED\n\nERR_ENTITY_DELETED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/{id}/actions/sendFile": {
            "put": {
                "summary": "Update a mail",
                "description": "Update a mail",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/BaseSendMailPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mail is updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Mail"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_NOT_SENDER\n\nERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_EMAIL_NOT_DRAFT\n\nERR_ENTITY_IS_DELETED_ATTACHMENT\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED\n\nERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED\n\nERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED\n\nERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED\n\nERR_PROFILE_RETURN_RECEIPT_DISABLED\n\nERR_PROFILE_RETURN_RECEIPT_ENABLED\n\nERR_PROFILE_SECURE_EMAIL_DISABLED\n\nERR_PROFILE_SELF_COPY_DISABLED\n\nERR_PROFILE_SELF_COPY_ENABLED\n\nERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED\n\nERR_USER_HAS_NO_USER_TYPE\n\nERR_USER_TYPE_NO_ACCESS\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_EXCEEDS_MAX_VALUE\n\nERR_INPUT_HYPERLINK\n\nERR_INPUT_INVALID_DATE\n\nERR_INPUT_PAST_DATE\n\nERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/{id}/actions/sendFileExternal": {
            "put": {
                "summary": "Update a mail",
                "description": "Update a mail",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/BaseSendMailPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mail is updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Mail"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_NOT_SENDER\n\nERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_EMAIL_NOT_DRAFT\n\nERR_ENTITY_IS_DELETED_ATTACHMENT\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED\n\nERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED\n\nERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED\n\nERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED\n\nERR_PROFILE_RETURN_RECEIPT_DISABLED\n\nERR_PROFILE_RETURN_RECEIPT_ENABLED\n\nERR_PROFILE_SECURE_EMAIL_DISABLED\n\nERR_PROFILE_SELF_COPY_DISABLED\n\nERR_PROFILE_SELF_COPY_ENABLED\n\nERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED\n\nERR_USER_HAS_NO_USER_TYPE\n\nERR_USER_TYPE_NO_ACCESS\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_EXCEEDS_MAX_VALUE\n\nERR_INPUT_HYPERLINK\n\nERR_INPUT_INVALID_DATE\n\nERR_INPUT_PAST_DATE\n\nERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/{id}/attachments": {
            "get": {
                "summary": "Returns a list of attachments for a given mail.",
                "description": "Returns a list of attachments for a given mail.",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "ref",
                        "required": false,
                        "description": "The email reference (Mandatory if the email can be accessed without authentication)",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mail attachments"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/{id}/attachments/{attachment_id}": {
            "get": {
                "summary": "Returns a list of attachments for a given mail.",
                "description": "Returns a list of attachments for a given mail.",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "attachment_id",
                        "required": true,
                        "description": "The Attachment ID",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "ref",
                        "required": false,
                        "description": "The email reference (Mandatory if the email can be accessed without authentication)",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mail attachments"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/{id}/packages": {
            "get": {
                "summary": "Returns a list of packages for a given mail.",
                "description": "Returns a list of packages for a given mail.",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "ref",
                        "required": false,
                        "description": "The email reference (Mandatory if the email can be accessed without authentication)",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mail packages"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/{id}/recipients": {
            "get": {
                "summary": "Returns a list of recipients for a given mail.",
                "description": "Returns a list of recipients for a given mail.",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "description": "The recipient type -> 0: TO, 1: CC, 2: BCC",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32",
                            "enum": [
                                0,
                                1,
                                2
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "ref",
                        "required": false,
                        "description": "The email reference (Mandatory if the email can be accessed without authentication)",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mail Recipients"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mobileSyncItems": {
            "post": {
                "tags": [
                    "mobileSync"
                ],
                "summary": "Set file as a mobile sync item",
                "description": "Set file as a mobile sync item.",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The contact details",
                        "schema": {
                            "$ref": "#/definitions/MobileSync.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "get": {
                "summary": "Returns a list of mobile sync items for current user",
                "description": "Returns a list of mobile sync items for current user",
                "tags": [
                    "mobileSync"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "dlpStatus",
                        "required": false,
                        "description": "Search by dlpStatus",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "avStatus",
                        "required": false,
                        "description": "Search by avStatus",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of mobile sync items for current user",
                        "schema": {
                            "$ref": "#/definitions/MobileSyncList"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_SYSTEM_TENANT_SUSPENDED\n\nERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n"
                    },
                    "422": {
                        "description": "ERR_LICENSE_EXPIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mobileSyncItems/{id}": {
            "delete": {
                "tags": [
                    "mobileSync"
                ],
                "summary": "Remove mobile sync item",
                "description": "Removing mobile sync item",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the mobile sync item to be removed",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "get": {
                "summary": "Retrieve information about mobile sync item specified.",
                "description": "Retrieve information about mobile sync item specified.",
                "tags": [
                    "mobileSync"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mobile sync item specified",
                        "schema": {
                            "$ref": "#/definitions/MobileSync"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_SYSTEM_TENANT_SUSPENDED\n\nERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n"
                    },
                    "422": {
                        "description": "ERR_LICENSE_EXPIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/notifications": {
            "get": {
                "tags": [
                    "notifications"
                ],
                "summary": "List notifications",
                "description": "Returns list of notifications",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserNotification"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "userId",
                        "description": "ID of user who will send email notifications to end users",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "userId:in",
                        "description": "ID of user who will send email notifications to end users. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "objectId",
                        "description": "Id of folder included in Notification",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "objectId:in",
                        "description": "Id of folder included in Notification. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fileAdded",
                        "description": "Whether the notification is about the file added",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "commentAdded",
                        "description": "Whether the notification is about the comment added",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/notifications/{object_id}": {
            "delete": {
                "tags": [
                    "notifications"
                ],
                "summary": "Remove notification options",
                "description": "Remove notification option",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "object_id",
                        "description": "Object ID of the folder to remove notification options",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/permissions/comment/{comment_id}": {
            "get": {
                "tags": [
                    "comments",
                    "permissions"
                ],
                "summary": "Return the list of permissions available on a comment",
                "description": "Return available permissions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "comment_id",
                        "description": "Id of the comment",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Unique action identifier",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Unique action identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Action name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Action name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "allowed",
                        "description": "Determines if one has permissions to perform action",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "description": "Determines if given action is available considering current object state (locked, deleted, etc)",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/permissions/file/{file_id}": {
            "get": {
                "tags": [
                    "files",
                    "permissions"
                ],
                "summary": "Return the list of permissions available on a file",
                "description": "Return available permissions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "file_id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Unique action identifier",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Unique action identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Action name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Action name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "allowed",
                        "description": "Determines if one has permissions to perform action",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "description": "Determines if given action is available considering current object state (locked, deleted, etc)",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/permissions/files": {
            "get": {
                "tags": [
                    "files",
                    "permissions"
                ],
                "summary": "Return the list of permissions available on a list of files",
                "description": "Return available permissions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FilePermissions"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Search for results that contain any of specified values of this parameter.",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Action name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Action name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "allowed",
                        "description": "Determines if one has permissions to perform action",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "description": "Determines if given action is available considering current object state (locked, deleted, etc)",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "action_id",
                        "description": "Unique action identifier",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "action_id:in",
                        "description": "Unique action identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/permissions/folder/{id}": {
            "get": {
                "summary": "Return the list of permissions available on the specified folder.",
                "description": "Return the list of permissions available on the specified folder.",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "required": false,
                        "description": "Action name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "description": "Action name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "required": false,
                        "description": "Unique action identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "in": "query",
                        "name": "actionId",
                        "required": false,
                        "description": "Unique action identifier",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of permissions.\n",
                        "schema": {
                            "$ref": "#/definitions/FolderPermissionsRequest"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/permissions/task/{task_id}": {
            "get": {
                "tags": [
                    "permissions",
                    "tasks"
                ],
                "summary": "Return the list of permissions available on a task",
                "description": "Return available permissions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "task_id",
                        "description": "Comment Id of the task",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Unique action identifier",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Unique action identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Action name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Action name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "allowed",
                        "description": "Determines if one has permissions to perform action",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "description": "Determines if given action is available considering current object state (locked, deleted, etc)",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/profiles": {
            "get": {
                "tags": [
                    "profiles"
                ],
                "summary": "List user types",
                "description": "Returns a list of user types supported by kiteworks",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Profile"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Profile name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Profile name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "profiles"
                ],
                "summary": "Add custom profile",
                "description": "Add new custom profile cloned from built in profile",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />Errors\\ERR_ENTITY_EXISTS<br />ERR_INPUT_NOT_IN_RANGE<br />ERR_INPUT_NOT_ALPHA_DASH<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Params for custom profile",
                        "schema": {
                            "$ref": "#/definitions/Profile.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/profiles/{id}": {
            "get": {
                "tags": [
                    "profiles"
                ],
                "summary": "Return user type details",
                "description": "Returns the details of a specified user type. e.g.: Returns user type id and name.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Profile"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user type to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "put": {
                "tags": [
                    "profiles"
                ],
                "summary": "Update profile",
                "description": "Update existing profile, Remove/Retain users data if Profile has no Collaboration Access",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_NOT_BOOLEAN<br />ERR_INPUT_ATTRIBUTE_FORBIDDEN<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_NOT_STRING<br />ERR_INPUT_NOT_INTEGER<br />ERR_INPUT_MIN_VALUE<br />ERR_INPUT_NOT_IN_LIST<br />ERR_INPUT_MAX_VALUE<br />ERR_INPUT_NOT_LESS_THEN<br />ERR_INPUT_NOT_ALLOWED<br />ERR_INPUT_INVALID<br />ERR_INPUT_NOT_ARRAY"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Id of the profile to be modified",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Features of the profile",
                        "schema": {
                            "$ref": "#/definitions/FeaturesList.Put"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/profiles/{id}/replace/{new_profile}": {
            "delete": {
                "tags": [
                    "profiles"
                ],
                "summary": "Delete custom profile and set new profile instead of deleted profile",
                "description": "Delete custom profile and set new profile instead of deleted profile",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_NOT_BOOLEAN<br />ERR_INPUT_ATTRIBUTE_FORBIDDEN<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_NOT_STRING"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "Id of the custom profile to be deleted",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "new_profile",
                        "description": "Id of the new profile to be assigned for affected users",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The demotion options",
                        "schema": {
                            "$ref": "#/definitions/UserDemoteOptions.Post"
                        }
                    }
                ]
            }
        },
        "/rest/profiles/{id}/users": {
            "get": {
                "tags": [
                    "profiles"
                ],
                "summary": "Return list of users with the specified type",
                "description": "Returns the list of users who have the specified type. e.g.:\n                  Return me the user names and email addresses of all the Restricted Users.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user type to retrieve users for",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "description": "The user's email",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "email:contains",
                        "description": "The user's email. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "The name of the user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "The name of the user. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "metadata",
                        "description": "The metadata of the user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "metadataContains",
                        "description": "The metadata of the user. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Whether the user has been deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "active",
                        "description": "Whether the user is an actual kitework user",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "description": "Whether the user is verified",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "suspended",
                        "description": "Whether the user is suspended",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "isRecipient",
                        "description": "Whether user is recipient",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "allowsCollaboration",
                        "description": "Whether user's profile allows collaboration access",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "User creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "User creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "User creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "User creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "User creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locate_id",
                        "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "put": {
                "tags": [
                    "profiles"
                ],
                "summary": "Change user type",
                "description": "Change user type for specified user",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_NOT_BOOLEAN<br />ERR_INPUT_ATTRIBUTE_FORBIDDEN<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_NOT_STRING"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user type",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The users details",
                        "schema": {
                            "$ref": "#/definitions/UserDemoteOptions.Post"
                        }
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "IDs of users, who are going to be assigned to the user type",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/public/mail/actions/sendFile": {
            "post": {
                "summary": "Create a mail",
                "description": "Create a mail",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/BaseSendMailPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Mail is created successfully",
                        "schema": {
                            "$ref": "#/definitions/Mail"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_IS_DELETED_ATTACHMENT\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED\n\nERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED\n\nERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED\n\nERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED\n\nERR_PROFILE_RETURN_RECEIPT_DISABLED\n\nERR_PROFILE_RETURN_RECEIPT_ENABLED\n\nERR_PROFILE_SECURE_EMAIL_DISABLED\n\nERR_PROFILE_SELF_COPY_DISABLED\n\nERR_PROFILE_SELF_COPY_ENABLED\n\nERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED\n\nERR_USER_HAS_NO_USER_TYPE\n\nERR_USER_TYPE_NO_ACCESS\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_EXCEEDS_MAX_VALUE\n\nERR_INPUT_HYPERLINK\n\nERR_INPUT_INVALID_DATE\n\nERR_INPUT_PAST_DATE\n\nERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/public/mail/{id}/actions/sendFile": {
            "put": {
                "summary": "Update a mail",
                "description": "Update a mail",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/BaseSendMailPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mail is updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Mail"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_NOT_SENDER\n\nERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_EMAIL_NOT_DRAFT\n\nERR_ENTITY_IS_DELETED_ATTACHMENT\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_INPUT_EMAIL_WITH_NO_RECIPIENTS_NOT_ALLOWED\n\nERR_INPUT_SECURE_BODY_WITH_NO_AUTH_NOT_ALLOWED\n\nERR_PROFILE_INCLUDE_FINGERPRINT_DISABLED\n\nERR_PROFILE_INCLUDE_FINGERPRINT_ENABLED\n\nERR_PROFILE_RETURN_RECEIPT_DISABLED\n\nERR_PROFILE_RETURN_RECEIPT_ENABLED\n\nERR_PROFILE_SECURE_EMAIL_DISABLED\n\nERR_PROFILE_SELF_COPY_DISABLED\n\nERR_PROFILE_SELF_COPY_ENABLED\n\nERR_PROFILE_SEND_FILE_EXTERNAL_DISABLED\n\nERR_USER_HAS_NO_USER_TYPE\n\nERR_USER_TYPE_NO_ACCESS\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_EXCEEDS_MAX_VALUE\n\nERR_INPUT_HYPERLINK\n\nERR_INPUT_INVALID_DATE\n\nERR_INPUT_PAST_DATE\n\nERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/requestFile/{ref}": {
            "delete": {
                "tags": [
                    "requestFile"
                ],
                "summary": "Expire the request file",
                "description": "Expire the request file by setting deleted to true",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/RequestFile"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "description": "the shortlink of request file to expire",
                        "type": "string",
                        "required": true
                    }
                ]
            },
            "get": {
                "summary": "Returns Request File Info by ref",
                "description": "Returns Request File Info by ref",
                "tags": [
                    "requestFile"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "required": true,
                        "description": "The ref of the Request File",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "read",
                        "required": false,
                        "description": "To log view event, default to true",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Request File Info",
                        "schema": {
                            "$ref": "#/definitions/RequestFile"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_REQUEST_FILE\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_REQUEST_FILE_EXPIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/requestFile/{ref}/actions/file": {
            "post": {
                "tags": [
                    "files",
                    "requestFile"
                ],
                "summary": "upload content",
                "description": "uploads file content to a request folder",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ENTITY_RESTRICTED_EXTENSION<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_GROUP<br />Errors\\ERR_ACCESS_USER<br />ERR_INPUT_INVALID_DATE"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "description": "Request file short link",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "body",
                        "description": "file content",
                        "type": "file",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "clientCreated",
                        "description": "Client created field for the file",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "formData",
                        "name": "clientModified",
                        "description": "Client modified field for the file",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ]
            }
        },
        "/rest/requestFile/{ref}/comment/{object_id}": {
            "post": {
                "tags": [
                    "files",
                    "requestFile"
                ],
                "summary": "Create a Comment on a file",
                "description": "Create a Comment on a file.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_MAX_VALUE<br />ERR_INPUT_HTML_TAGS_INVALID<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "description": "The request file shortlink",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "object_id",
                        "description": "Object ID of the file being commented on",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The comment details",
                        "schema": {
                            "$ref": "#/definitions/Comment.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/requestFile/{ref}/preview/{object_id}": {
            "get": {
                "tags": [
                    "requestFile"
                ],
                "summary": "Retrieve information about the file preview.",
                "description": "Retrieve information about the file preview.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Preview"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "description": "The request file shortlink",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "object_id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/requestFile/{ref}/sources": {
            "get": {
                "tags": [
                    "requestFile"
                ],
                "summary": "Retrieve Request File attached files included by the requester",
                "description": "Returns attached files included by the requester.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/RequestFileSource"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "description": "the shortlink of request file to retrieve for",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/requestFile/{ref}/sources/{object_id}": {
            "get": {
                "tags": [
                    "requestFile"
                ],
                "summary": "Read file info",
                "description": "Read properties of a source file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "description": "The shortlink of the request file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "object_id",
                        "description": "ID of the source file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/requestFile/{ref}/sources/{object_id}/content": {
            "get": {
                "tags": [
                    "files",
                    "requestFile"
                ],
                "summary": "Read source file content",
                "description": "Read content of a source file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "description": "Request file short link",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "object_id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "Range",
                        "description": "Bytes range to retrieve. Example: bytes=0-1024",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/requestFile/{ref}/uploads": {
            "get": {
                "tags": [
                    "requestFile"
                ],
                "summary": "Retrieve Request File uploaded files by the login uploader",
                "description": "Returns uploaded files by the login uploader.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/RequestFileUpload"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "description": "the shortlink of request file to retrieve for",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/requestFile/{ref}/uploads/{object_id}": {
            "get": {
                "tags": [
                    "requestFile"
                ],
                "summary": "Read uploaded file info",
                "description": "Read properties of a uploaded file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "description": "weblink",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "object_id",
                        "description": "ID of the uploaded file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "requestFile"
                ],
                "summary": "Delete uploaded file",
                "description": "Delete an uploaded file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ENTITY_LOCKED<br />Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "description": "weblink",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "object_id",
                        "description": "ID of the uploaded file",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/requestFile/{ref}/uploads/{object_id}/content": {
            "get": {
                "tags": [
                    "files",
                    "requestFile"
                ],
                "summary": "Read source file content",
                "description": "Read content of a source file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "description": "id",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "object_id",
                        "description": "ID of the file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "header",
                        "name": "Range",
                        "description": "Bytes range to retrieve. Example: bytes=0-1024",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/roles": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "List user roles",
                "description": "Returns a list of available user roles. e.g.:\n                   kiteworks default roles are Manager, Collaborator, Downloader, Viewer, Uploader.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Role"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Role name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Role name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "disabled",
                        "description": "Whether Role is disabled",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "Type of role",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/roles/{id}": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get a role",
                "description": "Returns the details of a specified role including the mask that indicates\n                  what functionality this role is allowed to do.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the role to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/search": {
            "get": {
                "tags": [
                    "search"
                ],
                "summary": "Return lists of files/folders/emails from search results",
                "description": "Return lists of files/folders/emails from search results",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Search"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "objectId",
                        "description": "Id of folder to search",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "content",
                        "description": "Search by content",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "content:contains",
                        "description": "Search by content. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "content:startswith",
                        "description": "",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "description": "Search by description",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "description:contains",
                        "description": "Search by description. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "description:startswith",
                        "description": "",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "user",
                        "description": "Search by user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "modified",
                        "description": "Search by modified date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gt",
                        "description": "Search by modified date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gte",
                        "description": "Search by modified date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lt",
                        "description": "Search by modified date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lte",
                        "description": "Search by modified date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "Search by created date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "Search by created date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "Search by created date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "Search by created date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "Search by created date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "locked",
                        "description": "Search by lock status",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locked:gt",
                        "description": "Search by lock status. Search for result that has this parameter value greater than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locked:gte",
                        "description": "Search by lock status. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locked:lt",
                        "description": "Search by lock status. Search for result that has this parameter value less than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locked:lte",
                        "description": "Search by lock status. Search for result that has this parameter value less or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "filesize",
                        "description": "Search by file size",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "filesize:gt",
                        "description": "Search by file size. Search for result that has this parameter value greater than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "filesize:gte",
                        "description": "Search by file size. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "filesize:lt",
                        "description": "Search by file size. Search for result that has this parameter value less than specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "filesize:lte",
                        "description": "Search by file size. Search for result that has this parameter value less or equal to the specified.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "file_type",
                        "description": "Search by file type",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "email_type",
                        "description": "Search by email type",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "path",
                        "description": "Search files/folders by path. If this is specified, other search criteria is no longer valid.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "path:contains",
                        "description": "Search files/folders by path. If this is specified, other search criteria is no longer valid.. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "searchType",
                        "description": "Search type: f(files), d(directories), m(mails) or  k(kitepoint)",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "searchFilter",
                        "description": "Search all or only shared folders",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fls_only",
                        "description": "Search by file shared to me",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "sharedMailboxId",
                        "description": "Id of shared mailbox to search",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/settings/passwordPolicy": {
            "get": {
                "tags": [
                    "settings"
                ],
                "summary": "Get Password Policy",
                "description": "Returns the password policy settings",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/PasswordPolicy"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false
            }
        },
        "/rest/settings/system": {
            "get": {
                "tags": [
                    "settings"
                ],
                "summary": "Get system settings",
                "description": "Returns system settings",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Settings"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false
            }
        },
        "/rest/shortLinks/{ref}": {
            "get": {
                "tags": [
                    "shortLinks"
                ],
                "summary": "Short Link",
                "description": "Returns properties of a short link including the associated entity ID.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Shortlink"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "description": "The ref value of the short link",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/sourceTypes": {
            "get": {
                "tags": [
                    "sourceTypes"
                ],
                "summary": "List all ECM source types",
                "description": "Returns a list of available ECM source types.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SourceType"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Mode",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/rest/sourceTypes/{id}": {
            "get": {
                "tags": [
                    "sourceTypes"
                ],
                "summary": "Returns requested ECM source type",
                "description": "Returns requested source type.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SourceType"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the sourceType to be retrieved",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/sources": {
            "post": {
                "tags": [
                    "sources"
                ],
                "summary": "Add user ECM source",
                "description": "Add user source.",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "source details",
                        "schema": {
                            "$ref": "#/definitions/Source.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "get": {
                "summary": "Return user's sources",
                "description": "Return user's sources",
                "tags": [
                    "sources"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "include_container",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "include_kw",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "search_type",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return user's sources successfully",
                        "schema": {
                            "$ref": "#/definitions/Sources"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_DENIED\n\nERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/sources/actions/downloadByTransaction": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "Download EC file",
                "description": "Download EC file using the transaction ID",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/KPTransferStatus"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "transactionId",
                        "description": "Transaction ID of download",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/sources/actions/files/{id}": {
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "upload new version of EC file",
                "description": "uploads new version of EC file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/KPTransferStatus"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ENTITY_RESTRICTED_EXTENSION<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_GROUP"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "kp file id",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "body",
                        "description": "file content",
                        "type": "file",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ]
            }
        },
        "/rest/sources/actions/lock": {
            "patch": {
                "tags": [
                    "sources"
                ],
                "summary": "Lock EC files",
                "description": "Lock EC files",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/sources/actions/unlock": {
            "patch": {
                "tags": [
                    "sources"
                ],
                "summary": "Unlock EC files",
                "description": "Unlock EC files",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "Array of values which are going to be changed.",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/sources/auth": {
            "post": {
                "tags": [
                    "sources"
                ],
                "summary": "Login to cloud source",
                "description": "Get tokens after ECM auth",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Login params",
                        "schema": {
                            "$ref": "#/definitions/CloudSourceLogin.Post"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/sources/files/actions/transferStatus": {
            "get": {
                "tags": [
                    "sources"
                ],
                "summary": "Get kp transfer status.",
                "description": "Get status of transfer to EC",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/KPTransferStatus"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "transactionId",
                        "description": "Transaction ID of download",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "transactionId:in",
                        "description": "Transaction ID of download. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/sources/files/{id}": {
            "get": {
                "tags": [
                    "sources"
                ],
                "summary": "Get info of an EC file.",
                "description": "Get info of an EC file.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SourceFile"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of EC file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "sources"
                ],
                "summary": "Delete an EC file.",
                "description": "Delete an EC file.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_FILE_IS_IN_USE_BY_OTHER_USER<br />Errors\\ERR_FILE_IS_IN_USE_BY_CURRENT_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of EC file",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "forceDelete",
                        "description": "If set to True user can delete file which only in his use",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/sources/folders/{id}": {
            "get": {
                "tags": [
                    "sources"
                ],
                "summary": "Get info of an EC folder.",
                "description": "Get info of an EC folder.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SourceFolder"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of EC folder",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "sources"
                ],
                "summary": "Delete an EC folder.",
                "description": "Delete an EC folder.",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of EC folder",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/sources/{id}": {
            "get": {
                "tags": [
                    "sources"
                ],
                "summary": "Returns requested ECM source",
                "description": "Returns requested source.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Source"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the source to be retrieved",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "sources"
                ],
                "summary": "Deletes specified source",
                "description": "Deletes specified source.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the source to be deleted.",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/sources/{id}/actions/file": {
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "upload content",
                "description": "uploads file content to a kp folder",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/KPTransferStatus"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ENTITY_RESTRICTED_EXTENSION<br />Errors\\ERR_ENTITY_RESTRICTED_EXTENSION_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_CUSTOM<br />Errors\\ERR_ENTITY_RESTRICTED_TYPE_GROUP"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "kp folder id",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "body",
                        "description": "file content",
                        "type": "file",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ]
            }
        },
        "/rest/sources/{id}/actions/initiateDownload": {
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "Initiate EC file download",
                "description": "Initiate Ec file download to kiteworks",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/KPTransferStatus"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "EC file id",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/sources/{id}/auth": {
            "get": {
                "tags": [
                    "sources"
                ],
                "summary": "Get url with redirect to cloud ECM auth",
                "description": "Get url with redirect to cloud ECM auth",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/EcmAuth"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The source ID",
                        "type": "integer",
                        "required": true
                    }
                ]
            },
            "post": {
                "tags": [
                    "sources"
                ],
                "summary": "Login to on-premise source",
                "description": "Login to on-premise source",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The source ID",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Login params",
                        "schema": {
                            "$ref": "#/definitions/OnPremiseSourceLogin.Post"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/sources/{id}/authStatus": {
            "get": {
                "tags": [
                    "sources"
                ],
                "summary": "Get cloud ECM auth status",
                "description": "Get cloud ECM auth status",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The source ID",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/sources/{id}/children": {
            "get": {
                "tags": [
                    "sources"
                ],
                "summary": "Returns the content of the specified ECM source",
                "description": "Returns the content of the requested source.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SourceContent"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the source folder to be retrieved",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Object name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Object name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "description": "Object description",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "description:contains",
                        "description": "Object description. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "Object creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "Object creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "Object creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "Object creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "Object creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified",
                        "description": "Object modification date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gt",
                        "description": "Object modification date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gte",
                        "description": "Object modification date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lt",
                        "description": "Object modification date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lte",
                        "description": "Object modification date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Indicates that object is deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "Object type to return",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/sources/{id}/content": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "Read EC file content",
                "description": "Read content of an EC file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "EC file id",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/sources/{id}/externalEdit": {
            "get": {
                "tags": [
                    "sources"
                ],
                "summary": "Get access token for external file edit.",
                "description": "Retrieve refresh token for external file edit.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/RefreshToken"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the file",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/sources/{id}/folders": {
            "get": {
                "tags": [
                    "sources"
                ],
                "summary": "Returns the list of folders of the specified ECM folder",
                "description": "Returns the content of the requested source.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SourceContent"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the source folder to be retrieved",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Object name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Object name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "description": "Object description",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "description:contains",
                        "description": "Object description. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "Object creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "Object creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "Object creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "Object creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "Object creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified",
                        "description": "Object modification date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gt",
                        "description": "Object modification date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gte",
                        "description": "Object modification date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lt",
                        "description": "Object modification date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lte",
                        "description": "Object modification date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Indicates that object is deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/sources/{id}/preview": {
            "get": {
                "tags": [
                    "sources",
                    "files"
                ],
                "summary": "Retrieve information about the kitepoint file preview.",
                "description": "Retrieve information about the kitepoint file preview.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/KitepointPreview"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the kitepoint file",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/sources/{parent}/files": {
            "get": {
                "tags": [
                    "sources"
                ],
                "summary": "Returns the list of files of the specified ECM folder",
                "description": "Returns the list of files of the requested ECM folder.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SourceContent"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "parent",
                        "description": "ID of the source folder to be retrieved",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Object name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Object name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "description": "Object description",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "description:contains",
                        "description": "Object description. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "Object creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "Object creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "Object creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "Object creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "Object creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified",
                        "description": "Object modification date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gt",
                        "description": "Object modification date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gte",
                        "description": "Object modification date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lt",
                        "description": "Object modification date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lte",
                        "description": "Object modification date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Indicates that object is deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/tasks": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Gets all tasks for current user",
                "description": "Gets all tasks for current user",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "assigneeId",
                        "description": "Assigned User unique identifier",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "assigneeId:in",
                        "description": "Assigned User unique identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "due",
                        "description": "Task due date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "due:gt",
                        "description": "Task due date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "due:gte",
                        "description": "Task due date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "due:lt",
                        "description": "Task due date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "due:lte",
                        "description": "Task due date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "parentId",
                        "description": "Parent Comment identifier",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "parentId:in",
                        "description": "Parent Comment identifier. Search for results that contain any of specified values of this parameter.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "Task creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "Task creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "Task creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "Task creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "Task creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified",
                        "description": "Task modification date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gt",
                        "description": "Task modification date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:gte",
                        "description": "Task modification date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lt",
                        "description": "Task modification date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "modified:lte",
                        "description": "Task modification date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "contents:contains",
                        "description": "Task content. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Task status",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Whether the task has been deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "assigned",
                        "description": "Show assigned to",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/tasks/{id}": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Get Task by ID",
                "description": "Returns the details of a task based on ID",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the task to retrieve",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "put": {
                "tags": [
                    "tasks"
                ],
                "summary": "Update Task",
                "description": "Updates the details of a task",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the task to update",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The task details",
                        "schema": {
                            "$ref": "#/definitions/Task.Put"
                        },
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "tasks"
                ],
                "summary": "Delete a Task",
                "description": "Deletes a task",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the task to delete",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/uploads": {
            "get": {
                "tags": [
                    "uploads"
                ],
                "summary": "Fetch all paused user's upload sessions",
                "description": "Returns all paused user's upload sessions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Upload"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locate_id",
                        "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/uploads/config": {
            "get": {
                "tags": [
                    "uploads"
                ],
                "summary": "Get upload server configuration",
                "description": "Returns the details of the upload server configuration",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AcfsConfig"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false
            }
        },
        "/rest/uploads/{id}": {
            "get": {
                "tags": [
                    "uploads"
                ],
                "summary": "Get Upload",
                "description": "Returns the details of the specified upload",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the upload to retrieve",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "uploads"
                ],
                "summary": "Terminate chunk upload session",
                "description": "Terminates chunk upload session",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "upload id",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get a list of Users",
                "description": "Returns a list of Users in the system.\n                  This call will only work for users with admin access.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "email",
                        "description": "The user's email",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "email:contains",
                        "description": "The user's email. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "The name of the user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "The name of the user. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "metadata",
                        "description": "The metadata of the user",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "metadataContains",
                        "description": "The metadata of the user. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "description": "Whether the user has been deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "active",
                        "description": "Whether the user is an actual kitework user",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "description": "Whether the user is verified",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "suspended",
                        "description": "Whether the user is suspended",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "isRecipient",
                        "description": "Whether user is recipient",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "allowsCollaboration",
                        "description": "Whether user's profile allows collaboration access",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "description": "User creation date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "description": "User creation date. Search for result that has this parameter value greater than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "description": "User creation date. Search for result that has this parameter value greater or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "description": "User creation date. Search for result that has this parameter value less than specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "description": "User creation date. Search for result that has this parameter value less or equal to the specified.",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "locate_id",
                        "description": "If specified, \"offset\" parameter will be ignored\n                                            and the page containing entity with this Id will be returned.",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Create a User",
                "description": "Creates a new User in the system by specifying an email address and name.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_INVALID_EMAIL<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_PASSWORD_COMPLEXITY_ERROR<br />ERR_INPUT_NOT_NUMERIC<br />ERR_INPUT_MIN_VALUE"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The user details",
                        "schema": {
                            "$ref": "#/definitions/User.Post"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "description": "Return information about newly created entity",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Deletes Users",
                "description": "Mark the specified users as deleted. The size of request User UUID is limited (recommend <= 100)",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_NOT_BOOLEAN<br />ERR_INPUT_ATTRIBUTE_FORBIDDEN<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_NOT_STRING"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "description": "List of the users id which will be deleted",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "retainToUser",
                        "description": "New owner id to re-assign data to (required if retainData or retainPermissionToSharedData is True)",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "remoteWipe",
                        "description": "Remote wipe data on desktop and mobile devices",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "deleteUnsharedData",
                        "description": "Delete all data owned by the user (required and must be True if retainData is False and vice versa)",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "retainData",
                        "description": "Retain users data (required and must be True if deleteUnsharedData is False and vice versa)",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "retainPermissionToSharedData",
                        "description": "Retain permissions to shared data",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "withdrawFileLinks",
                        "description": "Delete attached files in emails sent by deleted/demoted users",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "withdrawRequestFiles",
                        "description": "Delete request files emails sent by deleted/demoted users",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/users/actions/login": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "User login",
                "description": "User login.",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User Login",
                        "schema": {
                            "$ref": "#/definitions/UserLogin.Post"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/aliveToken": {
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Updates token state",
                "description": "Updates current session state to be not outdated any more",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false
            }
        },
        "/rest/users/ldapSearch": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Find users in LDAP by input supplied",
                "description": "Returns a list of Users in LDAP by the input supplied.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LdapSearchResults"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "value",
                        "description": "The user's email or name",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/users/me": {
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update current user",
                "description": "Updates the details of current user. e.g.: Change their name or password",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The user details",
                        "schema": {
                            "$ref": "#/definitions/UserNamePassword.Put"
                        },
                        "required": true
                    }
                ]
            },
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get current logged in User",
                "description": "Returns the details of the current user (this includes email address and name)",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/UserMe"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false
            }
        },
        "/rest/users/me/forcedPasswordChange": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Change the password for current user after expired",
                "description": "Change the password for current user after password expired",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Password and previous password",
                        "schema": {
                            "$ref": "#/definitions/UserForcedPasswordChange.Put"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/me/mobileNumber": {
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update mobile number of the current user",
                "description": "Update mobile number of the current user",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_REQUIRED<br />ERR_INPUT_INVALID_FORMAT"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The user's mobile number update details",
                        "schema": {
                            "$ref": "#/definitions/UserMobileNumberPassword.Put"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/me/quota": {
            "get": {
                "summary": "Return user's quota",
                "description": "Return user's quota",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quota listed successfully",
                        "schema": {
                            "$ref": "#/definitions/UserQuota"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "404": {
                        "description": "ERR_ENTITY_NOT_FOUND"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/users/me/tfa/auth": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Two Factor Authentication",
                "description": "Two Factor Authentication",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "TFA",
                        "schema": {
                            "$ref": "#/definitions/UserTfa.Post"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/me/tfa/challenge": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Two Factor Authentication",
                "description": "Two Factor Authentication",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "referral",
                        "description": "Referral URL",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/users/me/tfa/config": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Two Factor Authentication",
                "description": "Two Factor Authentication",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false
            }
        },
        "/rest/users/me/tfa/resetTotpSecret": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Reset secret key for time-based OTP of the current user",
                "description": "Reset secret key for time-based OTP of the current user",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_PASSWORD_COMPLEXITY_ERROR<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The user's credential to reset TOTP secret",
                        "schema": {
                            "$ref": "#/definitions/UserTfaTotpResetSecret.Post"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/me/tfa/setupTotpSecret": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Setup secret key for Time-based OTP of the current user",
                "description": "Setup secret key for Time-based OTP of the current user",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false
            }
        },
        "/rest/users/me/tfa/verifyTotpSecret": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Verify code for finalising secret key for timed-based OTP",
                "description": "Verify code for finalising secret key for timed-based OTP",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "OTP",
                        "schema": {
                            "$ref": "#/definitions/UserTfaTotpVerifySecret.Post"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/me/tfaSetup": {
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Setup 2FA settings",
                "description": "Updates the 2FA settings for the current user",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The Settings details",
                        "schema": {
                            "$ref": "#/definitions/UserTfa.Put"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/me/tos": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Terms of Service",
                "description": "Terms of Service",
                "responses": {
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Terms of Service",
                "description": "Terms of Service",
                "responses": {
                    "422": {
                        "description": "ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "TOS acceptance",
                        "schema": {
                            "$ref": "#/definitions/UserTos.Post"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/preauth": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "User login preauth",
                "description": "User login preauth.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User preauth",
                        "schema": {
                            "$ref": "#/definitions/UserPreauth.Post"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/register": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Register a User",
                "description": "Registers a new User in the system by specifying an email address and password.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_INVALID_EMAIL<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_PASSWORD_COMPLEXITY_ERROR"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The user details",
                        "schema": {
                            "$ref": "#/definitions/UserRegister.Post"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/requestPasswordReset": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Request for password reset",
                "description": "Request for password reset of existing user",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_INVALID_EMAIL<br />ERR_INPUT_REQUIRED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The user email",
                        "schema": {
                            "$ref": "#/definitions/UserRequestPasswordReset.Post"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/resetPassword": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Reset password",
                "description": "Reset password of an existing user",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_PASSWORD_COMPLEXITY_ERROR"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The password reset data",
                        "schema": {
                            "$ref": "#/definitions/UserResetPassword.Post"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/{id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get User",
                "description": "Returns the details of the specified user (this includes email address and name)",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user to retrieve",
                        "type": "string",
                        "required": true
                    }
                ]
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Deletes a User",
                "description": "Mark the specified user as deleted. This user will still be returned in the GET Users query.",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER<br />ERR_INPUT_NOT_BOOLEAN<br />ERR_INPUT_ATTRIBUTE_FORBIDDEN<br />ERR_INPUT_REQUIRED<br />ERR_INPUT_NOT_STRING"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user to delete",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "retainToUser",
                        "description": "New owner id to re-assign data to (required if retainData or retainPermissionToSharedData is True)",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "remoteWipe",
                        "description": "Remote wipe data on desktop and mobile devices",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "deleteUnsharedData",
                        "description": "Delete all data owned by the user (required and must be True if retainData is False and vice versa)",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "retainData",
                        "description": "Retain users data (required and must be True if deleteUnsharedData is False and vice versa)",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "retainPermissionToSharedData",
                        "description": "Retain permissions to shared data",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "withdrawFileLinks",
                        "description": "Delete attached files in emails sent by deleted/demoted users",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "withdrawRequestFiles",
                        "description": "Delete request files emails sent by deleted/demoted users",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "description": "Whether to perform action on valid items even if some ones fail",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/users/{id}/adminRoles": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Return admin roles of the specified user id.",
                "description": "Returns the details of all adminroles\n                  (active and deleted users) with the specified user id.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AdminRole"
                            }
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user to retrieve admin role",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/users/{id}/devices": {
            "get": {
                "tags": [
                    "devices"
                ],
                "summary": "List devices for a user",
                "description": "Return a list of devices for a specific user",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Device"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user whose devices to be retrieved",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/{id}/profileImage": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Uploads a profile image",
                "description": "Uploads an image file to use as profile image",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "user id",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "body",
                        "description": "file content",
                        "type": "file",
                        "required": true
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ]
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Deletes a profile image",
                "description": "Deletes an image file to use as profile image",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "user id",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/{id}/settings": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get User Settings",
                "description": "Returns the user settings",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Settings"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user to retrieve settings for",
                        "type": "string",
                        "required": true
                    }
                ]
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update User Settings",
                "description": "Updates the settings for the specified user",
                "responses": {
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the user to update settings for",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The Settings details",
                        "schema": {
                            "$ref": "#/definitions/Settings.Put"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/webForms": {
            "get": {
                "tags": [
                    "webForms"
                ],
                "summary": "List web forms",
                "description": "Returns a list of web forms available to current user.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/WebForm"
                            }
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Web form name",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "description": "Web form name. Search for result that contains specified characters in this parameter.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "description": "Sorting options",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/webForms/{id}": {
            "get": {
                "tags": [
                    "webForms"
                ],
                "summary": "Get a web form",
                "description": "Returns the details of a specified web form",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/WebForm"
                        }
                    },
                    "422": {
                        "description": "Errors\\ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the web form to be retrieved",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "description": "With parameters",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Response mode",
                        "type": "string"
                    }
                ]
            }
        },
        "/rest/wopi/containers/{folder}/token": {
            "post": {
                "tags": [
                    "wopi"
                ],
                "summary": "Generate WopiAccessToken for folder",
                "description": "Generate WopiAccessToken for folder",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/WopiAccessToken"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "folder",
                        "description": "ID of the folder",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/wopi/files/{file}/token": {
            "post": {
                "tags": [
                    "wopi"
                ],
                "summary": "Generate WopiAccessToken for file",
                "description": "Generate WopiAccessToken for file",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/WopiAccessToken"
                        }
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "deprecated": false,
                "parameters": [
                    {
                        "in": "path",
                        "name": "file",
                        "description": "ID of the file",
                        "type": "integer",
                        "required": true
                    }
                ]
            }
        },
        "/rest/files/actions/content/link/{ref}": {
            "get": {
                "summary": "Download a file by link",
                "description": "Download a file by link",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "required": true,
                        "description": "The ID of the download link",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File download by link is successful",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_DLP_LOCKED\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_VIRUS_FOUND"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}/actions/initiateUpload/zip": {
            "post": {
                "summary": "initiates archive file chunk upload session endpoint",
                "description": "initiates archive file chunk upload session",
                "tags": [
                    "uploads"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/InitiateUploadPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Request successfully processed\n",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DLP_LOCKED\n\nERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_RESTRICTED_EXTENSION\n\nERR_ENTITY_VIRUS_FOUND\n"
                    },
                    "413": {
                        "description": "ERR_SYSTEM_NO_STORAGE_AVAILABLE\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_FILE_EXT_NOT_ALLOWED\n\nERR_INPUT_INVALID_DATE\n\nERR_INPUT_INVALID_FORMAT\n\nERR_INPUT_MAX_VALUE\n\nERR_INPUT_MIN_VALUE\n\nERR_INVALID_PARAMETER\n\nERR_SYSTEM_NO_STORAGE_AVAILABLE\n\nERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}/actions/initiateUpload": {
            "post": {
                "summary": "initiates file chunk upload session endpoint",
                "description": "initiates file chunk upload session",
                "tags": [
                    "uploads"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/InitiateUploadPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DLP_LOCKED\n\nERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_RESTRICTED_EXTENSION\n\nERR_ENTITY_VIRUS_FOUND\n"
                    },
                    "413": {
                        "description": "ERR_SYSTEM_NO_STORAGE_AVAILABLE\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_INVALID_DATE\n\nERR_INPUT_INVALID_FORMAT\n\nERR_INPUT_MAX_VALUE\n\nERR_INPUT_MIN_VALUE\n\nERR_INVALID_PARAMETER\n\nERR_SYSTEM_NO_STORAGE_AVAILABLE\n\nERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/requestFile/{ref}/actions/initiateUpload": {
            "post": {
                "summary": "initiates file chunk upload session endpoint",
                "description": "initiates file chunk upload session",
                "tags": [
                    "uploads"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "required": true,
                        "description": "The ref of the Request File",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/InitiateUploadPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Request successfully processed\n",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_REQUEST_FILE_UPLOAD_LIMIT_REACHED\n\nERR_ENTITY_RESTRICTED_EXTENSION\n"
                    },
                    "413": {
                        "description": "ERR_SYSTEM_NO_STORAGE_AVAILABLE\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_INVALID_DATE\n\nERR_INPUT_INVALID_FORMAT\n\nERR_INPUT_MAX_VALUE\n\nERR_INPUT_MIN_VALUE\n\nERR_INVALID_PARAMETER\n\nERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/{id}/actions/initiateUpload": {
            "post": {
                "summary": "initiates file chunk upload session endpoint",
                "description": "initiates file chunk upload session",
                "tags": [
                    "uploads"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/InitiateUploadPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Request successfully processed\n",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_RESTRICTED_EXTENSION\n"
                    },
                    "413": {
                        "description": "ERR_SYSTEM_NO_STORAGE_AVAILABLE\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_INVALID_DATE\n\nERR_INPUT_INVALID_FORMAT\n\nERR_INPUT_MAX_VALUE\n\nERR_INPUT_MIN_VALUE\n\nERR_INVALID_PARAMETER\n\nERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/public/mail/{id}/actions/initiateUpload": {
            "post": {
                "summary": "initiates file chunk upload session endpoint",
                "description": "initiates file chunk upload session",
                "tags": [
                    "uploads"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/InitiateUploadPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Request successfully processed\n",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_RESTRICTED_EXTENSION\n"
                    },
                    "413": {
                        "description": "ERR_SYSTEM_NO_STORAGE_AVAILABLE\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_INVALID_DATE\n\nERR_INPUT_INVALID_FORMAT\n\nERR_INPUT_MAX_VALUE\n\nERR_INPUT_MIN_VALUE\n\nERR_INVALID_PARAMETER\n\nERR_LICENSE_MAX_UPLOAD_SIZE\n\nERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/files/{id}/actions/initiateUpload": {
            "post": {
                "summary": "initiates file chunk upload session endpoint",
                "description": "initiates file chunk upload session",
                "tags": [
                    "uploads"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/InitiateUploadPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Request successfully processed\n",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DLP_LOCKED\n\nERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_RESTRICTED_EXTENSION\n\nERR_ENTITY_VIRUS_FOUND\n"
                    },
                    "413": {
                        "description": "ERR_SYSTEM_NO_STORAGE_AVAILABLE\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_INVALID_DATE\n\nERR_INPUT_INVALID_FORMAT\n\nERR_INPUT_MAX_VALUE\n\nERR_INPUT_MIN_VALUE\n\nERR_INVALID_PARAMETER\n\nERR_SYSTEM_NO_AVAILABLE_STORAGE_HOSTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/{id}/actions/withdrawFiles": {
            "post": {
                "summary": "Withdraw attachments from mail",
                "description": "Withdraw attachments from mail",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sharedMailboxId",
                        "required": false,
                        "description": "Shared Mailbox unique identifier. Search for result belongs to the Shared Mailbox.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Attachments are withdrawn successfully"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_NOT_SENDER\n\nERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_IS_DELETED_ATTACHMENT\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/{id}/actions/copy": {
            "post": {
                "summary": "Copy attachments from mail to folder",
                "description": "Copy attachments from mail to folder",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/DestinationFolderIdRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Attachments are copied successfully",
                        "schema": {
                            "$ref": "#/definitions/File"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_NOT_SENDER\n\nERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_IS_DELETED_ATTACHMENT\n\nERR_ENTITY_IS_MY_DIR\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_ENTITY_RESTRICTED_EXTENSION\n\nERR_ENTITY_RESTRICTED_TYPE\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/{id}/actions/sendTrackingReport": {
            "post": {
                "summary": "Send tracking report for email",
                "description": "Send tracking report for email",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The mail is sent successfully"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_NOT_SENDER\n\nERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/attachments": {
            "get": {
                "summary": "Get email attachments",
                "description": "Get email attachments from sent & draft mail",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "bucket",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attachments are listed out successfully",
                        "schema": {
                            "$ref": "#/definitions/MailAttachments"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "delete": {
                "summary": "Delete attachment(s)",
                "description": "Delete email attachment(s) from sent & draft mail",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Attachments are withdrawn successfully"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/actions/withdraw": {
            "post": {
                "summary": "Withdraws mails",
                "description": "Withdraws mails",
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "207": {
                        "description": "Partially successful operation",
                        "schema": {
                            "$ref": "#/definitions/BulkOperationInteger"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_EMAIL_IS_NOT_COMPLETED\n\nERR_ACCESS_NOT_SENDER\n\nERR_MAIL_BODY_UNSECURED\n\nERR_ENTITY_IS_EMAIL_CONTENT"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/MailWithdrawRequest"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/mail/{id}/scanStatus": {
            "get": {
                "summary": "Get the status of a mail job based on attachment and content scan status.",
                "description": "Get the status of a mail job based on attachment and content scan status.",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mail attachments (if any) and JSON contents all passed AV/DLP scanning."
                    },
                    "401": {
                        "description": "ERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_EMAIL_IS_DRAFT\n\nERR_ENTITY_EMAIL_SCANNING\n\nERR_ENTITY_EMAIL_SCANNING_DISALLOWED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/{id}/trackings/me": {
            "delete": {
                "summary": "Unsubscribe user from tracking",
                "description": "Unsubscribe user from tracking",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The tracking is unsubscribed"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/mail/{id}/settings": {
            "put": {
                "summary": "Allow sender to update the mail setting of an email.",
                "description": "Allow sender to update the mail setting of an email.",
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/SendMailSettingPutRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mail settings updated successfully"
                    },
                    "401": {
                        "description": "ERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_NOT_INTERNAL_DOMAIN\n\nERR_INSUFFICIENT_TRACKING_PERMISSIONS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/users/me/recent": {
            "get": {
                "summary": "Return user's recent items",
                "description": "Return user's recent items",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed\n",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Folder"
                            }
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "post": {
                "summary": "Adding objects to user's recent items",
                "description": "Adding objects to user's recent items",
                "tags": [
                    "users"
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated user's recent items"
                    },
                    "207": {
                        "description": "Partially updated user's recent items"
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/RecentObjectsPostRequest"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/users/me/recent/{id}": {
            "delete": {
                "summary": "Delete user's recent item",
                "description": "Delete user's recent item",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted successfully"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/users/me/pins": {
            "delete": {
                "summary": "Delete user pin",
                "description": "Delete user pin",
                "tags": [
                    "users"
                ],
                "responses": {
                    "204": {
                        "description": "Successfully pinned item"
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/UserMePinsPostRequest"
                        },
                        "required": true
                    }
                ]
            },
            "post": {
                "summary": "Add item to user pin",
                "description": "Add item to user pin",
                "tags": [
                    "users"
                ],
                "responses": {
                    "204": {
                        "description": "Successfully pinned item"
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/UserMePinsPostRequest"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/admin/users/actions/import": {
            "post": {
                "summary": "imports users endpoint",
                "description": "bulk imports users and optionally update existing users",
                "tags": [
                    "users"
                ],
                "responses": {
                    "200": {
                        "description": "The users import is successful",
                        "schema": {
                            "$ref": "#/definitions/AdminUserImport"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_ADMIN\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_INVALID_FORMAT\n\nERR_INVALID_ARGUMENT"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "formData",
                        "name": "content",
                        "type": "file",
                        "description": "The file containing the users to be imported.",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "updateIfExists",
                        "type": "boolean",
                        "description": "If user exists, update user's settings",
                        "required": false
                    },
                    {
                        "in": "formData",
                        "name": "sendNotification",
                        "type": "boolean",
                        "description": "If true, a notification email will be sent to each newly created users",
                        "required": false
                    },
                    {
                        "in": "formData",
                        "name": "partialSuccess",
                        "type": "boolean",
                        "description": "If true, partial processing will be performed, i.e., only validated users are imported, while others are rejected",
                        "required": false
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ]
            }
        },
        "/rest/users/actions/getDistributionList": {
            "get": {
                "summary": "Return user which is LDAP distribution list",
                "description": "Return user which is LDAP distribution list",
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "email:in",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "email"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed\n",
                        "schema": {
                            "$ref": "#/definitions/UserDistributionList"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_DENIED\n\nERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/users/me/concurrent/challenge": {
            "get": {
                "description": "Get last concurrent session info to be terminated",
                "tags": [
                    "users"
                ],
                "responses": {
                    "200": {
                        "description": "The concurrent session info",
                        "schema": {
                            "$ref": "#/definitions/UserMeConcurrentChallenge"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_AUTH_WRONG_LOGIN_STATE\n\nERR_CONCURRENT_NOT_FOUND"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": []
            }
        },
        "/rest/users/me/concurrent/auth": {
            "post": {
                "description": "Confirm to terminate concurrent sessions",
                "tags": [
                    "users"
                ],
                "responses": {
                    "200": {
                        "description": "Terminated or cancelled terminating concurrent sessions"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_AUTH_WRONG_LOGIN_STATE"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": []
            }
        },
        "/rest/mail/actions/requestFile": {
            "post": {
                "summary": "Send a Request File to Inbox",
                "description": "Send a Request File to Inbox",
                "tags": [
                    "requestFile"
                ],
                "responses": {
                    "201": {
                        "description": "Request File to Inbox is processed successfully"
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST\n\nERR_LICENSE_MAX_USERS_COUNT_REACHED\n\nERR_SYSTEM_REQUEST_FILE_DISABLED\n\nERR_USER_HAS_NO_USER_TYPE\n\nERR_USER_TYPE_NO_ACCESS\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_HYPERLINK\n\nERR_INPUT_INVALID_DATE\n\nERR_INPUT_REQUIRED\n\nERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/RequestFileToInboxPostRequest"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/requestFile/{ref}/reply": {
            "post": {
                "summary": "Reply to Request File",
                "description": "Reply to Request File",
                "tags": [
                    "requestFile"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "ref",
                        "required": true,
                        "description": "The ref of the Request File",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/RequestFileReplyPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Reply to Request File is processed successfully"
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_REQUEST_FILE_NO_FILE_UPLOADED\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_HYPERLINK"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/preview/file/{id}": {
            "get": {
                "summary": "Preview content of file from EC sources",
                "description": "Preview content of file from EC sources",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The preview content is generated successfully"
                    },
                    "401": {
                        "description": "ERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}/quota": {
            "get": {
                "summary": "Get the folder quota",
                "description": "Get the folder quota",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fileId",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FolderQuota is returned successfully",
                        "schema": {
                            "$ref": "#/definitions/FolderQuota"
                        }
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n\nERR_ENTITY_NOT_FOUND\n"
                    },
                    "403": {
                        "description": "ERR_ENTITY_DELETED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}/children": {
            "get": {
                "summary": "Return the list of folder children. Folders fetched at first, then files.",
                "description": "Return the list of folder children. Folders fetched at first, then files.",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "description": "Sorting options. Accepts id, name, modified, created, size. Sample format is id:asc",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "extensions",
                        "required": false,
                        "description": "Comma delimited whitelist of extensions to filter files by",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "regex",
                        "required": false,
                        "description": "Regex pattern to filter files by",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fileId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "required": false,
                        "description": "Don't show deleted, true - show only deleted, none - show both",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of folder children.\n",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Folder"
                            }
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/top": {
            "get": {
                "summary": "Return the list of top level and shared folders.",
                "description": "Return the list of top level and shared folders.",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "description": "Sorting options. Accepts id, name, modified, created, size. Sample format is id:asc",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "description": "offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "description": "limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "deleted",
                        "required": false,
                        "description": "don't show deleted, true - show only deleted, none - show both",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of top level and shared folders.",
                        "schema": {
                            "$ref": "#/definitions/Folders"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}": {
            "get": {
                "summary": "Get the folder",
                "description": "Get the folder",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder is returned successfully",
                        "schema": {
                            "$ref": "#/definitions/Folder1"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_FILTER\n"
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_DENIED\n"
                    },
                    "410": {
                        "description": "ERR_ENTITY_DELETED_PERMANENTLY"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "delete": {
                "summary": "Folder for deletion",
                "description": "Marks the specified folder for deletion. The folder is still accessible as a deleted folder until it expires and is deleted permanently.",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The folder is deleted"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_SYSTEM_TENANT_SUSPENDED\n\nERR_ACCESS_DENIED\n\nERR_ENTITY_IS_SYNC_DIR\n\nERR_ENTITY_IS_MY_DIR\n\nERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_IS_NOT_UPDATABLE\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_ENTITY_CONTAINS_LOCKED_FILES\n\nERR_ACCESS_USER\n\nERR_PROFILE_COLLABORATION_DISABLED\n\nERR_ENTITY_DELETED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "put": {
                "summary": "Update a folder",
                "description": "Update folder",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/FolderUpdatePutRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder is updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Folder1"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_DENIED\n\nERR_ACCESS_USER\n"
                    },
                    "409": {
                        "description": "ERR_ENTITY_EXISTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}/activities": {
            "get": {
                "summary": "Get activities list",
                "description": "Get activities list",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "description": "All or my activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "description": "Activity type",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "startTime",
                        "required": false,
                        "description": "Start time in unix timestamp",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "endTime",
                        "required": false,
                        "description": "End time in unix timestamp",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": false,
                        "description": "End date",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "search",
                        "required": false,
                        "description": "Search by mail body, subject and sender/recipients",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "description": "Order By",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": false,
                        "description": "Start date",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "transactionId",
                        "required": false,
                        "description": "Transaction ID associated with the activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fileId",
                        "required": false,
                        "description": "File ID inside the folder",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "nested",
                        "required": false,
                        "description": "Include nested folders",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "noDayBack",
                        "required": false,
                        "description": "Number of days back to search",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return activities list",
                        "schema": {
                            "$ref": "#/definitions/ActivityList"
                        }
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}/activities/actions/exportCSV": {
            "get": {
                "summary": "Get activities list",
                "description": "Get activities list",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "description": "All or my activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "description": "Activity type",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "startTime",
                        "required": false,
                        "description": "Start time in unix timestamp",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "endTime",
                        "required": false,
                        "description": "End time in unix timestamp",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": false,
                        "description": "End date",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "search",
                        "required": false,
                        "description": "Search by mail body, subject and sender/recipients",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "description": "Order By",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": false,
                        "description": "Start date",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "transactionId",
                        "required": false,
                        "description": "Transaction ID associated with the activities",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fileId",
                        "required": false,
                        "description": "File ID inside the folder",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "nested",
                        "required": false,
                        "description": "Include nested folders",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "noDayBack",
                        "required": false,
                        "description": "Number of days back to search",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder activities download request is successful",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/admin/folders": {
            "put": {
                "summary": "Bulk update folders",
                "description": "Bulk update folders",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/AdminFolderPutRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folders are updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Folders"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_DLP_LOCKED\n\nERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_IS_MY_DIR\n\nERR_ENTITY_IS_SYNC_DIR\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_VIRUS_FOUND\n\nERR_PROFILE_COLLABORATION_DISABLED\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_EXCEEDS_MAX_VALUE\n\nERR_INPUT_PAST_DATE\n\nERR_INVALID_PARAMETER\n\nERR_SYSTEM_EXTEND_FILE_EXPIRATION_DISABLED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/folders/{id}/members/me": {
            "delete": {
                "summary": "Remove ownself from the folder",
                "description": "Remove ownself from the folder",
                "tags": [
                    "folders"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "downgradeNested",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deletes member in the folder"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_INPUT_IS_OWNER\n\nERR_ENTITY_PARENT_FOLDER_MEMBER_EXISTS\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/devices/me/actions/logout": {
            "delete": {
                "summary": "Logout current user",
                "description": "Logout current user",
                "tags": [
                    "devices"
                ],
                "responses": {
                    "200": {
                        "description": "Logout successfully\n",
                        "schema": {
                            "$ref": "#/definitions/Logout"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": []
            }
        },
        "/rest/files/members": {
            "post": {
                "summary": "Add multiple members",
                "description": "Share files to multiple users",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "partialSuccess",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "updateIfExists",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "downgradeNested",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/FileMembersPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Files Members are added successfully",
                        "schema": {
                            "$ref": "#/definitions/FileAddMembers"
                        }
                    },
                    "207": {
                        "description": "Files Members are added partially",
                        "schema": {
                            "$ref": "#/definitions/FileAddMembers"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_IS_MY_DIR\n\nERR_ENTITY_IS_SYNC_DIR\n\nERR_ENTITY_IS_SECURE_FOLDER\n\nERR_ACCESS_USER\n\nERR_LICENSE_MAX_USERS_COUNT_REACHED\n\nERR_USER_HAS_NO_USER_TYPE\n\nERR_USER_TYPE_NO_ACCESS\n\nERR_INPUT_EMAIL_IS_DISTRIBUTION_LIST\n\nERR_ENTITY_USER_HAS_INSUFFICIENT_PERMISSIONS\n\nERR_PROFILE_COLLABORATION_DISABLED\n\nERR_ENTITY_IS_OWNER\n\nERR_ENTITY_DELETED\n"
                    },
                    "409": {
                        "description": "ERR_ENTITY_EXISTS\n\nERR_ENTITY_ROLE_IS_ASSIGNED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/files/shared": {
            "get": {
                "summary": "Return user's all shared files and permissions",
                "description": "Return user's all shared files and permissions",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "orderType",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return user's all shared files and permissions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/File"
                            }
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/files/{id}/members/me": {
            "delete": {
                "summary": "Leave as the file member",
                "description": "Leave as the file member",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return user's all shared files and permissions"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/files/previewSupport": {
            "get": {
                "summary": "Check mime type before send",
                "description": "Check mime type before send",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of supported ids",
                        "schema": {
                            "$ref": "#/definitions/FilePreviewSupport"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_FILTER\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/admin/files": {
            "put": {
                "summary": "Bulk update files",
                "description": "Bulk update files",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/AdminFilePutRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Files are updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Files"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_ENTITY_DLP_LOCKED\n\nERR_ENTITY_IS_ATTACHMENT\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_VIRUS_FOUND\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_EXCEEDS_MAX_VALUE\n\nERR_INPUT_PAST_DATE\n\nERR_INVALID_PARAMETER\n\nERR_SYSTEM_EXTEND_FILE_EXPIRATION_DISABLED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/admin/files/{id}/actions/rescan": {
            "post": {
                "summary": "Submit file for rescan",
                "description": "Submit file for rescan",
                "tags": [
                    "files"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message for rescan job submit",
                        "schema": {
                            "$ref": "#/definitions/AdminFileRescan"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_ADMIN\n"
                    },
                    "404": {
                        "description": "ERR_ENTITY_FILE_IS_NOT_FOUND\n\nERR_ENABLED_SCANNING_SERVICE_IS_NOT_FOUND\n"
                    },
                    "409": {
                        "description": "ERR_SCANNING_IN_PROGRESS\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/admin/activities": {
            "get": {
                "summary": "Get admin activities list",
                "description": "Get admin activities list",
                "tags": [
                    "admin"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "userId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "description": "Order By (created, username, client, ip_address)",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "endDateTime",
                        "required": true,
                        "description": "End date time",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "objectIds:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDateTime",
                        "required": true,
                        "description": "Start date time",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "compact",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "eventFilters:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "maxPages",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return admin activities list",
                        "schema": {
                            "$ref": "#/definitions/ActivityList"
                        }
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/admin/activities/{id}": {
            "get": {
                "summary": "Get admin activity detail",
                "description": "Get admin activity detail",
                "tags": [
                    "admin"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return admin activity",
                        "schema": {
                            "$ref": "#/definitions/ActivityList"
                        }
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/admin/activities/actions/exportCSV": {
            "get": {
                "summary": "Export admin activities list",
                "description": "Export admin activities list",
                "tags": [
                    "admin"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "userId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "description": "Order By (created, username, client, ip_address)",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "endDateTime",
                        "required": true,
                        "description": "End date time",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "objectIds:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDateTime",
                        "required": true,
                        "description": "Start date time",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "compact",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "eventFilters:in",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "maxPages",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Send admin activities list via email"
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/externalDL": {
            "get": {
                "summary": "Get external DL",
                "description": "Get external DL",
                "tags": [
                    "externalDL"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "search",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return external DL",
                        "schema": {
                            "$ref": "#/definitions/ExternalDLs"
                        }
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_DENIED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "delete": {
                "summary": "Delete external DL",
                "description": "Delete external DL",
                "tags": [
                    "externalDL"
                ],
                "responses": {
                    "200": {
                        "description": "Deleted external DL",
                        "schema": {
                            "$ref": "#/definitions/ExternalDLs"
                        }
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_DENIED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/ExternalDLUpdateRequest"
                        },
                        "required": true
                    }
                ]
            },
            "post": {
                "summary": "Add external DL",
                "description": "Add external DL",
                "tags": [
                    "externalDL"
                ],
                "responses": {
                    "201": {
                        "description": "Added external DL",
                        "schema": {
                            "$ref": "#/definitions/ExternalDLs"
                        }
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_DENIED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/ExternalDLUpdateRequest"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/sources/{id}/query": {
            "get": {
                "summary": "SharePoint Sites Search api",
                "description": "search SharePoint sites",
                "tags": [
                    "search"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "include_container",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "include_kw",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "search_type",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search successfully",
                        "schema": {
                            "$ref": "#/definitions/SearchSharePointSitesResult"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_AUTH_EC_UPDATE_TOKEN\n\nERR_SPO_SEARCH"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/admin/sharedMailboxes": {
            "get": {
                "summary": "Get shared mailbox list by user id list",
                "description": "Get shared mailbox list by user id list",
                "tags": [
                    "sharedMailbox"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "active",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "required": false,
                        "description": "Shared mailbox user id list recommended request size <= 100",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return shared mailboxes",
                        "schema": {
                            "$ref": "#/definitions/SharedMailboxList"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "delete": {
                "summary": "Delete shared mailboxes",
                "description": "Delete shared mailboxes",
                "tags": [
                    "sharedMailbox"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "required": false,
                        "description": "Shared mailbox user id list recommended request size <= 100",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The sharedMailboxes are deleted."
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n\nERR_ENTITY_NOT_FOUND\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_ADMIN\n\nERR_ACCESS_USER\n\nERR_ADMIN_ROLE_RANK_RESTRICTED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "post": {
                "summary": "Add shared mailbox record",
                "description": "Add shared mailbox",
                "tags": [
                    "sharedMailbox"
                ],
                "responses": {
                    "201": {
                        "description": "Shared Mailbox is added successfully",
                        "schema": {
                            "$ref": "#/definitions/SharedMailbox"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_ADMIN\n\nERR_ACCESS_USER\n\nERR_ADMIN_ROLE_RANK_RESTRICTED\n\nERR_NOT_INTERNAL_DOMAIN\n"
                    },
                    "413": {
                        "description": "ERR_SYSTEM_NO_STORAGE_AVAILABLE\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER\n\nERR_CANNOT_RETAIN_DATA_TO_THE_SAME_USER\n\nERR_USER_IS_NOT_INTERNAL_DL_OR_INTERNAL_ACCOUNT"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/SharedMailboxPostRequest"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/admin/sharedMailboxes/{id}": {
            "patch": {
                "summary": "Update shared mailbox members",
                "description": "Update shared mailbox members",
                "tags": [
                    "sharedMailbox"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "User ID",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/SharedMailboxPatchRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Shared Mailbox is updated successfully",
                        "schema": {
                            "$ref": "#/definitions/SharedMailbox"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_ADMIN\n\nERR_ACCESS_USER\n\nERR_ADMIN_ROLE_RANK_RESTRICTED\n\nERR_NOT_INTERNAL_DOMAIN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/sharedMailboxes": {
            "get": {
                "summary": "Get current user's shared mailboxes",
                "description": "Get current user's shared mailboxes",
                "tags": [
                    "sharedMailbox"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "active",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "id:in",
                        "required": false,
                        "description": "Shared mailbox user id list recommended request size <= 100",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return shared mailboxes of current user",
                        "schema": {
                            "$ref": "#/definitions/SharedMailboxList"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_NOT_INTERNAL_DOMAIN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "patch": {
                "summary": "Update current user's shared mailbox active status",
                "description": "Update current user's shared mailbox active status",
                "tags": [
                    "sharedMailbox"
                ],
                "responses": {
                    "201": {
                        "description": "Shared Mailbox status is updated successfully",
                        "schema": {
                            "$ref": "#/definitions/SharedMailboxList"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_NOT_INTERNAL_DOMAIN\n"
                    },
                    "422": {
                        "description": "ERR_MAX_ACTIVED_SHAREDMAILBOX"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/SharedMailboxStatusPatchRequest"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/sharedMailboxes/mail/actions/counters": {
            "get": {
                "summary": "Get current user's shared mailboxes counters",
                "description": "Get current user's shared mailboxes counters",
                "tags": [
                    "sharedMailbox"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "id:in",
                        "required": false,
                        "description": "Shared mailbox user id list recommended request size <= 100",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return shared mailboxes counters of current user",
                        "schema": {
                            "$ref": "#/definitions/MailCountersList"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/sharedMailboxes/{id}/settings": {
            "get": {
                "summary": "Get current user's shared mailboxes setting",
                "description": "Get current user's shared mailboxes setting",
                "tags": [
                    "sharedMailbox"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "User ID",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return shared mailboxes setting of current user",
                        "schema": {
                            "$ref": "#/definitions/SharedMailboxSetting"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/sharedMailboxes/{id}/webForms": {
            "get": {
                "summary": "List web forms available to shared mailboxes",
                "description": "Returns a list of web forms available to shared mailboxes",
                "tags": [
                    "sharedMailbox"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "User ID",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "with",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "returnEntity",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return shared mailboxes setting of current user",
                        "schema": {
                            "$ref": "#/definitions/WebFormList"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/admin/cards": {
            "get": {
                "summary": "Get list of cards",
                "description": "Get list of cards",
                "tags": [
                    "cards"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "type:in",
                        "required": true,
                        "description": "Type of cards to retrieve. Available card type(s): content_encryption,email_json_migration,event_log_partitioning_migration,system_security_scanning,events_table_monitor,appadmin_db,sysadmin_db,sysadmin_hosts",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return list of cards",
                        "schema": {
                            "$ref": "#/definitions/Card"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/admin/cards/details": {
            "get": {
                "summary": "Get list of cards",
                "description": "Get list of cards",
                "tags": [
                    "cards"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "type:in",
                        "required": true,
                        "description": "Type of cards to retrieve. Available card type(s): content_encryption,email_json_migration,event_log_partitioning_migration,system_security_scanning,events_table_monitor,appadmin_db,sysadmin_db,sysadmin_hosts",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return list of cards",
                        "schema": {
                            "$ref": "#/definitions/Card"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/admin/cards/actions": {
            "post": {
                "summary": "Post an action to take on a specific card",
                "description": "Post an action to take on a specific card",
                "tags": [
                    "cards"
                ],
                "responses": {
                    "202": {
                        "description": "Action has been accepted"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n"
                    },
                    "404": {
                        "description": "ERR_ENTITY_NOT_FOUND\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/CardActionPostRequest"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/userSshPublicKeys/create": {
            "post": {
                "summary": "Create new SSH public key record for current login user",
                "description": "Create new SSH public key record for current login user",
                "tags": [
                    "userSshPublicKeys"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "description": "The name of SSH Public key",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "publicKey",
                        "required": true,
                        "description": "SSH Public key",
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "New created ssh public key record"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_PROFILE_SFTP_DISABLED\n\nERR_SYSTEM_ROLE_SFTP_DISABLED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER\n\nERR_SSH_PUBLIC_KEY_EXISTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/userSshPublicKeys/generate": {
            "post": {
                "summary": "Generate a new ssh public/private key pair",
                "description": "Generate a new ssh public/private key pair",
                "tags": [
                    "userSshPublicKeys"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "description": "The name of SSH Public key",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "passphrase",
                        "required": false,
                        "description": "The passphrase of SSH Public key",
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Return new generated public/private key pair",
                        "schema": {
                            "$ref": "#/definitions/UserGeneratedSshPublicKeyKey"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_PROFILE_SFTP_DISABLED\n\nERR_SYSTEM_ROLE_SFTP_DISABLED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER\n\nERR_SSH_PUBLIC_KEY_EXISTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/userSshPublicKeys/{id}": {
            "delete": {
                "summary": "Delete current user's ssh public keys",
                "description": "Delete current user's ssh public keys",
                "tags": [
                    "userSshPublicKeys"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ssh key is marked as deleted successfully"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DELETED\n\nERR_PROFILE_SFTP_DISABLED\n\nERR_SYSTEM_ROLE_SFTP_DISABLED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/userSshPublicKeys": {
            "get": {
                "summary": "Get user's ssh public keys",
                "description": "Get list of ssh public keys",
                "tags": [
                    "userSshPublicKeys"
                ],
                "responses": {
                    "200": {
                        "description": "Return list of ssh public keys",
                        "schema": {
                            "$ref": "#/definitions/UserSshPublicKeyList"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_PROFILE_SFTP_DISABLED\n\nERR_SYSTEM_ROLE_SFTP_DISABLED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": []
            }
        },
        "/rest/admin/users/{id}/userSshPublicKeys": {
            "get": {
                "summary": "Admin get user's ssh public keys",
                "description": "Admin get user's ssh public keys",
                "tags": [
                    "userSshPublicKeys"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return list of ssh public keys",
                        "schema": {
                            "$ref": "#/definitions/AdminUserSshPublicKeyList"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_PROFILE_SFTP_DISABLED\n\nERR_SYSTEM_ROLE_SFTP_DISABLED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/admin/users/{id}/userSshPublicKeys/create": {
            "post": {
                "summary": "Admin create new SSH public key record for user",
                "description": "Admin create new SSH public key record for user",
                "tags": [
                    "userSshPublicKeys"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/UserSshPublicKeysPostCreateRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "New created ssh public key record"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_PROFILE_SFTP_DISABLED\n\nERR_SYSTEM_ROLE_SFTP_DISABLED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER\n\nERR_SSH_PUBLIC_KEY_EXISTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/admin/users/{id}/userSshPublicKeys/generate": {
            "post": {
                "summary": "Admin generate a new ssh public/private key pair for user",
                "description": "Admin generate a new ssh public/private key pair for user",
                "tags": [
                    "userSshPublicKeys"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/UserSshPublicKeysPostGenerateRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Return new generated public/private key pair",
                        "schema": {
                            "$ref": "#/definitions/UserGeneratedSshPublicKeyKey"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_PROFILE_SFTP_DISABLED\n\nERR_SYSTEM_ROLE_SFTP_DISABLED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER\n\nERR_SSH_PUBLIC_KEY_EXISTS"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/contacts": {
            "get": {
                "summary": "Get contacts list",
                "description": "Get contacts list",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "description": "Sorting options. Accepts id, name. Sample format is id:asc",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "description": "offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "description": "limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return contacts list",
                        "schema": {
                            "$ref": "#/definitions/ContactList"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_FILTER\n"
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "post": {
                "summary": "Create a contact entry",
                "description": "Creates a kiteworks contact entry that includes a contact name and email address.",
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "201": {
                        "description": "Return newly created contact",
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "409": {
                        "description": "ERR_ENTITY_EXISTS\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/ContactCreate"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/contacts/{id}": {
            "get": {
                "summary": "Get a contact",
                "description": "Returns the details of a specified kiteworks contact. e.g. I want the email address and name of this contact.",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return contact",
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "delete": {
                "summary": "Deletes a contact entry",
                "description": "Delete a contact entry from the kiteworks contact list for this user.",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The contact is deleted"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "put": {
                "summary": "Update a contact entry",
                "description": "Update a kiteworks contact. The email address and name can be changed.",
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contact is updated"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n"
                    },
                    "409": {
                        "description": "ERR_ENTITY_EXISTS\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/groups": {
            "get": {
                "summary": "List kiteworks groups",
                "description": "Returns the list of kiteworks groups for this user, including the email address of each member in the group.",
                "tags": [
                    "groups"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "description": "Sorting options. Accepts id, name. Sample format is id:asc",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "description": "offset",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "description": "limit",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "name:contains",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return groups list",
                        "schema": {
                            "$ref": "#/definitions/ContactList"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_FILTER\n"
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "post": {
                "summary": "Create a group entry",
                "description": "Create a group of users",
                "tags": [
                    "groups"
                ],
                "responses": {
                    "201": {
                        "description": "Return newly created group",
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    },
                    "401": {
                        "description": "ERR_ACCESS_USER\n\nERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "409": {
                        "description": "ERR_ENTITY_EXISTS\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/GroupCreate"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/groups/{id}": {
            "get": {
                "summary": "Return users for the specified group",
                "description": "Returns the list of users for the specified group.",
                "tags": [
                    "groups"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return group",
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "delete": {
                "summary": "Deletes a group entry",
                "description": "Delete a group",
                "tags": [
                    "groups"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The group is deleted"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "put": {
                "summary": "Update a group entry",
                "description": "Update a group",
                "tags": [
                    "groups"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The group is updated"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n"
                    },
                    "409": {
                        "description": "ERR_ENTITY_EXISTS\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/clients/action/eventLog": {
            "post": {
                "summary": "Post event logs from client",
                "description": "Post event logs from client",
                "tags": [
                    "clientEventLogs"
                ],
                "responses": {
                    "201": {
                        "description": "event_logs has been added",
                        "schema": {
                            "$ref": "#/definitions/ClientCustomEventLog"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/BulkClientEventLogsPostRequest"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/rest/query": {
            "get": {
                "summary": "Search api",
                "description": "search files/folders/emails",
                "tags": [
                    "search"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "nameOnly",
                        "required": false,
                        "description": "indicate when searching file/only with name only option",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "includeContent",
                        "required": true,
                        "description": "indicate it is full_text_search or database search",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "subject",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "spellCheck",
                        "required": false,
                        "description": "To get suggestions of searching keyword",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "modified:lte",
                        "required": false,
                        "description": "email/file/folder modified date <= specified value",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sharedMailboxId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "recipientId",
                        "required": false,
                        "description": "recipient id or email",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "modified:lt",
                        "required": false,
                        "description": "email/file/folder modified date < specified value",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fileSize:gt",
                        "required": false,
                        "description": "file size > specified value",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "objectId",
                        "required": false,
                        "description": "search within folder id",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created:lt",
                        "required": false,
                        "description": "email/file/folder creation date < specified parameter",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderBy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "user",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "flsOnly",
                        "required": false,
                        "description": "only include files/folders shared to me",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "folderName",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fileSize",
                        "required": false,
                        "description": "file size = specified parameter",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "fileSize:gte",
                        "required": false,
                        "description": "file size >= specified value",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created:gte",
                        "required": false,
                        "description": "email/file/folder creation date >= specified parameter",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "modified:gte",
                        "required": false,
                        "description": "email/file/folder modified date >= specified value",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created",
                        "required": false,
                        "description": "email/file/folder creation date = specified parameter",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created:lte",
                        "required": false,
                        "description": "email/file/folder <= specified parameter",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "modified:gt",
                        "required": false,
                        "description": "email/file/folder modified date > specified value",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderType",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "modified",
                        "required": false,
                        "description": "email/file/folder modified date = specified value",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fileType",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "searchType",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fileName",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "created:gt",
                        "required": false,
                        "description": "email/file/folder creation date > specified parameter",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fileSize:lte",
                        "required": false,
                        "description": "file size <= specified value",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fileSize:lt",
                        "required": false,
                        "description": "file size < specified value",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "senderId",
                        "required": false,
                        "description": "sender id or email",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search successfully",
                        "schema": {
                            "$ref": "#/definitions/SearchResult"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_PROFILE_COLLABORATION_DISABLED\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/accessVerifications/{id}/approval/{requirement_id}": {
            "get": {
                "summary": "Get access verification",
                "description": "Get access verification",
                "tags": [
                    "accessVerifications"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "requirement_id",
                        "required": true,
                        "description": "Requirement ID",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "Access Verification ID",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return access verification",
                        "schema": {
                            "$ref": "#/definitions/AccessVerification"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "patch": {
                "summary": "Submit approval decision for approval flow",
                "description": "Submit approval decision for approval flow",
                "tags": [
                    "accessVerifications"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "requirement_id",
                        "required": true,
                        "description": "Requirement ID",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "Access Verification ID",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/AccessVerificationApprovalPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns nothing"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_ACCESS_VERIFICATION_RESPONSE\n\nERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/accessVerifications/{id}": {
            "get": {
                "summary": "Get access verification",
                "description": "Get access verification",
                "tags": [
                    "accessVerifications"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return access verification",
                        "schema": {
                            "$ref": "#/definitions/AccessVerification"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "post": {
                "summary": "Submit access verification",
                "description": "Submit access verification",
                "tags": [
                    "accessVerifications"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/AccessVerificationPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return download link",
                        "schema": {
                            "$ref": "#/definitions/DownloadLink"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_ACCESS_VERIFICATION_RESPONSE\n\nERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/accessVerifications/requirement/{id}": {
            "post": {
                "summary": "Submit access verification requirement",
                "description": "Submit access verification requirement",
                "tags": [
                    "accessVerifications"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/AccessVerificationRequirementPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns access verifications that are verified",
                        "schema": {
                            "$ref": "#/definitions/VerifiedAccessVerificationResponse"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n"
                    },
                    "422": {
                        "description": "ERR_INVALID_ACCESS_VERIFICATION_RESPONSE\n\nERR_INVALID_PARAMETER"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/scim/users": {
            "get": {
                "summary": "Retrieve users",
                "description": "Retrieve users",
                "tags": [
                    "scim"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "sortBy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "count",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "excludedAttributes",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "meta",
                                "userName",
                                "displayName",
                                "userType",
                                "preferredLanguage",
                                "active",
                                "emails",
                                "phoneNumbers",
                                "photos",
                                "roles",
                                "meta.resourceType",
                                "meta.created",
                                "meta.location",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                                "urn:ietf:params:scim:schemas:core:2.0:User:active",
                                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                                "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "sortOrder",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "attributes",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "id",
                                "meta",
                                "userName",
                                "displayName",
                                "userType",
                                "preferredLanguage",
                                "active",
                                "emails",
                                "phoneNumbers",
                                "photos",
                                "roles",
                                "meta.resourceType",
                                "meta.created",
                                "meta.location",
                                "urn:ietf:params:scim:schemas:core:2.0:User:id",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                                "urn:ietf:params:scim:schemas:core:2.0:User:active",
                                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                                "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "startIndex",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The users are returned",
                        "schema": {
                            "$ref": "#/definitions/ScimUsers"
                        }
                    },
                    "400": {
                        "description": "BAD REQUEST"
                    },
                    "401": {
                        "description": "UNAUTHORIZED"
                    },
                    "403": {
                        "description": "FORBIDDEN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "post": {
                "summary": "Create single user",
                "description": "Create single user",
                "tags": [
                    "scim"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "excludedAttributes",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "meta",
                                "userName",
                                "displayName",
                                "userType",
                                "preferredLanguage",
                                "active",
                                "emails",
                                "phoneNumbers",
                                "photos",
                                "roles",
                                "meta.resourceType",
                                "meta.created",
                                "meta.location",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                                "urn:ietf:params:scim:schemas:core:2.0:User:active",
                                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                                "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "attributes",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "id",
                                "meta",
                                "userName",
                                "displayName",
                                "userType",
                                "preferredLanguage",
                                "active",
                                "emails",
                                "phoneNumbers",
                                "photos",
                                "roles",
                                "meta.resourceType",
                                "meta.created",
                                "meta.location",
                                "urn:ietf:params:scim:schemas:core:2.0:User:id",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                                "urn:ietf:params:scim:schemas:core:2.0:User:active",
                                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                                "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                            ]
                        }
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/ScimUsersPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The user is created",
                        "schema": {
                            "$ref": "#/definitions/ScimUser"
                        }
                    },
                    "400": {
                        "description": "BAD REQUEST"
                    },
                    "401": {
                        "description": "UNAUTHORIZED"
                    },
                    "403": {
                        "description": "FORBIDDEN"
                    },
                    "409": {
                        "description": "CONFLICT"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/scim/Users": {
            "get": {
                "summary": "Retrieve users",
                "description": "Retrieve users",
                "tags": [
                    "scim"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "sortBy",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "count",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "excludedAttributes",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "meta",
                                "userName",
                                "displayName",
                                "userType",
                                "preferredLanguage",
                                "active",
                                "emails",
                                "phoneNumbers",
                                "photos",
                                "roles",
                                "meta.resourceType",
                                "meta.created",
                                "meta.location",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                                "urn:ietf:params:scim:schemas:core:2.0:User:active",
                                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                                "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "sortOrder",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "attributes",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "id",
                                "meta",
                                "userName",
                                "displayName",
                                "userType",
                                "preferredLanguage",
                                "active",
                                "emails",
                                "phoneNumbers",
                                "photos",
                                "roles",
                                "meta.resourceType",
                                "meta.created",
                                "meta.location",
                                "urn:ietf:params:scim:schemas:core:2.0:User:id",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                                "urn:ietf:params:scim:schemas:core:2.0:User:active",
                                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                                "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "startIndex",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The users are returned",
                        "schema": {
                            "$ref": "#/definitions/ScimUsers"
                        }
                    },
                    "400": {
                        "description": "BAD REQUEST"
                    },
                    "401": {
                        "description": "UNAUTHORIZED"
                    },
                    "403": {
                        "description": "FORBIDDEN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "post": {
                "summary": "Create single user",
                "description": "Create single user",
                "tags": [
                    "scim"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "excludedAttributes",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "meta",
                                "userName",
                                "displayName",
                                "userType",
                                "preferredLanguage",
                                "active",
                                "emails",
                                "phoneNumbers",
                                "photos",
                                "roles",
                                "meta.resourceType",
                                "meta.created",
                                "meta.location",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                                "urn:ietf:params:scim:schemas:core:2.0:User:active",
                                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                                "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "attributes",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "id",
                                "meta",
                                "userName",
                                "displayName",
                                "userType",
                                "preferredLanguage",
                                "active",
                                "emails",
                                "phoneNumbers",
                                "photos",
                                "roles",
                                "meta.resourceType",
                                "meta.created",
                                "meta.location",
                                "urn:ietf:params:scim:schemas:core:2.0:User:id",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                                "urn:ietf:params:scim:schemas:core:2.0:User:active",
                                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                                "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                            ]
                        }
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/ScimUsersPostRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The user is created",
                        "schema": {
                            "$ref": "#/definitions/ScimUser"
                        }
                    },
                    "400": {
                        "description": "BAD REQUEST"
                    },
                    "401": {
                        "description": "UNAUTHORIZED"
                    },
                    "403": {
                        "description": "FORBIDDEN"
                    },
                    "409": {
                        "description": "CONFLICT"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/scim/users/{id}": {
            "get": {
                "summary": "Get a user specified by the id",
                "description": "Get a user specified by the id",
                "tags": [
                    "scim"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "excludedAttributes",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "meta",
                                "userName",
                                "displayName",
                                "userType",
                                "preferredLanguage",
                                "active",
                                "emails",
                                "phoneNumbers",
                                "photos",
                                "roles",
                                "meta.resourceType",
                                "meta.created",
                                "meta.location",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                                "urn:ietf:params:scim:schemas:core:2.0:User:active",
                                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                                "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "attributes",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "id",
                                "meta",
                                "userName",
                                "displayName",
                                "userType",
                                "preferredLanguage",
                                "active",
                                "emails",
                                "phoneNumbers",
                                "photos",
                                "roles",
                                "meta.resourceType",
                                "meta.created",
                                "meta.location",
                                "urn:ietf:params:scim:schemas:core:2.0:User:id",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                                "urn:ietf:params:scim:schemas:core:2.0:User:active",
                                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                                "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user is returned",
                        "schema": {
                            "$ref": "#/definitions/ScimUser"
                        }
                    },
                    "400": {
                        "description": "BAD REQUEST"
                    },
                    "401": {
                        "description": "UNAUTHORIZED"
                    },
                    "403": {
                        "description": "FORBIDDEN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "delete": {
                "summary": "Delete single user",
                "description": "Delete single user",
                "tags": [
                    "scim"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "deleteUnsharedData",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "remoteWipe",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "retainToUser",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "retainPermissionToSharedData",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "retainData",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The user is deleted"
                    },
                    "400": {
                        "description": "BAD REQUEST"
                    },
                    "401": {
                        "description": "UNAUTHORIZED"
                    },
                    "403": {
                        "description": "FORBIDDEN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "put": {
                "description": "Update a user specified by the id",
                "tags": [
                    "scim"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/ScimUsersPutRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user is returned",
                        "schema": {
                            "$ref": "#/definitions/ScimUser"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "404": {
                        "description": "ERR_ENTITY_NOT_FOUND"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/scim/Users/{id}": {
            "get": {
                "summary": "Get a user specified by the id",
                "description": "Get a user specified by the id",
                "tags": [
                    "scim"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "excludedAttributes",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "meta",
                                "userName",
                                "displayName",
                                "userType",
                                "preferredLanguage",
                                "active",
                                "emails",
                                "phoneNumbers",
                                "photos",
                                "roles",
                                "meta.resourceType",
                                "meta.created",
                                "meta.location",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                                "urn:ietf:params:scim:schemas:core:2.0:User:active",
                                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                                "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "attributes",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "id",
                                "meta",
                                "userName",
                                "displayName",
                                "userType",
                                "preferredLanguage",
                                "active",
                                "emails",
                                "phoneNumbers",
                                "photos",
                                "roles",
                                "meta.resourceType",
                                "meta.created",
                                "meta.location",
                                "urn:ietf:params:scim:schemas:core:2.0:User:id",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:displayName",
                                "urn:ietf:params:scim:schemas:core:2.0:User:userType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:preferredLanguage",
                                "urn:ietf:params:scim:schemas:core:2.0:User:active",
                                "urn:ietf:params:scim:schemas:core:2.0:User:emails",
                                "urn:ietf:params:scim:schemas:core:2.0:User:phoneNumbers",
                                "urn:ietf:params:scim:schemas:core:2.0:User:photos",
                                "urn:ietf:params:scim:schemas:core:2.0:User:roles",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.resourceType",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.created",
                                "urn:ietf:params:scim:schemas:core:2.0:User:meta.location"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user is returned",
                        "schema": {
                            "$ref": "#/definitions/ScimUser"
                        }
                    },
                    "400": {
                        "description": "BAD REQUEST"
                    },
                    "401": {
                        "description": "UNAUTHORIZED"
                    },
                    "403": {
                        "description": "FORBIDDEN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "delete": {
                "summary": "Delete single user",
                "description": "Delete single user",
                "tags": [
                    "scim"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "deleteUnsharedData",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "remoteWipe",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "retainToUser",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "retainPermissionToSharedData",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "retainData",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The user is deleted"
                    },
                    "400": {
                        "description": "BAD REQUEST"
                    },
                    "401": {
                        "description": "UNAUTHORIZED"
                    },
                    "403": {
                        "description": "FORBIDDEN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            },
            "put": {
                "description": "Update a user specified by the id",
                "tags": [
                    "scim"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the entity",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/ScimUsersPutRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user is returned",
                        "schema": {
                            "$ref": "#/definitions/ScimUser"
                        }
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "404": {
                        "description": "ERR_ENTITY_NOT_FOUND"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/scim/ServiceProviderConfig": {
            "get": {
                "summary": "Get SCIM service provider config",
                "description": "Get SCIM service provider config",
                "tags": [
                    "scim"
                ],
                "responses": {
                    "200": {
                        "description": "The service provider config is returned"
                    },
                    "401": {
                        "description": "UNAUTHORIZED"
                    },
                    "403": {
                        "description": "FORBIDDEN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": []
            }
        },
        "/rest/scim/Schemas": {
            "get": {
                "description": "Get SCIM schemas",
                "tags": [
                    "scim"
                ],
                "responses": {
                    "200": {
                        "description": "The supported SCIM schemas are returned"
                    },
                    "401": {
                        "description": "UNAUTHORIZED"
                    },
                    "403": {
                        "description": "FORBIDDEN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": []
            }
        },
        "/rest/scim/Schemas/{id}": {
            "get": {
                "description": "Get a SCIM schema",
                "tags": [
                    "scim"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID/URN of the schema",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested SCIM schemas is returned if exists"
                    },
                    "401": {
                        "description": "UNAUTHORIZED"
                    },
                    "403": {
                        "description": "FORBIDDEN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/rest/scim/ResourceTypes": {
            "get": {
                "description": "Get SCIM resource types",
                "tags": [
                    "scim"
                ],
                "responses": {
                    "200": {
                        "description": "The supported SCIM resource types are returned"
                    },
                    "401": {
                        "description": "UNAUTHORIZED"
                    },
                    "403": {
                        "description": "FORBIDDEN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "parameters": []
            }
        },
        "/rest/scim/ResourceTypes/{id}": {
            "get": {
                "description": "Get a SCIM resource type",
                "tags": [
                    "scim"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID/URN of the schema",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested SCIM resource type is returned if exists"
                    },
                    "401": {
                        "description": "UNAUTHORIZED"
                    },
                    "403": {
                        "description": "FORBIDDEN"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                }
            }
        },
        "/{host_name}/rest/uploads/{id}": {
            "post": {
                "summary": "uploads chunk endpoint",
                "description": "uploads chunk to the upload entity",
                "tags": [
                    "uploads"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "The ID of the upload",
                        "type": "integer"
                    },
                    {
                        "in": "path",
                        "name": "host_name",
                        "required": true,
                        "description": "Upload host name, can be obtained from GET /uploads/{id} or initiateUpload response",
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "compressionMode",
                        "type": "string",
                        "description": "The compression mode. Available option \"NORMAL\", \"GZIP\" and \"ZLIB\"",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "compressionSize",
                        "type": "integer",
                        "description": "The upload content size after compression",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "originalSize",
                        "type": "integer",
                        "description": "The original upload content size before compression",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "content",
                        "type": "file",
                        "description": "The upload content.",
                        "required": true
                    },
                    {
                        "in": "formData",
                        "name": "index",
                        "type": "integer",
                        "description": "The chunk index. Starts from 1",
                        "required": false
                    },
                    {
                        "in": "formData",
                        "name": "lastChunk",
                        "type": "integer",
                        "description": "Indicate if this upload is the last chunk of the file.",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The current chunk upload is successfully but not yet registered to the server",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "201": {
                        "description": "File uploaded successfully and is registered to the server",
                        "schema": {
                            "$ref": "#/definitions/File"
                        }
                    },
                    "400": {
                        "description": "ERR_REQUEST_INVALID_JSON\n"
                    },
                    "401": {
                        "description": "ERR_AUTH_INVALID_CSRF\n\nERR_AUTH_UNAUTHORIZED\n"
                    },
                    "403": {
                        "description": "ERR_ACCESS_USER\n\nERR_ENTITY_DLP_LOCKED\n\nERR_ENTITY_IS_BASE_DIR\n\nERR_ENTITY_NOT_SCANNED\n\nERR_ENTITY_REQUEST_FILE_UPLOAD_LIMIT_REACHED\n\nERR_ENTITY_RESTRICTED_TYPE\n\nERR_ENTITY_VIRUS_FOUND\n"
                    },
                    "422": {
                        "description": "ERR_INPUT_NOT_IN_LIST\n\nERR_INVALID_PARAMETER\n\nERR_LICENSE_MAX_UPLOAD_SIZE"
                    },
                    "490": {
                        "description": "Request blocked by WAF"
                    }
                },
                "consumes": [
                    "multipart/form-data"
                ]
            }
        }
    },
    "definitions": {
        "FileNameRequest.Post": {
            "properties": {
                "fileType": {
                    "description": "The file type",
                    "type": "string"
                },
                "fileName": {
                    "description": "The file name",
                    "type": "string"
                }
            }
        },
        "FileNameRequest.Put": {
            "properties": {
                "fileType": {
                    "description": "The file type",
                    "type": "string"
                },
                "fileName": {
                    "description": "The file name",
                    "type": "string"
                }
            }
        },
        "EventLink": {
            "description": "Class EventLink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "EventLink.Post": {
            "description": "Class EventLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "EventLink.Put": {
            "description": "Class EventLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "RequestFileUpload": {
            "description": "Class RequestFileUpload",
            "properties": {
                "fileId": {
                    "description": "The file id for this upload file",
                    "type": "string"
                },
                "requestFileId": {
                    "description": "The request file id for this upload file",
                    "type": "integer"
                }
            }
        },
        "TaskLink": {
            "description": "Class TaskLink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "TaskLink.Post": {
            "description": "Class TaskLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "TaskLink.Put": {
            "description": "Class TaskLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "FileType": {
            "description": "Class FileType",
            "required": [
                "extension",
                "groupName",
                "id",
                "mediaTypes"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of File Type",
                    "type": "integer"
                },
                "mediaTypes": {
                    "description": "List of associated media types",
                    "type": "integer"
                },
                "extension": {
                    "description": "Extension",
                    "type": "string"
                },
                "groupName": {
                    "description": "Group Name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "CloudSourceLogin.Post": {
            "description": "Class CloudSourceLogin",
            "required": [
                "code",
                "state"
            ],
            "properties": {
                "client": {
                    "description": "ID of the client, from redirect url",
                    "type": "string"
                },
                "code": {
                    "description": "Code from redirect url",
                    "type": "string"
                },
                "state": {
                    "description": "State code",
                    "type": "string"
                },
                "sessionState": {
                    "description": "Optional field needed for sharepoint online and onedrive",
                    "type": "string"
                }
            }
        },
        "CloudSourceLogin.Put": {
            "description": "Class CloudSourceLogin",
            "required": [
                "code",
                "state"
            ],
            "properties": {
                "client": {
                    "description": "ID of the client, from redirect url",
                    "type": "string"
                },
                "code": {
                    "description": "Code from redirect url",
                    "type": "string"
                },
                "state": {
                    "description": "State code",
                    "type": "string"
                },
                "sessionState": {
                    "description": "Optional field needed for sharepoint online and onedrive",
                    "type": "string"
                }
            }
        },
        "MobileSync": {
            "type": "object",
            "properties": {
                "secure": {
                    "type": "boolean",
                    "description": "Indicates that File is in secure Folder"
                },
                "syncedObject": {
                    "$ref": "#/definitions/SyncedObject"
                },
                "avStatus": {
                    "type": "string"
                },
                "dlpStatus": {
                    "type": "string"
                },
                "file": {
                    "$ref": "#/definitions/File"
                },
                "pushUser": {
                    "$ref": "#/definitions/UserBasic"
                },
                "id": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Unique identifier of MobileSync"
                },
                "pushedObject": {
                    "$ref": "#/definitions/PushedObject"
                },
                "fileId": {
                    "type": "string"
                },
                "fingerprints": {
                    "type": "array",
                    "description": "List of all file fingerprints",
                    "items": {
                        "$ref": "#/definitions/Fingerprint"
                    }
                },
                "created": {
                    "type": "string",
                    "description": "Mobile sync item creation date"
                },
                "userId": {
                    "type": "string"
                },
                "toBeNotified": {
                    "type": "boolean",
                    "description": "Indicates that Email notification for this item was sent"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "MD5 file fingerprint"
                },
                "pushUserId": {
                    "type": "string"
                }
            }
        },
        "MobileSync.Post": {
            "description": "Class MobileSync",
            "required": [
                "fileId"
            ],
            "properties": {
                "fileId": {
                    "description": "Unique identifier of File",
                    "type": "integer"
                }
            }
        },
        "MobileSync.Put": {
            "description": "Class MobileSync",
            "required": [
                "fileId"
            ],
            "properties": {
                "fileId": {
                    "description": "Unique identifier of File",
                    "type": "integer"
                }
            }
        },
        "CopyEcItemJob": {
            "properties": {
                "id": {
                    "description": "Job identifier",
                    "type": "string"
                },
                "status": {
                    "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
                    "type": "string"
                },
                "errors": {
                    "description": "The list of errors occurred during job processing",
                    "type": "string"
                },
                "objectIds": {
                    "type": "string"
                }
            }
        },
        "BaseFolder": {
            "required": [
                "id",
                "name",
                "parentId",
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of object",
                    "type": "string"
                },
                "created": {
                    "description": "Object creation date",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted": {
                    "description": "Indicates that object is deleted",
                    "type": "boolean"
                },
                "permDeleted": {
                    "description": "Indicates that object is permanently deleted",
                    "type": "boolean"
                },
                "expire": {
                    "description": "Object expiry date",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "Object modification date",
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Object name",
                    "type": "string"
                },
                "parentId": {
                    "description": "Parent Folder identifier",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of Object creator",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Folder"
                },
                "permalink": {
                    "description": "Object permalink",
                    "type": "string"
                },
                "creator": {
                    "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "vendorDocId": {
                    "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "vendorDocName": {
                    "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "source": {
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "BaseFolder.Post": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Folder name",
                    "type": "string"
                }
            }
        },
        "BaseFolder.Put": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Folder name",
                    "type": "string"
                }
            }
        },
        "Notification": {
            "description": "Class Notification",
            "required": [
                "userId"
            ],
            "properties": {
                "userId": {
                    "description": "ID of user who will send email notifications to end users",
                    "type": "string"
                },
                "objectId": {
                    "description": "Id of folder included in Notification",
                    "type": "integer"
                },
                "fileAdded": {
                    "description": "Number of files which are added to the Notification",
                    "type": "integer"
                },
                "commentAdded": {
                    "description": "Number of comments which are added to the Notification",
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Notification.Post": {
            "description": "Class Notification",
            "properties": {
                "fileAdded": {
                    "description": "Number of files which are added to the Notification",
                    "type": "integer"
                },
                "commentAdded": {
                    "description": "Number of comments which are added to the Notification",
                    "type": "integer"
                }
            }
        },
        "Notification.Put": {
            "description": "Class Notification",
            "properties": {
                "fileAdded": {
                    "description": "Number of files which are added to the Notification",
                    "type": "integer"
                },
                "commentAdded": {
                    "description": "Number of comments which are added to the Notification",
                    "type": "integer"
                }
            }
        },
        "Email": {
            "description": "Class Email",
            "required": [
                "date",
                "emailPackageId",
                "id",
                "modifiedDate",
                "parentEmailId",
                "recipients",
                "senderId",
                "status",
                "subject",
                "type"
            ],
            "properties": {
                "id": {
                    "description": "Email unique identifier",
                    "type": "string"
                },
                "senderId": {
                    "description": "Unique identifier of User who sent Email",
                    "type": "string"
                },
                "templateId": {
                    "description": "Email template unique identifier",
                    "type": "integer"
                },
                "status": {
                    "description": "Email status",
                    "type": "string"
                },
                "type": {
                    "description": "Email type",
                    "type": "string"
                },
                "date": {
                    "type": "string",
                    "format": "date"
                },
                "deleted": {
                    "description": "Indicates that Email is deleted",
                    "type": "boolean"
                },
                "emailPackageId": {
                    "description": "Email Package unique identifier",
                    "type": "string"
                },
                "isPreview": {
                    "description": "Indicates that email is a preview email",
                    "type": "boolean"
                },
                "isUserSent": {
                    "description": "Indicates that email was sent by some user",
                    "type": "boolean"
                },
                "watermark": {
                    "description": "The watermark on the preview email",
                    "type": "string"
                },
                "package": {
                    "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Package"
                },
                "expirationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "attachmentCount": {
                    "type": "boolean"
                },
                "sender": {
                    "description": "Sender's basic information (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Recipient"
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secureBody": {
                    "type": "boolean"
                },
                "modifiedDate": {
                    "type": "string",
                    "format": "date"
                },
                "parentEmailId": {
                    "description": "Identifier of parent email",
                    "type": "string"
                },
                "emailReturnReceipt": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EmailReturnReceipt"
                    }
                },
                "error": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "body": {
                    "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "rawBody": {
                    "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "headline": {
                    "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "notice": {
                    "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "htmlBody": {
                    "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "fullHtmlBody": {
                    "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "emailFrom": {
                    "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "isRead": {
                    "type": "boolean"
                },
                "bucket": {
                    "type": "boolean"
                },
                "templateBody": {
                    "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "webFormId": {
                    "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "webFormFields": {
                    "description": "(Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Email.Post": {
            "description": "Class Email",
            "required": [
                "templateId",
                "status"
            ],
            "properties": {
                "senderId": {
                    "description": "Unique identifier of User who sent Email",
                    "type": "integer"
                },
                "templateId": {
                    "description": "Email template unique identifier",
                    "type": "integer"
                },
                "status": {
                    "description": "Email status",
                    "type": "string",
                    "enum": [
                        "queued",
                        "draft",
                        "sent",
                        "error"
                    ]
                },
                "emailPackageId": {
                    "description": "Email Package unique identifier",
                    "type": "integer"
                },
                "secureBody": {
                    "type": "boolean"
                },
                "modifiedDate": {
                    "type": "string",
                    "format": "date"
                },
                "parentEmailId": {
                    "description": "The identifier of forwarded email",
                    "type": "integer"
                }
            }
        },
        "Email.Put": {
            "description": "Class Email",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "description": "Email status",
                    "type": "string",
                    "enum": [
                        "queued",
                        "draft",
                        "sent",
                        "error"
                    ]
                },
                "emailPackageId": {
                    "description": "Email Package unique identifier",
                    "type": "integer"
                },
                "secureBody": {
                    "type": "boolean"
                },
                "modifiedDate": {
                    "type": "string",
                    "format": "date"
                },
                "parentEmailId": {
                    "description": "The identifier of forwarded email",
                    "type": "integer"
                }
            }
        },
        "LdapGroup": {
            "description": "Class LdapGroup",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "description": "LDAP group id",
                    "type": "integer"
                },
                "name": {
                    "description": "LDAP group name",
                    "type": "string"
                },
                "email": {
                    "description": "LDAP group Email",
                    "type": "string"
                },
                "description": {
                    "description": "Description",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "LdapGroup.Post": {
            "description": "Class LdapGroup",
            "required": [
                "dn"
            ],
            "properties": {
                "dn": {
                    "description": "Domain name",
                    "type": "string"
                },
                "email": {
                    "description": "LDAP group Email",
                    "type": "string"
                },
                "description": {
                    "description": "Description",
                    "type": "string"
                }
            }
        },
        "LdapGroup.Put": {
            "description": "Class LdapGroup",
            "properties": {
                "email": {
                    "description": "LDAP group Email",
                    "type": "string"
                },
                "description": {
                    "description": "Description",
                    "type": "string"
                }
            }
        },
        "RequestFileSource": {
            "description": "Class RequestFileSource",
            "properties": {
                "fileId": {
                    "description": "The file id for this source file",
                    "type": "integer"
                },
                "requestFileId": {
                    "description": "The request file id for this source file",
                    "type": "integer"
                },
                "actionId": {
                    "description": "The available permissions on the source file for uploader",
                    "type": "integer"
                },
                "permissions": {
                    "description": "Request file permission",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RequestFilePermission"
                    }
                }
            }
        },
        "ContactBase": {
            "description": "Class ContactBase",
            "required": [
                "id",
                "name",
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "Contact unique identifier",
                    "type": "integer"
                },
                "userId": {
                    "description": "Contact owner unique identifier",
                    "type": "string"
                },
                "name": {
                    "description": "Contact name",
                    "type": "string"
                },
                "modified": {
                    "description": "Contact modification date",
                    "type": "string",
                    "format": "date"
                },
                "created": {
                    "description": "Contact creation date",
                    "type": "string",
                    "format": "date"
                },
                "items": {
                    "description": "List of emails contained by Contact",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactItem"
                    }
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "ContactBase.Post": {
            "description": "Class ContactBase",
            "required": [
                "name",
                "items"
            ],
            "properties": {
                "name": {
                    "description": "Contact name",
                    "type": "string"
                },
                "items": {
                    "description": "List of emails contained by Contact",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactItem.Post"
                    }
                }
            }
        },
        "ContactBase.Put": {
            "description": "Class ContactBase",
            "required": [
                "name",
                "items"
            ],
            "properties": {
                "name": {
                    "description": "Contact name",
                    "type": "string"
                },
                "items": {
                    "description": "List of emails contained by Contact",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactItem.Post"
                    }
                }
            }
        },
        "ECObject": {
            "description": "Class ECObject",
            "required": [
                "id",
                "parentId",
                "path",
                "sourceId"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier",
                    "type": "string"
                },
                "parentId": {
                    "description": "Unique identifier of parent for this EC Object",
                    "type": "string"
                },
                "sourceId": {
                    "description": "Source Id",
                    "type": "string"
                },
                "path": {
                    "description": "File path",
                    "type": "string"
                },
                "ecSource": {
                    "description": "EC Source (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "sourceTypeId": {
                    "description": "Unique Identifier of the SourceType",
                    "type": "string"
                }
            }
        },
        "EmailReturnReceipt": {
            "description": "Class Recipient",
            "required": [
                "userId"
            ],
            "properties": {
                "user": {
                    "description": "User entity",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "userId": {
                    "description": "User ID for Return Receipt",
                    "type": "string"
                }
            }
        },
        "EmailReturnReceipt.Post": {
            "description": "Class Recipient",
            "required": [
                "userId"
            ],
            "properties": {
                "userId": {
                    "description": "User ID for Return Receipt",
                    "type": "integer"
                }
            }
        },
        "EmailReturnReceipt.Put": {
            "description": "Class Recipient",
            "required": [
                "userId"
            ],
            "properties": {
                "userId": {
                    "description": "User ID for Return Receipt",
                    "type": "integer"
                }
            }
        },
        "Kitepoint": {
            "description": "Class Kitepoint",
            "required": [
                "id",
                "name",
                "parentId",
                "size",
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of object",
                    "type": "string"
                },
                "created": {
                    "description": "Object creation date",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted": {
                    "description": "Indicates that object is deleted",
                    "type": "boolean"
                },
                "permDeleted": {
                    "description": "Indicates that object is permanently deleted",
                    "type": "boolean"
                },
                "expire": {
                    "description": "Object expiry date",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "Object modification date",
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Object name",
                    "type": "string"
                },
                "parentId": {
                    "description": "Parent Folder identifier",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of Object creator",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Folder"
                },
                "permalink": {
                    "description": "Object permalink",
                    "type": "string"
                },
                "creator": {
                    "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "vendorDocId": {
                    "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "vendorDocName": {
                    "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "source": {
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                },
                "mime": {
                    "description": "File MIME type",
                    "type": "string"
                },
                "size": {
                    "description": "File content size",
                    "type": "string"
                },
                "fingerprint": {
                    "description": "File content fingerprint",
                    "type": "string"
                },
                "eCObject": {
                    "description": "Unique identifier of kitepoint file",
                    "type": "string"
                },
                "type": {
                    "description": "Object type. Type k is kitepoint file in tray",
                    "type": "string"
                },
                "eCUUID": {
                    "description": "ECUuId",
                    "type": "string"
                }
            }
        },
        "Comment": {
            "description": "Class Comment",
            "required": [
                "contents",
                "id",
                "objectId",
                "parentId",
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "Comment unique identifier",
                    "type": "integer"
                },
                "parentId": {
                    "description": "Parent Comment unique identifier. Exists if comment is a reply.",
                    "type": "integer"
                },
                "objectId": {
                    "description": "Unique identifier of commented Object.",
                    "type": "string"
                },
                "folderId": {
                    "description": "Unique identifier of commented Object parent Folder.",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of comment author.",
                    "type": "string"
                },
                "created": {
                    "description": "Comment creation date.",
                    "type": "string",
                    "format": "date"
                },
                "modified": {
                    "description": "Comment modification date",
                    "type": "string",
                    "format": "date"
                },
                "contents": {
                    "description": "Comment content.",
                    "type": "string"
                },
                "deleted": {
                    "description": "Indicates that comment is deleted.",
                    "type": "boolean"
                },
                "isComment": {
                    "type": "boolean"
                },
                "object": {
                    "description": "Commented Object (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/BaseObject"
                },
                "author": {
                    "description": "Comment author (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "parent": {
                    "description": "Parent comment (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Comment"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Comment.Post": {
            "description": "Class Comment",
            "required": [
                "contents"
            ],
            "properties": {
                "parentId": {
                    "description": "Parent Comment unique identifier. Should be set when replying to some comment.",
                    "type": "integer"
                },
                "contents": {
                    "description": "Comment content.",
                    "type": "string"
                }
            }
        },
        "Comment.Put": {
            "description": "Class Comment",
            "required": [
                "contents"
            ],
            "properties": {
                "contents": {
                    "description": "Comment content.",
                    "type": "string"
                }
            }
        },
        "Attachment": {
            "type": "object",
            "properties": {
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tag"
                    }
                },
                "drmFile": {
                    "$ref": "#/definitions/DrmFile"
                },
                "accessType": {
                    "type": "integer",
                    "format": "int32"
                },
                "withdrawn": {
                    "type": "boolean"
                },
                "emailPackageId": {
                    "type": "string",
                    "format": "uuid"
                },
                "attachmentId": {
                    "type": "string"
                },
                "objectId": {
                    "type": "string",
                    "format": "uuid"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "mime": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "deleted": {
                    "type": "boolean"
                },
                "fingerprint": {
                    "type": "string"
                },
                "fingerprintAlgo": {
                    "type": "string"
                },
                "fingerprints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Fingerprint"
                    }
                },
                "adminQuarantineStatus": {
                    "type": "string"
                },
                "avStatus": {
                    "type": "string"
                },
                "dlpStatus": {
                    "type": "string"
                }
            }
        },
        "Attachment.Put": {
            "description": "Class Attachment",
            "properties": {
                "emailPackageId": {
                    "description": "Unique identifier of Email Package which contains attachment.",
                    "type": "integer"
                },
                "attachmentId": {
                    "type": "string"
                }
            }
        },
        "SourceContent": {
            "description": "Class SourceContent - if you need true EAPI entity use App\\Entity\\ECObject",
            "required": [
                "id",
                "name",
                "parentId",
                "type",
                "wopiapp"
            ],
            "properties": {
                "id": {
                    "description": "Unique SourceContent identifier",
                    "type": "string"
                },
                "name": {
                    "description": "Name of source content",
                    "type": "string"
                },
                "parentId": {
                    "description": "Parent ID of Source",
                    "type": "string"
                },
                "type": {
                    "description": "Type of Object",
                    "type": "string"
                },
                "created": {
                    "description": "Time of Source created in UTC timestamp",
                    "type": "string",
                    "format": "date"
                },
                "modified": {
                    "description": "Time of Source modified in UTC timestamp",
                    "type": "string",
                    "format": "date"
                },
                "status": {
                    "description": "Status of the source",
                    "type": "string"
                },
                "deleted": {
                    "description": "Whether the file is deleted",
                    "type": "boolean"
                },
                "path": {
                    "description": "Shows object full path",
                    "type": "string"
                },
                "userRoleId": {
                    "description": "Current user role id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "integer"
                },
                "creator": {
                    "description": "File's creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "wopiapp": {
                    "description": "WOPI info for iOS app",
                    "type": "boolean"
                },
                "rootId": {
                    "description": "Root Id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "pathIds": {
                    "description": "Path Ids (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "sourceTypeId": {
                    "description": "Source Type (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "totalFilesCount": {
                    "description": "Total Files Count (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "totalFoldersCount": {
                    "description": "Total Folders Count (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent EC folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/SourceContent"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "SourceContent.Post": {
            "description": "Class SourceContent - if you need true EAPI entity use App\\Entity\\ECObject",
            "properties": {
                "id": {
                    "description": "Unique SourceContent identifier",
                    "type": "string"
                }
            }
        },
        "SourceContent.Put": {
            "description": "Class SourceContent - if you need true EAPI entity use App\\Entity\\ECObject",
            "properties": {
                "id": {
                    "description": "Unique SourceContent identifier",
                    "type": "string"
                }
            }
        },
        "SiteConfiguration": {
            "description": "Class SiteConfiguration",
            "properties": {
                "id": {
                    "description": "Config entry identifier",
                    "type": "integer"
                },
                "attributeName": {
                    "description": "Attribute name",
                    "type": "integer"
                },
                "value": {
                    "description": "Config value",
                    "type": "string"
                }
            }
        },
        "Preview": {
            "description": "Class Preview",
            "properties": {
                "link": {
                    "description": "Link of file for Preview",
                    "type": "string"
                },
                "pdf": {
                    "description": "PDF File for Preview",
                    "type": "string"
                },
                "viewUrl": {
                    "description": "Preview URL",
                    "type": "string"
                },
                "status": {
                    "description": "Status of Preview. e.g. Processing,Preview,Failed",
                    "type": "string"
                }
            }
        },
        "UserMetadata": {
            "description": "Class UserMetadata",
            "properties": {
                "name": {
                    "description": "Metadata name",
                    "type": "string"
                },
                "value": {
                    "description": "Metadata value",
                    "type": "string"
                }
            }
        },
        "Recipient": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "type": {
                    "type": "integer",
                    "format": "int32"
                },
                "user": {
                    "$ref": "#/definitions/UserBasic"
                },
                "userId": {
                    "type": "string"
                },
                "isDistributionList": {
                    "type": "boolean"
                }
            }
        },
        "Recipient.Post": {
            "description": "Class Recipient",
            "required": [
                "userId"
            ],
            "properties": {
                "userId": {
                    "description": "User ID for Recipient",
                    "type": "integer"
                },
                "type": {
                    "description": "Type for Recipient.0=TO, 1=CC, 2=BCC",
                    "type": "integer",
                    "enum": [
                        "0",
                        "1",
                        "2"
                    ]
                },
                "read": {
                    "description": "True for read, false for email not read",
                    "type": "boolean"
                }
            }
        },
        "Recipient.Put": {
            "description": "Class Recipient",
            "required": [
                "userId"
            ],
            "properties": {
                "userId": {
                    "description": "User ID for Recipient",
                    "type": "integer"
                }
            }
        },
        "Template": {
            "description": "Class Template",
            "properties": {
                "id": {
                    "description": "Unique Template identifier",
                    "type": "integer"
                },
                "name": {
                    "description": "Template name",
                    "type": "string"
                },
                "subject": {
                    "description": "Template subject",
                    "type": "string"
                },
                "body": {
                    "description": "Template body",
                    "type": "string"
                },
                "buttonLink": {
                    "description": "Button Link",
                    "type": "string"
                },
                "buttonText": {
                    "description": "Button Text",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "ActivitiesWithdrawUserFilesJob": {
            "properties": {
                "id": {
                    "description": "Job identifier",
                    "type": "string"
                },
                "status": {
                    "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
                    "type": "string"
                },
                "errors": {
                    "description": "The list of errors occurred during job processing",
                    "type": "string"
                },
                "objectIds": {
                    "type": "string"
                }
            }
        },
        "Task": {
            "description": "Class Task",
            "required": [
                "assigneeId",
                "created",
                "due",
                "id",
                "status",
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "Task unique identifier",
                    "type": "integer"
                },
                "assigneeId": {
                    "description": "Assigned User unique identifier",
                    "type": "string"
                },
                "assignee": {
                    "description": "Assigned user (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/User"
                },
                "due": {
                    "description": "Task due date",
                    "type": "string",
                    "format": "date"
                },
                "parentId": {
                    "description": "Parent Comment identifier",
                    "type": "integer"
                },
                "objectId": {
                    "description": "Object identifier Task belongs to",
                    "type": "string"
                },
                "userId": {
                    "description": "Identifier of User who created a Task",
                    "type": "string"
                },
                "user": {
                    "description": "User who created the task (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/User"
                },
                "created": {
                    "description": "Task creation date",
                    "type": "string",
                    "format": "date"
                },
                "modified": {
                    "description": "Task modification date",
                    "type": "string",
                    "format": "date"
                },
                "contents": {
                    "description": "Task content",
                    "type": "string"
                },
                "deleted": {
                    "description": "Indicates that Task is deleted",
                    "type": "boolean"
                },
                "folderId": {
                    "description": "Identifier of Object's parent Folder",
                    "type": "string"
                },
                "status": {
                    "description": "Task status",
                    "type": "string"
                },
                "file": {
                    "description": "File the task is tied to (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/File"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Task.Post": {
            "description": "Class Task",
            "required": [
                "assigneeId",
                "due",
                "contents"
            ],
            "properties": {
                "assigneeId": {
                    "description": "User unique identifier",
                    "type": "integer"
                },
                "due": {
                    "description": "Task due date",
                    "type": "string",
                    "format": "date"
                },
                "parentId": {
                    "description": "Parent Comment identifier",
                    "type": "integer"
                },
                "contents": {
                    "description": "Task content",
                    "type": "string"
                }
            }
        },
        "Task.Put": {
            "description": "Class Task",
            "required": [
                "assigneeId",
                "due",
                "contents"
            ],
            "properties": {
                "assigneeId": {
                    "description": "User unique identifier",
                    "type": "integer"
                },
                "due": {
                    "description": "Task due date",
                    "type": "string",
                    "format": "date"
                },
                "contents": {
                    "description": "Task content",
                    "type": "string"
                },
                "status": {
                    "description": "'D' = 'Defined', 'P' = 'In Progress', 'C' = 'Completed'",
                    "type": "string",
                    "enum": [
                        "D",
                        "P",
                        "C"
                    ]
                }
            }
        },
        "Tray": {
            "description": "Class Tray",
            "properties": {
                "objectId": {
                    "description": "Unique identifier of Object in Tray",
                    "type": "integer"
                },
                "parentId": {
                    "description": "Object's parent Folder identifier",
                    "type": "integer"
                },
                "canMove": {
                    "description": "Indicates whether an object can be moved",
                    "type": "boolean"
                },
                "object": {
                    "description": "File info (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/File"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Storage": {
            "description": "Class DailyBandwidth",
            "properties": {
                "dateTime": {
                    "description": "Date",
                    "type": "string",
                    "format": "date"
                },
                "usage": {
                    "description": "Storage Usage",
                    "type": "integer"
                }
            }
        },
        "Group": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "LDAP Group description"
                },
                "email": {
                    "type": "string",
                    "description": "LDAP Group email"
                },
                "id": {
                    "type": "integer",
                    "format": "int32",
                    "description": "LDAP Group ID"
                },
                "dn": {
                    "type": "string",
                    "description": "LDAP Group domain name"
                },
                "name": {
                    "type": "string",
                    "description": "LDAP Group name"
                }
            }
        },
        "Group.Post": {
            "description": "Class Group",
            "required": [
                "items",
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Contact name",
                    "type": "string"
                },
                "items": {
                    "description": "List of emails contained by Contact",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactItem.Post"
                    }
                }
            }
        },
        "Group.Put": {
            "description": "Class Group",
            "required": [
                "items",
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Contact name",
                    "type": "string"
                },
                "items": {
                    "description": "List of emails contained by Contact",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactItem.Post"
                    }
                }
            }
        },
        "ContactItem": {
            "type": "object",
            "properties": {
                "isDistributionList": {
                    "type": "boolean"
                },
                "profileIcon": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "ContactItem.Post": {
            "description": "Class ContactItem",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Contact's email",
                    "type": "string"
                }
            }
        },
        "ContactItem.Put": {
            "description": "Class ContactItem",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Contact's email",
                    "type": "string"
                }
            }
        },
        "PushedObject": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string"
                },
                "objectId": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserBasic"
                }
            }
        },
        "WebFormField": {
            "type": "object",
            "properties": {
                "editable": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "optionValues": {
                    "type": "string"
                },
                "mandatory": {
                    "type": "boolean"
                },
                "defaultValue": {
                    "type": "string"
                },
                "placeholder": {
                    "type": "string"
                },
                "specialType": {
                    "type": "string"
                },
                "sequence": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "RequestFileLink": {
            "description": "Class RequestFileLink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "RequestFileLink.Post": {
            "description": "Class RequestFileLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "RequestFileLink.Put": {
            "description": "Class RequestFileLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "AdminRole": {
            "description": "Class AdminRole",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "description": "Admin role unique identifier",
                    "type": "integer"
                },
                "name": {
                    "description": "Admin role name",
                    "type": "string"
                },
                "guid": {
                    "description": "Admin role guid",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "AdminRole.Post": {
            "description": "Class AdminRole",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Admin role name",
                    "type": "string"
                }
            }
        },
        "AdminRole.Put": {
            "description": "Class AdminRole",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Admin role name",
                    "type": "string"
                }
            }
        },
        "SourceFile": {
            "required": [
                "id",
                "name",
                "parentId",
                "type",
                "wopiapp"
            ],
            "properties": {
                "id": {
                    "description": "Unique SourceContent identifier",
                    "type": "string"
                },
                "name": {
                    "description": "Name of source content",
                    "type": "string"
                },
                "parentId": {
                    "description": "Parent ID of Source",
                    "type": "string"
                },
                "type": {
                    "description": "Type of Object",
                    "type": "string"
                },
                "created": {
                    "description": "Time of Source created in UTC timestamp",
                    "type": "string",
                    "format": "date"
                },
                "modified": {
                    "description": "Time of Source modified in UTC timestamp",
                    "type": "string",
                    "format": "date"
                },
                "status": {
                    "description": "Status of the source",
                    "type": "string"
                },
                "deleted": {
                    "description": "Whether the file is deleted",
                    "type": "boolean"
                },
                "path": {
                    "description": "Shows object full path",
                    "type": "string"
                },
                "userRoleId": {
                    "description": "Current user role id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "integer"
                },
                "creator": {
                    "description": "File's creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "wopiapp": {
                    "description": "WOPI info for iOS app",
                    "type": "boolean"
                },
                "rootId": {
                    "description": "Root Id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "pathIds": {
                    "description": "Path Ids (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "sourceTypeId": {
                    "description": "Source Type (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "totalFilesCount": {
                    "description": "Total Files Count (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "totalFoldersCount": {
                    "description": "Total Folders Count (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent EC folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/SourceContent"
                },
                "links": {
                    "type": "string"
                },
                "locked": {
                    "description": "Whether the file is locked",
                    "type": "boolean"
                },
                "size": {
                    "description": "The file size",
                    "type": "integer"
                },
                "fingerprint": {
                    "description": "File content fingerprint",
                    "type": "string"
                },
                "expire": {
                    "description": "The file expiration date",
                    "type": "string"
                },
                "mime": {
                    "description": "File MIME type",
                    "type": "string"
                },
                "avStatus": {
                    "description": "Check file availability status according to AV settings and file scanned/infected status",
                    "type": "string"
                },
                "dlpStatus": {
                    "description": "Check file availability status according to DLP settings and file scanned/infected status",
                    "type": "string"
                },
                "lockedUserName": {
                    "description": "Username/email of user who locked the file",
                    "type": "string"
                },
                "lockUser": {
                    "description": "User who locked the file",
                    "$ref": "#/definitions/UserBasicInfo"
                }
            }
        },
        "SourceFile.Post": {
            "properties": {
                "id": {
                    "description": "Unique SourceContent identifier",
                    "type": "string"
                }
            }
        },
        "SourceFile.Put": {
            "properties": {
                "id": {
                    "description": "Unique SourceContent identifier",
                    "type": "string"
                }
            }
        },
        "Transaction": {
            "description": "Class Transaction",
            "required": [
                "accessToken",
                "id"
            ],
            "properties": {
                "id": {
                    "description": "Unique transaction identifier",
                    "type": "string"
                },
                "accessToken": {
                    "description": "Access token",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Transaction.Post": {
            "description": "Class Transaction",
            "required": [
                "id",
                "accessToken"
            ],
            "properties": {
                "id": {
                    "description": "Unique transaction identifier",
                    "type": "string"
                },
                "accessToken": {
                    "description": "Access token",
                    "type": "string"
                }
            }
        },
        "Hostname": {
            "description": "Class Hostname",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "Hostname unique identifier",
                    "type": "integer"
                },
                "hostname": {
                    "description": "Hostname",
                    "type": "string"
                },
                "deleted": {
                    "description": "Indicates whether the hostname is deleted",
                    "type": "boolean"
                },
                "disabled": {
                    "description": "Indicates whether the hostname is disabled",
                    "type": "boolean"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Hostname.Post": {
            "description": "Class Hostname",
            "required": [
                "hostname"
            ],
            "properties": {
                "hostname": {
                    "description": "Hostname",
                    "type": "string"
                },
                "disabled": {
                    "description": "Disable hostname",
                    "type": "boolean"
                }
            }
        },
        "Hostname.Put": {
            "description": "Class Hostname",
            "properties": {
                "disabled": {
                    "description": "Disable hostname",
                    "type": "boolean"
                }
            }
        },
        "SourceFolder": {
            "required": [
                "id",
                "name",
                "parentId",
                "type",
                "wopiapp"
            ],
            "properties": {
                "id": {
                    "description": "Unique SourceContent identifier",
                    "type": "string"
                },
                "name": {
                    "description": "Name of source content",
                    "type": "string"
                },
                "parentId": {
                    "description": "Parent ID of Source",
                    "type": "string"
                },
                "type": {
                    "description": "Type of Object",
                    "type": "string"
                },
                "created": {
                    "description": "Time of Source created in UTC timestamp",
                    "type": "string",
                    "format": "date"
                },
                "modified": {
                    "description": "Time of Source modified in UTC timestamp",
                    "type": "string",
                    "format": "date"
                },
                "status": {
                    "description": "Status of the source",
                    "type": "string"
                },
                "deleted": {
                    "description": "Whether the file is deleted",
                    "type": "boolean"
                },
                "path": {
                    "description": "Shows object full path",
                    "type": "string"
                },
                "userRoleId": {
                    "description": "Current user role id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "integer"
                },
                "creator": {
                    "description": "File's creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "wopiapp": {
                    "description": "WOPI info for iOS app",
                    "type": "boolean"
                },
                "rootId": {
                    "description": "Root Id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "pathIds": {
                    "description": "Path Ids (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "sourceTypeId": {
                    "description": "Source Type (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "totalFilesCount": {
                    "description": "Total Files Count (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "totalFoldersCount": {
                    "description": "Total Folders Count (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent EC folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/SourceContent"
                },
                "links": {
                    "type": "string"
                },
                "isFavorite": {
                    "description": "Indicates that Folder is marked as favorite for current user",
                    "type": "boolean"
                }
            }
        },
        "SourceFolder.Post": {
            "properties": {
                "id": {
                    "description": "Unique SourceContent identifier",
                    "type": "string"
                }
            }
        },
        "SourceFolder.Put": {
            "properties": {
                "id": {
                    "description": "Unique SourceContent identifier",
                    "type": "string"
                }
            }
        },
        "Settings": {
            "description": "Class Settings",
            "required": [
                "defaultFileRequestExpire",
                "proximityEnabled"
            ],
            "properties": {
                "defaultFileRequestExpire": {
                    "description": "Default file request expiration",
                    "type": "integer"
                },
                "proximityEnabled": {
                    "description": "Is proximity enabled",
                    "type": "integer"
                },
                "adminSetPasswordAllowed": {
                    "description": "Backend switch for admin set password allowed",
                    "type": "boolean"
                }
            }
        },
        "Settings.Post": {
            "description": "Class Settings",
            "properties": {
                "languageId": {
                    "description": "Language ID in Setting",
                    "type": "integer"
                },
                "locationId": {
                    "description": "ID of Location in Setting. User's personal default location for send file and uploads.",
                    "type": "integer"
                },
                "signature": {
                    "description": "Email message Signature in Setting",
                    "type": "string"
                },
                "mobileKeyStore": {
                    "description": "Mobile Key Store of Setting",
                    "type": "string"
                }
            }
        },
        "Settings.Put": {
            "description": "Class Settings",
            "properties": {
                "languageId": {
                    "description": "Language ID in Setting",
                    "type": "integer"
                },
                "locationId": {
                    "description": "ID of Location in Setting. User's personal default location for send file and uploads.",
                    "type": "integer"
                },
                "signature": {
                    "description": "Email message Signature in Setting",
                    "type": "string"
                },
                "mobileKeyStore": {
                    "description": "Mobile Key Store of Setting",
                    "type": "string"
                }
            }
        },
        "Location": {
            "description": "Class Location",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of location",
                    "type": "integer"
                },
                "name": {
                    "description": "Location name. Ask administrator for location names for your server",
                    "type": "string"
                },
                "dns": {
                    "description": "DNS URL",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Location.Post": {
            "description": "Class Location",
            "required": [
                "name",
                "domain"
            ],
            "properties": {
                "name": {
                    "description": "Location name. Ask administrator for location names for your server",
                    "type": "string"
                },
                "domain": {
                    "description": "A URL domain that can be used to access the servers in this location,\n                                 e.g. location.domain.com.\n                                    The domain should be registered in a DNS to point to the servers.",
                    "type": "string"
                }
            }
        },
        "Location.Put": {
            "description": "Class Location",
            "required": [
                "name",
                "domain"
            ],
            "properties": {
                "name": {
                    "description": "Location name. Ask administrator for location names for your server",
                    "type": "string"
                },
                "domain": {
                    "description": "A URL domain that can be used to access the servers in this location,\n                                 e.g. location.domain.com.\n                                    The domain should be registered in a DNS to point to the servers.",
                    "type": "string"
                }
            }
        },
        "WebForm": {
            "type": "object",
            "properties": {
                "authRequired": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "lastModified": {
                    "type": "string"
                },
                "standalone": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WebFormField"
                    }
                },
                "name": {
                    "type": "string"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WebFormProfile"
                    }
                },
                "embedded": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "GDriveOAuthLink": {
            "description": "Class GDriveOAuthLink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "GDriveOAuthLink.Post": {
            "description": "Class GDriveOAuthLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "GDriveOAuthLink.Put": {
            "description": "Class GDriveOAuthLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "Upload": {
            "type": "object",
            "properties": {
                "finished": {
                    "type": "boolean"
                },
                "uri": {
                    "type": "string",
                    "readOnly": true
                },
                "clientModified": {
                    "type": "string"
                },
                "backend": {
                    "type": "string"
                },
                "emailId": {
                    "type": "integer",
                    "format": "int32"
                },
                "timestamp": {
                    "type": "string"
                },
                "clientName": {
                    "type": "string"
                },
                "uploadedChunks": {
                    "type": "integer",
                    "format": "int32"
                },
                "id": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Upload id"
                },
                "lastTimestamp": {
                    "type": "string"
                },
                "clientCreated": {
                    "type": "string"
                },
                "totalSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "fileUrl": {
                    "type": "string"
                },
                "requestFileId": {
                    "type": "integer",
                    "format": "int32"
                },
                "svrUploadTime": {
                    "type": "integer",
                    "format": "int32"
                },
                "uploadedSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalChunks": {
                    "type": "integer",
                    "format": "int32"
                },
                "replaceId": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "completeOk": {
                    "type": "integer",
                    "format": "int32"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "Upload.Post": {
            "description": "Class FileUpload",
            "required": [
                "filename"
            ],
            "properties": {
                "filename": {
                    "description": "File name",
                    "type": "string"
                },
                "totalSize": {
                    "type": "integer"
                },
                "totalChunks": {
                    "description": "Total chunks amount",
                    "type": "integer"
                },
                "clientCreated": {
                    "description": "File creation date set from client",
                    "type": "string",
                    "format": "date"
                },
                "clientModified": {
                    "description": "File modify date set from client",
                    "type": "string",
                    "format": "date"
                },
                "disableAutoVersion": {
                    "description": "Indicates whether Client would like to save file as new version",
                    "type": "boolean"
                }
            }
        },
        "Upload.Put": {
            "description": "Class FileUpload",
            "properties": {
                "disableAutoVersion": {
                    "description": "Indicates whether Client would like to save file as new version",
                    "type": "boolean"
                }
            }
        },
        "Permission": {
            "type": "object",
            "properties": {
                "allowed": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "MobileSyncLink": {
            "description": "Class ObjectLink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "MobileSyncLink.Post": {
            "description": "Class ObjectLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "MobileSyncLink.Put": {
            "description": "Class ObjectLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "Folder": {
            "type": "object",
            "properties": {
                "secure": {
                    "type": "boolean"
                },
                "avStatus": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "isFavorite": {
                    "type": "boolean"
                },
                "maxFolderExpiration": {
                    "type": "string"
                },
                "isLdapGroupMember": {
                    "type": "boolean"
                },
                "parentId": {
                    "type": "string"
                },
                "pathIds": {
                    "type": "string"
                },
                "totalFilesCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "vendorDocName": {
                    "type": "string"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Member"
                    }
                },
                "deleted": {
                    "type": "boolean"
                },
                "permalink": {
                    "type": "string"
                },
                "isShared": {
                    "type": "boolean"
                },
                "isUnderMyFolder": {
                    "type": "boolean"
                },
                "totalMembersCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "source": {
                    "type": "integer",
                    "format": "int32"
                },
                "permDeleted": {
                    "type": "boolean"
                },
                "isRoot": {
                    "type": "boolean"
                },
                "fileLifetime": {
                    "type": "integer",
                    "format": "int32"
                },
                "currentUserRole": {
                    "$ref": "#/definitions/Role"
                },
                "syncable": {
                    "type": "boolean"
                },
                "rootId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "path": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "pushedFilesCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "modified": {
                    "type": "string"
                },
                "maxFileLifetime": {
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "type": "string"
                },
                "creator": {
                    "$ref": "#/definitions/UserBasic"
                },
                "dlpStatus": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "vendorDocId": {
                    "type": "string"
                },
                "totalFoldersCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "userId": {
                    "type": "string"
                },
                "expire": {
                    "type": "string"
                }
            }
        },
        "Folder.Post": {
            "description": "Class Folder",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Folder name",
                    "type": "string"
                },
                "description": {
                    "description": "Folder description",
                    "type": "string"
                },
                "syncable": {
                    "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
                    "type": "boolean"
                },
                "expire": {
                    "description": "The folder expiration date. Applicable to top level folders",
                    "type": "string",
                    "format": "date"
                },
                "fileLifetime": {
                    "description": "The file's lifetime in the folder",
                    "type": "integer"
                },
                "secure": {
                    "description": "Indicates whether folder is secure. Only top level folders under user's root folder can be set to secure",
                    "type": "boolean"
                }
            }
        },
        "Folder.Put": {
            "description": "Class Folder",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Folder name",
                    "type": "string"
                },
                "description": {
                    "description": "Folder description",
                    "type": "string"
                },
                "syncable": {
                    "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
                    "type": "boolean"
                },
                "expire": {
                    "description": "The folder expiration date. Applicable to top level folders",
                    "type": "string",
                    "format": "date"
                },
                "fileLifetime": {
                    "description": "The file's lifetime in the folder",
                    "type": "integer"
                },
                "applyFileLifetimeToFiles": {
                    "description": "Apply file lifetime setting to existing files",
                    "type": "boolean"
                },
                "applyFileLifetimeToNested": {
                    "description": "Apply file lifetime setting to nested folders",
                    "type": "boolean"
                },
                "secure": {
                    "description": "Indicates whether folder is secure. Only top level folders under user's root folder can be set to secure",
                    "type": "boolean"
                }
            }
        },
        "DliFile": {
            "description": "Class DliFile",
            "required": [
                "id",
                "locked",
                "name",
                "parentId",
                "size",
                "type",
                "userId",
                "wopiapp"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of object",
                    "type": "string"
                },
                "created": {
                    "description": "Object creation date",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted": {
                    "description": "Indicates that object is deleted",
                    "type": "boolean"
                },
                "permDeleted": {
                    "description": "Indicates that object is permanently deleted",
                    "type": "boolean"
                },
                "expire": {
                    "description": "Object expiry date",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "Object modification date",
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Object name",
                    "type": "string"
                },
                "parentId": {
                    "description": "Parent Folder identifier",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of Object creator",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Folder"
                },
                "permalink": {
                    "description": "Object permalink",
                    "type": "string"
                },
                "creator": {
                    "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "vendorDocId": {
                    "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "vendorDocName": {
                    "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "source": {
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                },
                "mime": {
                    "description": "File MIME type",
                    "type": "string"
                },
                "size": {
                    "description": "File content size",
                    "type": "string"
                },
                "fingerprint": {
                    "description": "File content fingerprint",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "locked": {
                    "description": "Unique identifier of User who locked a File",
                    "type": "integer"
                },
                "lockUser": {
                    "description": "User who locked the File (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/User"
                },
                "clientCreated": {
                    "description": "Original created time of the file",
                    "type": "string",
                    "format": "date"
                },
                "clientModified": {
                    "description": "Original Modified time of the file",
                    "type": "string",
                    "format": "date"
                },
                "members": {
                    "description": "File members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Member"
                    }
                },
                "overriddenExpire": {
                    "description": "Indicates that file expire is overridden",
                    "type": "boolean"
                },
                "originalFileId": {
                    "description": "File identifier from which this file was copied from",
                    "type": "string"
                },
                "pushedObject": {
                    "description": "Contains pushedObject data if current file was ever pushed (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/PushedObject"
                },
                "avStatus": {
                    "description": "Check file availability status according to AV settings and file scanned/infected status",
                    "type": "string"
                },
                "dlpStatus": {
                    "description": "Check file availability status according to DLP settings and file scanned/infected status",
                    "type": "string"
                },
                "adminQuarantineStatus": {
                    "description": "Check file availability status according to admin quarantined status",
                    "type": "string"
                },
                "storageAvailable": {
                    "description": "Boolean value that shows if this file is available on any volume",
                    "type": "boolean"
                },
                "lastModifiedBy": {
                    "description": "Creator of the latest version (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/User"
                },
                "wopiapp": {
                    "description": "WOPI info for iOS app",
                    "type": "boolean"
                },
                "roleId": {
                    "description": "Highest role",
                    "type": "string"
                },
                "isShared": {
                    "description": "File shared",
                    "type": "string"
                },
                "fingerprints": {
                    "description": "Array of file fingerprint objects",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "description": "Array of tag objects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tag"
                    }
                }
            }
        },
        "DliFile.Post": {
            "description": "Class DliFile",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "File name",
                    "type": "string"
                }
            }
        },
        "DliFile.Put": {
            "description": "Class DliFile",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "File name",
                    "type": "string"
                },
                "expire": {
                    "description": "The file expiration date.",
                    "type": "string"
                },
                "replace": {
                    "description": "Replace the file if file with same name exists",
                    "type": "string"
                }
            }
        },
        "SourceType": {
            "description": "Class SourceType",
            "properties": {
                "id": {
                    "description": "Unique identifier of Source type",
                    "type": "integer"
                },
                "name": {
                    "description": "Source Type name",
                    "type": "string"
                },
                "userCanSet": {
                    "description": "User can set",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Member": {
            "type": "object",
            "properties": {
                "inheritRoleId": {
                    "type": "integer",
                    "format": "int32"
                },
                "objectId": {
                    "type": "string"
                },
                "group": {
                    "$ref": "#/definitions/Group"
                },
                "groupId": {
                    "type": "integer",
                    "format": "int32"
                },
                "sharedBy": {
                    "$ref": "#/definitions/UserBasic"
                },
                "roleId": {
                    "type": "integer",
                    "format": "int32"
                },
                "allowedFolderRoleId": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "user": {
                    "$ref": "#/definitions/UserBasic"
                },
                "role": {
                    "$ref": "#/definitions/Role"
                },
                "created": {
                    "type": "string",
                    "description": "Shared Date"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "Member.Post": {
            "description": "Class Member",
            "required": [
                "roleId"
            ],
            "properties": {
                "roleId": {
                    "description": "Unique identifier of role",
                    "type": "integer"
                },
                "userId": {
                    "description": "User's unique identifier",
                    "type": "integer"
                },
                "email": {
                    "description": "User email",
                    "type": "string"
                },
                "notify": {
                    "description": "Indicates whether user would like to receive emails when new member is added into folder",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "Member.Put": {
            "description": "Class Member",
            "required": [
                "roleId"
            ],
            "properties": {
                "roleId": {
                    "description": "Unique identifier of role",
                    "type": "integer"
                },
                "notifyFileAdded": {
                    "type": "boolean"
                },
                "notify": {
                    "description": "Indicates whether user would like to receive emails when new member is added into folder",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "VerificationCodeLink": {
            "description": "Class VerificationCodeLink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "VerificationCodeLink.Post": {
            "description": "Class VerificationCodeLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "VerificationCodeLink.Put": {
            "description": "Class VerificationCodeLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "Device": {
            "description": "Class Device",
            "required": [
                "clientId",
                "id",
                "installName",
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of Device",
                    "type": "integer"
                },
                "clientId": {
                    "description": "Unique identifier of client for this Device",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of user for this Device",
                    "type": "string"
                },
                "installTagId": {
                    "description": "Unique identifier of install tag for this Device.Usually the serial number of Device",
                    "type": "string"
                },
                "installName": {
                    "description": "Install Tag name for this Device. e.g. Someone's IPhone",
                    "type": "string"
                },
                "wipeFlag": {
                    "description": "Flag that tells the device to remote wipe itself.\n     *                   0 = not set, 1 = set, 2 = device has been notified, 3 = wipe is completed",
                    "type": "string"
                },
                "mobileKeyStore": {
                    "description": "Key to encrypt files on this device",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Device.Post": {
            "description": "Class Device",
            "properties": {
                "clientId": {
                    "description": "Unique identifier of client for this Device",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of user for this Device",
                    "type": "string"
                },
                "installTagId": {
                    "description": "Unique identifier of install tag for this Device. Usually the serial number of Device",
                    "type": "string"
                },
                "installName": {
                    "description": "Install Tag name for this Device. e.g. Someone's IPhone",
                    "type": "string"
                },
                "mobileKeyStore": {
                    "description": "Key for encryt files on this device",
                    "type": "string"
                }
            }
        },
        "Device.Put": {
            "description": "Class Device",
            "properties": {
                "mobileKeyStore": {
                    "description": "Key for encryt files on this device",
                    "type": "string"
                },
                "registrationToken": {
                    "description": "Set the token for messaging registration",
                    "type": "string"
                }
            }
        },
        "Activity": {
            "type": "object",
            "properties": {
                "event": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user": {
                    "$ref": "#/definitions/ActivityUser"
                },
                "created": {
                    "type": "string"
                },
                "successful": {
                    "type": "boolean"
                },
                "data": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "BaseFile": {
            "required": [
                "id",
                "name",
                "parentId",
                "size",
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of object",
                    "type": "string"
                },
                "created": {
                    "description": "Object creation date",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted": {
                    "description": "Indicates that object is deleted",
                    "type": "boolean"
                },
                "permDeleted": {
                    "description": "Indicates that object is permanently deleted",
                    "type": "boolean"
                },
                "expire": {
                    "description": "Object expiry date",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "Object modification date",
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Object name",
                    "type": "string"
                },
                "parentId": {
                    "description": "Parent Folder identifier",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of Object creator",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Folder"
                },
                "permalink": {
                    "description": "Object permalink",
                    "type": "string"
                },
                "creator": {
                    "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "vendorDocId": {
                    "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "vendorDocName": {
                    "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "source": {
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                },
                "mime": {
                    "description": "File MIME type",
                    "type": "string"
                },
                "size": {
                    "description": "File content size",
                    "type": "string"
                },
                "fingerprint": {
                    "description": "File content fingerprint",
                    "type": "string"
                }
            }
        },
        "KitepointDirectory": {
            "description": "Class KitepointDirectory",
            "required": [
                "id",
                "name",
                "parentId",
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of object",
                    "type": "string"
                },
                "created": {
                    "description": "Object creation date",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted": {
                    "description": "Indicates that object is deleted",
                    "type": "boolean"
                },
                "permDeleted": {
                    "description": "Indicates that object is permanently deleted",
                    "type": "boolean"
                },
                "expire": {
                    "description": "Object expiry date",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "Object modification date",
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Object name",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of Object creator",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Folder"
                },
                "permalink": {
                    "description": "Object permalink",
                    "type": "string"
                },
                "creator": {
                    "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "vendorDocId": {
                    "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "vendorDocName": {
                    "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "source": {
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                },
                "type": {
                    "description": "Object type. Type kd is kitepoint folder",
                    "type": "string"
                },
                "path": {
                    "description": "Parent folders path",
                    "type": "string"
                },
                "parentId": {
                    "description": "Parent Folder identifier",
                    "type": "string"
                },
                "isFavorite": {
                    "description": "Indicates that Folder is marked as favorite for current user (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "boolean"
                },
                "eCObject": {
                    "description": "Unique identifier of kitepoint directory",
                    "type": "string"
                },
                "eCUUID": {
                    "description": "ECUuId",
                    "type": "string"
                }
            }
        },
        "KitepointDirectory.Post": {
            "description": "Class KitepointDirectory",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Folder name",
                    "type": "string"
                }
            }
        },
        "KitepointDirectory.Put": {
            "description": "Class KitepointDirectory",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Folder name",
                    "type": "string"
                }
            }
        },
        "DailyBandwidth": {
            "description": "Class DailyBandwidth",
            "properties": {
                "dateTime": {
                    "description": "Date",
                    "type": "string",
                    "format": "date"
                },
                "eventStatus": {
                    "description": "Event Status",
                    "type": "integer"
                },
                "usage": {
                    "description": "Bandwidth Usage",
                    "type": "integer"
                }
            }
        },
        "Shortlink": {
            "description": "Class Shortlink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Shortlink.Post": {
            "description": "Class Shortlink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "Shortlink.Put": {
            "description": "Class Shortlink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "User": {
            "description": "Class User",
            "required": [
                "basedirId",
                "email",
                "id",
                "mydirId",
                "name",
                "syncdirId"
            ],
            "properties": {
                "id": {
                    "description": "The unique identifier of the user",
                    "type": "string"
                },
                "basedirId": {
                    "description": "The unique identifier of the user's root kiteworks directory.\n     *                  Only folder creation is allowed on user's base directory.",
                    "type": "string"
                },
                "created": {
                    "description": "User creation date",
                    "type": "string",
                    "format": "date"
                },
                "email": {
                    "description": "The user's email",
                    "type": "string"
                },
                "mydirId": {
                    "description": "The unique identifier of the user's mydir directory.\n     *                  mydir directory stores copies of files from email attachments and user's profile image.\n     *                  mydir is not visible to end users",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the user",
                    "type": "string"
                },
                "syncdirId": {
                    "description": "Id of sync dir",
                    "type": "string"
                },
                "userTypeId": {
                    "description": "The unique identifier of the user type",
                    "type": "integer"
                },
                "internal": {
                    "description": "Indicates that the user is an internal user",
                    "type": "boolean"
                },
                "profileIcon": {
                    "description": "User profile icon link",
                    "type": "string"
                },
                "extDL": {
                    "description": "Indicates that the user is External Distribution List",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "List of user's metadata",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserMetadata"
                    }
                },
                "adminRoleId": {
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                },
                "active": {
                    "description": "Indicates whether the user is an actual kitework user",
                    "type": "boolean"
                },
                "suspended": {
                    "description": "Indicates whether the user is suspended",
                    "type": "boolean"
                },
                "deleted": {
                    "description": "Indicates whether the user has been deleted",
                    "type": "boolean"
                },
                "flags": {
                    "description": "Authentication type.\n     *                  0: No authentication,\n     *                  1: Authentication by kiteworks,\n     *                  2: Authentication by LDAP,\n     *                  4: Authentication by SSO",
                    "type": "integer"
                },
                "verified": {
                    "description": "Indicates that the user is verified",
                    "type": "boolean"
                },
                "deactivated": {
                    "description": "Indicates whether the user has been deactivated",
                    "type": "boolean"
                }
            }
        },
        "User.Post": {
            "description": "Class User",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "The user's email",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the user",
                    "type": "string"
                },
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "userTypeId": {
                    "description": "The unique identifier of the user type",
                    "type": "integer"
                },
                "verified": {
                    "description": "Indicates that the user is verified",
                    "type": "boolean"
                },
                "sendNotification": {
                    "description": "Indicates whether send notification to user or not",
                    "type": "boolean"
                }
            }
        },
        "User.Put": {
            "description": "Class User",
            "properties": {
                "suspended": {
                    "description": "Indicates whether the user is suspended",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the user",
                    "type": "string"
                },
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "verified": {
                    "description": "Indicates that the user is verified",
                    "type": "boolean"
                },
                "deactivated": {
                    "description": "The user deactivated flag",
                    "type": "boolean"
                }
            }
        },
        "Content": {
            "description": "Class Content",
            "required": [
                "id",
                "locked",
                "name",
                "parentId",
                "size",
                "type",
                "userId",
                "wopiapp"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of object",
                    "type": "string"
                },
                "created": {
                    "description": "Object creation date",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted": {
                    "description": "Indicates that object is deleted",
                    "type": "boolean"
                },
                "permDeleted": {
                    "description": "Indicates that object is permanently deleted",
                    "type": "boolean"
                },
                "expire": {
                    "description": "Object expiry date",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "Object modification date",
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Object name",
                    "type": "string"
                },
                "parentId": {
                    "description": "Parent Folder identifier",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of Object creator",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Folder"
                },
                "permalink": {
                    "description": "Object permalink",
                    "type": "string"
                },
                "creator": {
                    "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "vendorDocId": {
                    "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "vendorDocName": {
                    "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "source": {
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                },
                "mime": {
                    "description": "File MIME type",
                    "type": "string"
                },
                "size": {
                    "description": "File content size",
                    "type": "string"
                },
                "fingerprint": {
                    "description": "File content fingerprint",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "locked": {
                    "description": "Unique identifier of User who locked a File",
                    "type": "integer"
                },
                "lockUser": {
                    "description": "User who locked the File (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/User"
                },
                "clientCreated": {
                    "description": "Original created time of the file",
                    "type": "string",
                    "format": "date"
                },
                "clientModified": {
                    "description": "Original Modified time of the file",
                    "type": "string",
                    "format": "date"
                },
                "members": {
                    "description": "File members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Member"
                    }
                },
                "overriddenExpire": {
                    "description": "Indicates that file expire is overridden",
                    "type": "boolean"
                },
                "originalFileId": {
                    "description": "File identifier from which this file was copied from",
                    "type": "string"
                },
                "pushedObject": {
                    "description": "Contains pushedObject data if current file was ever pushed (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/PushedObject"
                },
                "avStatus": {
                    "description": "Check file availability status according to AV settings and file scanned/infected status",
                    "type": "string"
                },
                "dlpStatus": {
                    "description": "Check file availability status according to DLP settings and file scanned/infected status",
                    "type": "string"
                },
                "adminQuarantineStatus": {
                    "description": "Check file availability status according to admin quarantined status",
                    "type": "string"
                },
                "storageAvailable": {
                    "description": "Boolean value that shows if this file is available on any volume",
                    "type": "boolean"
                },
                "lastModifiedBy": {
                    "description": "Creator of the latest version (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/User"
                },
                "wopiapp": {
                    "description": "WOPI info for iOS app",
                    "type": "boolean"
                },
                "roleId": {
                    "description": "Highest role",
                    "type": "string"
                },
                "isShared": {
                    "description": "File shared",
                    "type": "string"
                },
                "fingerprints": {
                    "description": "Array of file fingerprint objects",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "description": "Array of tag objects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tag"
                    }
                }
            }
        },
        "Content.Post": {
            "description": "Class Content",
            "required": [
                "content",
                "name"
            ],
            "properties": {
                "name": {
                    "description": "File name",
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "clientCreated": {
                    "description": "Client create date",
                    "type": "integer"
                },
                "clientModified": {
                    "description": "Client modified date",
                    "type": "integer"
                },
                "note": {
                    "description": "Is this a note file",
                    "type": "integer"
                },
                "disableAutoVersion": {
                    "description": "Indicates whether Client would like to save file as new version",
                    "type": "boolean"
                }
            }
        },
        "Content.Put": {
            "description": "Class Content",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "File name",
                    "type": "string"
                },
                "expire": {
                    "description": "The file expiration date.",
                    "type": "string"
                },
                "replace": {
                    "description": "Replace the file if file with same name exists",
                    "type": "string"
                },
                "clientCreated": {
                    "description": "Client create date",
                    "type": "integer"
                },
                "clientModified": {
                    "description": "Client modified date",
                    "type": "integer"
                },
                "note": {
                    "description": "Is this a note file",
                    "type": "integer"
                },
                "disableAutoVersion": {
                    "description": "Indicates whether Client would like to save file as new version",
                    "type": "boolean"
                }
            }
        },
        "Export": {
            "description": "Class Export",
            "required": [
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "The Id of the task of generating the export",
                    "type": "string"
                },
                "startDate": {
                    "description": "Start date",
                    "type": "string",
                    "format": "date"
                },
                "endDate": {
                    "description": "End date",
                    "type": "string",
                    "format": "date"
                },
                "status": {
                    "description": "The status generating the export data",
                    "type": "string"
                },
                "downloadURL": {
                    "description": "The URL for downloading the exported data",
                    "type": "string"
                },
                "type": {
                    "description": "The export type (activities, files, or emails)",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of the user",
                    "type": "string"
                },
                "generatedDate": {
                    "description": "The date the report is generated",
                    "type": "string",
                    "format": "date"
                },
                "fileName": {
                    "description": "The generated report filename",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Export.Post": {
            "description": "Class Export",
            "required": [
                "startDate",
                "endDate",
                "types"
            ],
            "properties": {
                "startDate": {
                    "description": "Start date",
                    "type": "string",
                    "format": "date"
                },
                "endDate": {
                    "description": "End date",
                    "type": "string",
                    "format": "date"
                },
                "types": {
                    "description": "The export type (activities, files, or emails)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Export.Put": {
            "description": "Class Export",
            "required": [
                "startDate",
                "endDate",
                "types"
            ],
            "properties": {
                "startDate": {
                    "description": "Start date",
                    "type": "string",
                    "format": "date"
                },
                "endDate": {
                    "description": "End date",
                    "type": "string",
                    "format": "date"
                },
                "types": {
                    "description": "The export type (activities, files, or emails)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Profile": {
            "description": "Class Profile",
            "required": [
                "builtIn",
                "cloneable",
                "id",
                "name",
                "prototype"
            ],
            "properties": {
                "id": {
                    "description": "Unique Profile identifier",
                    "type": "integer"
                },
                "name": {
                    "description": "Profile name",
                    "type": "string"
                },
                "prototype": {
                    "description": "Prototype Profile identifier",
                    "type": "integer"
                },
                "builtIn": {
                    "description": "Indicates that the profile is built in",
                    "type": "integer"
                },
                "cloneable": {
                    "description": "Indicates that the profile can be a prototype for new custom profiles",
                    "type": "integer"
                },
                "features": {
                    "description": "Profile feature",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeaturesList"
                    }
                }
            }
        },
        "Profile.Post": {
            "description": "Class Profile",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Profile name",
                    "type": "string"
                },
                "prototype": {
                    "description": "Id of the prototype profile to be cloned. If not passed, the Standard profile will be used",
                    "type": "integer"
                }
            }
        },
        "Profile.Put": {
            "description": "Class Profile",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Profile name",
                    "type": "string"
                },
                "prototype": {
                    "description": "Id of the prototype profile to be cloned. If not passed, the Standard profile will be used",
                    "type": "integer"
                }
            }
        },
        "Link": {
            "description": "Class LinkEntity",
            "properties": {
                "rel": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "href": {
                    "type": "string"
                }
            }
        },
        "KitepointFile": {
            "description": "Class File",
            "required": [
                "id",
                "locked",
                "name",
                "parentId",
                "size",
                "type",
                "userId",
                "wopiapp"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of object",
                    "type": "string"
                },
                "created": {
                    "description": "Object creation date",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted": {
                    "description": "Indicates that object is deleted",
                    "type": "boolean"
                },
                "permDeleted": {
                    "description": "Indicates that object is permanently deleted",
                    "type": "boolean"
                },
                "expire": {
                    "description": "Object expiry date",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "Object modification date",
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Object name",
                    "type": "string"
                },
                "parentId": {
                    "description": "Parent Folder identifier",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of Object creator",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Folder"
                },
                "permalink": {
                    "description": "Object permalink",
                    "type": "string"
                },
                "creator": {
                    "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "vendorDocId": {
                    "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "vendorDocName": {
                    "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "source": {
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                },
                "mime": {
                    "description": "File MIME type",
                    "type": "string"
                },
                "size": {
                    "description": "File content size",
                    "type": "string"
                },
                "fingerprint": {
                    "description": "File content fingerprint",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "locked": {
                    "description": "Unique identifier of User who locked a File",
                    "type": "integer"
                },
                "lockUser": {
                    "description": "User who locked the File (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/User"
                },
                "clientCreated": {
                    "description": "Original created time of the file",
                    "type": "string",
                    "format": "date"
                },
                "clientModified": {
                    "description": "Original Modified time of the file",
                    "type": "string",
                    "format": "date"
                },
                "members": {
                    "description": "File members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Member"
                    }
                },
                "overriddenExpire": {
                    "description": "Indicates that file expire is overridden",
                    "type": "boolean"
                },
                "originalFileId": {
                    "description": "File identifier from which this file was copied from",
                    "type": "string"
                },
                "pushedObject": {
                    "description": "Contains pushedObject data if current file was ever pushed (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/PushedObject"
                },
                "avStatus": {
                    "description": "Check file availability status according to AV settings and file scanned/infected status",
                    "type": "string"
                },
                "dlpStatus": {
                    "description": "Check file availability status according to DLP settings and file scanned/infected status",
                    "type": "string"
                },
                "adminQuarantineStatus": {
                    "description": "Check file availability status according to admin quarantined status",
                    "type": "string"
                },
                "storageAvailable": {
                    "description": "Boolean value that shows if this file is available on any volume",
                    "type": "boolean"
                },
                "lastModifiedBy": {
                    "description": "Creator of the latest version (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/User"
                },
                "wopiapp": {
                    "description": "WOPI info for iOS app",
                    "type": "boolean"
                },
                "roleId": {
                    "description": "Highest role",
                    "type": "string"
                },
                "isShared": {
                    "description": "File shared",
                    "type": "string"
                },
                "fingerprints": {
                    "description": "Array of file fingerprint objects",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "description": "Array of tag objects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tag"
                    }
                }
            }
        },
        "KitepointFile.Post": {
            "description": "Class File",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "File name",
                    "type": "string"
                }
            }
        },
        "KitepointFile.Put": {
            "description": "Class File",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "File name",
                    "type": "string"
                },
                "expire": {
                    "description": "The file expiration date.",
                    "type": "string"
                },
                "replace": {
                    "description": "Replace the file if file with same name exists",
                    "type": "string"
                }
            }
        },
        "Tag": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "Version": {
            "description": "Class Version",
            "required": [
                "id",
                "name",
                "objectId",
                "userId",
                "versionNumber"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of the file version",
                    "type": "string"
                },
                "versionNumber": {
                    "description": "File version number",
                    "type": "integer"
                },
                "deleted": {
                    "description": "Indicates whether the version has been deleted",
                    "type": "boolean"
                },
                "created": {
                    "description": "File Version creation date",
                    "type": "string",
                    "format": "date"
                },
                "userId": {
                    "description": "Unique identifier of User who created File Version",
                    "type": "string"
                },
                "size": {
                    "description": "File content size",
                    "type": "integer"
                },
                "fingerprint": {
                    "description": "File content fingerprint",
                    "type": "string"
                },
                "fingerprintAlgo": {
                    "description": "File content fingerprint algo",
                    "type": "string"
                },
                "backend": {
                    "description": "Storage backend used by File",
                    "type": "string"
                },
                "mime": {
                    "description": "File mime type",
                    "type": "string"
                },
                "name": {
                    "description": "File name",
                    "type": "string"
                },
                "creator": {
                    "description": "User data for creator of version (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "objectId": {
                    "description": "Unique identifier of the file",
                    "type": "string"
                },
                "clientCreated": {
                    "description": "Original created time of the file",
                    "type": "string",
                    "format": "date"
                },
                "clientModified": {
                    "description": "Original modified time of the file",
                    "type": "string",
                    "format": "date"
                },
                "avStatus": {
                    "description": "Check file availability status according to AV settings and file scanned/infected status",
                    "type": "string"
                },
                "dlpStatus": {
                    "description": "Check file availability status according to DLP settings and file scanned/infected status",
                    "type": "string"
                },
                "adminQuarantineStatus": {
                    "description": "Check file availability status according admin quarantined status. ",
                    "type": "string"
                },
                "storageAvailable": {
                    "description": "Boolean value that shows if this file is available on any volume",
                    "type": "boolean"
                },
                "fingerprints": {
                    "description": "Array of all file fingerprint objects",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "description": "Array of tag objects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tag"
                    }
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Version.Post": {
            "description": "Class Version",
            "required": [
                "name"
            ],
            "properties": {
                "versionNumber": {
                    "description": "File version number",
                    "type": "integer"
                },
                "deleted": {
                    "description": "Indicates whether the version has been deleted",
                    "type": "boolean"
                },
                "fingerprint": {
                    "description": "The fingerprint that uniquely identifies the original file",
                    "type": "integer"
                },
                "clientCreated": {
                    "type": "integer"
                },
                "clientModified": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "size": {
                    "description": "The file size",
                    "type": "integer"
                },
                "user": {
                    "description": "The file owner",
                    "$ref": "#/definitions/User"
                },
                "name": {
                    "description": "File name",
                    "type": "string"
                },
                "id": {
                    "description": "The file unique identifier",
                    "type": "integer"
                },
                "flag": {
                    "description": "Bitwise flag to indicate whether the version has been quarantined. Possible numeric values are: 2: quarantined, 0: not quarantined ",
                    "type": "integer"
                },
                "archived": {
                    "description": "Idicates whether this version has been archived",
                    "type": "integer"
                },
                "objectId": {
                    "description": "The object ID",
                    "type": "integer"
                },
                "location": {
                    "description": "The file location of this version",
                    "type": "integer"
                },
                "created": {
                    "description": "The date this version is created",
                    "type": "string",
                    "format": "date"
                },
                "mime": {
                    "description": "The file mime type",
                    "type": "string"
                },
                "backend": {
                    "description": "Storage backend type s3, atmos, or acfs used to store the file",
                    "type": "string"
                },
                "file": {
                    "description": "The File entity",
                    "$ref": "#/definitions/File"
                }
            }
        },
        "Version.Put": {
            "description": "Class Version",
            "required": [
                "name"
            ],
            "properties": {
                "versionNumber": {
                    "description": "File version number",
                    "type": "integer"
                },
                "deleted": {
                    "description": "Indicates whether the version has been deleted",
                    "type": "boolean"
                },
                "fingerprint": {
                    "description": "The fingerprint that uniquely identifies the original file",
                    "type": "integer"
                },
                "clientCreated": {
                    "type": "integer"
                },
                "clientModified": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "size": {
                    "description": "The file size",
                    "type": "integer"
                },
                "user": {
                    "description": "The file owner",
                    "$ref": "#/definitions/User"
                },
                "name": {
                    "description": "File name",
                    "type": "string"
                },
                "id": {
                    "description": "The file unique identifier",
                    "type": "integer"
                },
                "flag": {
                    "description": "Bitwise flag to indicate whether the version has been quarantined. Possible numeric values are: 2: quarantined, 0: not quarantined ",
                    "type": "integer"
                },
                "archived": {
                    "description": "Idicates whether this version has been archived",
                    "type": "integer"
                },
                "objectId": {
                    "description": "The object ID",
                    "type": "integer"
                },
                "location": {
                    "description": "The file location of this version",
                    "type": "integer"
                },
                "created": {
                    "description": "The date this version is created",
                    "type": "string",
                    "format": "date"
                },
                "mime": {
                    "description": "The file mime type",
                    "type": "string"
                },
                "backend": {
                    "description": "Storage backend type s3, atmos, or acfs used to store the file",
                    "type": "string"
                },
                "file": {
                    "description": "The File entity",
                    "$ref": "#/definitions/File"
                }
            }
        },
        "UserNotification": {
            "description": "Class Notification",
            "required": [
                "userId"
            ],
            "properties": {
                "objectId": {
                    "description": "Id of folder included in Notification",
                    "type": "string"
                },
                "fileAdded": {
                    "description": "Number of files which are added to the Notification",
                    "type": "integer"
                },
                "commentAdded": {
                    "description": "Number of comments which are added to the Notification",
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                },
                "userId": {
                    "description": "ID of user who will send email notifications to end users",
                    "type": "string"
                }
            }
        },
        "UserNotification.Post": {
            "description": "Class Notification",
            "properties": {
                "fileAdded": {
                    "description": "Number of files which are added to the Notification",
                    "type": "integer"
                },
                "commentAdded": {
                    "description": "Number of comments which are added to the Notification",
                    "type": "integer"
                }
            }
        },
        "UserNotification.Put": {
            "description": "Class Notification",
            "properties": {
                "fileAdded": {
                    "description": "Number of files which are added to the Notification",
                    "type": "integer"
                },
                "commentAdded": {
                    "description": "Number of comments which are added to the Notification",
                    "type": "integer"
                }
            }
        },
        "MonthlyStorage": {
            "description": "Class MonthlyStorage",
            "properties": {
                "dateTime": {
                    "description": "Date",
                    "type": "string",
                    "format": "date"
                },
                "usage": {
                    "description": "Storage Usage",
                    "type": "integer"
                }
            }
        },
        "EmailPreviewLink": {
            "description": "Class EmailPreviewLink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "EmailPreviewLink.Post": {
            "description": "Class EmailPreviewLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "EmailPreviewLink.Put": {
            "description": "Class EmailPreviewLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "SyncedObject": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string"
                },
                "objectId": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserBasic"
                }
            }
        },
        "Package": {
            "type": "object",
            "properties": {
                "includeFingerprint": {
                    "type": "boolean"
                },
                "secure": {
                    "type": "boolean"
                },
                "notifySelf": {
                    "type": "boolean"
                },
                "attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Attachment"
                    }
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "downloadLink": {
                    "type": "string"
                },
                "selfCopy": {
                    "type": "boolean"
                },
                "location": {
                    "type": "integer",
                    "format": "int32"
                },
                "fileCount": {
                    "type": "string",
                    "readOnly": true
                },
                "acl": {
                    "type": "string"
                },
                "deleted": {
                    "type": "boolean"
                },
                "expire": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "Package.Post": {
            "description": "Class Package",
            "properties": {
                "selfCopy": {
                    "description": "Send a copy of the Email to yourself. True or False",
                    "type": "boolean"
                },
                "includeFingerprint": {
                    "description": "Include file fingerprint in email",
                    "type": "boolean"
                },
                "expire": {
                    "description": "Expiration date of package in hours",
                    "type": "string",
                    "format": "date-time"
                },
                "fileCount": {
                    "description": "Set number of files included in the Email package",
                    "type": "integer"
                },
                "deleted": {
                    "description": "Whether this Email package was deleted or not",
                    "type": "boolean"
                },
                "acl": {
                    "description": "Indicates whether the recipient is required to sign in (verify_recipient)\n     *                  or if they can download without signing in (no_auth)",
                    "type": "string",
                    "enum": [
                        "verify_recipient",
                        "no_auth",
                        "otp",
                        "internal",
                        "anyone_auth"
                    ]
                }
            }
        },
        "Package.Put": {
            "description": "Class Package",
            "properties": {
                "selfCopy": {
                    "description": "Send a copy of the Email to yourself. True or False",
                    "type": "boolean"
                },
                "includeFingerprint": {
                    "description": "Include file fingerprint in email",
                    "type": "boolean"
                },
                "expire": {
                    "description": "Expiration date of package in hours",
                    "type": "string",
                    "format": "date-time"
                },
                "fileCount": {
                    "description": "Set number of files included in the Email package",
                    "type": "integer"
                },
                "deleted": {
                    "description": "Whether this Email package was deleted or not",
                    "type": "boolean"
                },
                "acl": {
                    "description": "Indicates whether the recipient is required to sign in (verify_recipient)\n     *                  or if they can download without signing in (no_auth)",
                    "type": "string",
                    "enum": [
                        "verify_recipient",
                        "no_auth",
                        "otp",
                        "internal",
                        "anyone_auth"
                    ]
                }
            }
        },
        "UserAdminRole": {
            "description": "Class UserAdminRole",
            "required": [
                "userId"
            ],
            "properties": {
                "userId": {
                    "description": "User unique identifier",
                    "type": "string"
                },
                "adminRole": {
                    "description": "Admin role unique identifier. Possible values are: 1: System admin, 2: Application admin",
                    "type": "string"
                }
            }
        },
        "UserAdminRole.Post": {
            "description": "Class UserAdminRole",
            "properties": {
                "userId": {
                    "description": "User unique identifier",
                    "type": "string"
                },
                "adminRole": {
                    "description": "Admin role unique identifier. Possible values are: 1: System admin, 2: Application admin",
                    "type": "string"
                }
            }
        },
        "UserAdminRole.Put": {
            "description": "Class UserAdminRole",
            "properties": {
                "userId": {
                    "description": "User unique identifier",
                    "type": "string"
                },
                "adminRole": {
                    "description": "Admin role unique identifier. Possible values are: 1: System admin, 2: Application admin",
                    "type": "string"
                }
            }
        },
        "KPTransferStatus": {
            "description": "Class KPTransferStatus",
            "required": [
                "errCode",
                "fileHandle",
                "id",
                "kPObjectId",
                "transactionId",
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier",
                    "type": "string"
                },
                "transactionId": {
                    "description": "Transaction Id",
                    "type": "string"
                },
                "kPObjectId": {
                    "description": "KP Object Id",
                    "type": "string"
                },
                "fileHandle": {
                    "description": "File name",
                    "type": "string"
                },
                "userId": {
                    "description": "User Id",
                    "type": "string"
                },
                "errCode": {
                    "description": "Error Code",
                    "type": "string"
                },
                "status": {
                    "description": "Status of ec file transaction:\n                                            0 - received request,\n                                            1 - in progress,\n                                            2 - completed successfully,\n                                            99 - transfer failed",
                    "type": "string"
                },
                "avStatus": {
                    "description": "AV Status (allowed|disallowed|scanning)",
                    "type": "string"
                },
                "dlpStatus": {
                    "description": "DLP Status (allowed|disallowed|scanning)",
                    "type": "string"
                }
            }
        },
        "FileTypeGroup": {
            "description": "Class MediaTypeGroup",
            "properties": {
                "id": {
                    "description": "Unique identifier of Media Type Group",
                    "type": "integer"
                },
                "name": {
                    "description": "Media Type Group name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "CopyToEcJob": {
            "properties": {
                "id": {
                    "description": "Job identifier",
                    "type": "string"
                },
                "status": {
                    "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
                    "type": "string"
                },
                "errors": {
                    "description": "The list of errors occurred during job processing",
                    "type": "string"
                },
                "objectIds": {
                    "type": "string"
                }
            }
        },
        "SendMessage.Post": {
            "description": "Class SendMessage",
            "properties": {
                "to": {
                    "description": "Ids of To recipients",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cc": {
                    "description": "Ids of cc recipients",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bcc": {
                    "description": "Ids of bcc recipients",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subject": {
                    "description": "Email subject",
                    "type": "string"
                },
                "body": {
                    "description": "Email body",
                    "type": "string"
                },
                "secureBody": {
                    "type": "boolean"
                }
            }
        },
        "SendMessage.Put": {
            "description": "Class SendMessage",
            "properties": {
                "to": {
                    "description": "Ids of To recipients",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cc": {
                    "description": "Ids of cc recipients",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bcc": {
                    "description": "Ids of bcc recipients",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subject": {
                    "description": "Email subject",
                    "type": "string"
                },
                "body": {
                    "description": "Email body",
                    "type": "string"
                },
                "secureBody": {
                    "type": "boolean"
                }
            }
        },
        "KitepointPreview": {
            "description": "Class Preview",
            "properties": {
                "viewUrl": {
                    "description": "View Url",
                    "type": "string"
                },
                "status": {
                    "description": "Raw Url",
                    "type": "string"
                },
                "static": {
                    "description": "Static Url",
                    "type": "string"
                },
                "rawUrl": {
                    "description": "Raw Url",
                    "type": "string"
                }
            }
        },
        "MonthlyBandwidth": {
            "description": "Class MonthlyBandwidth",
            "properties": {
                "dateTime": {
                    "description": "Date",
                    "type": "string",
                    "format": "date"
                },
                "eventStatus": {
                    "description": "Event Status",
                    "type": "integer"
                },
                "usage": {
                    "description": "Bandwidth Usage",
                    "type": "integer"
                }
            }
        },
        "Source": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "sourceByUser": {
                    "type": "boolean"
                },
                "pinned": {
                    "type": "boolean"
                },
                "sourceUrl": {
                    "type": "string"
                },
                "sourceTypeId": {
                    "type": "integer",
                    "format": "int32"
                },
                "id": {
                    "type": "string"
                },
                "pinnedTime": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Source.Post": {
            "description": "Class Source",
            "required": [
                "name",
                "sourceUrl",
                "sourceTypeId"
            ],
            "properties": {
                "name": {
                    "description": "Source name",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "sourceUrl": {
                    "description": "Source URL",
                    "type": "string"
                },
                "sourceTypeId": {
                    "description": "Unique identifier of source type",
                    "type": "string"
                },
                "username": {
                    "description": "User name",
                    "type": "string"
                },
                "password": {
                    "description": "Password",
                    "type": "string"
                },
                "repository": {
                    "description": "Repository name",
                    "type": "string"
                }
            }
        },
        "Source.Put": {
            "description": "Class Source",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Source name",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "OtpRecipient": {
            "description": "Class OtpRecipient",
            "required": [
                "email",
                "type",
                "userId"
            ],
            "properties": {
                "userId": {
                    "description": "User ID for Recipient",
                    "type": "string"
                },
                "type": {
                    "description": "Type for Recipient. TO,CC,BCC",
                    "type": "integer"
                },
                "user": {
                    "description": "User entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "email": {
                    "description": "Recipient email address",
                    "type": "string"
                },
                "isDistributionList": {
                    "description": "Whether the recipient is a distribution list",
                    "type": "boolean"
                },
                "links": {
                    "type": "string"
                },
                "mobileNumber": {
                    "description": "Mobile number",
                    "type": "string"
                }
            }
        },
        "OtpRecipient.Post": {
            "description": "Class OtpRecipient",
            "required": [
                "userId"
            ],
            "properties": {
                "userId": {
                    "description": "User ID for Recipient",
                    "type": "integer"
                },
                "type": {
                    "description": "Type for Recipient.0=TO, 1=CC, 2=BCC",
                    "type": "integer",
                    "enum": [
                        "0",
                        "1",
                        "2"
                    ]
                },
                "read": {
                    "description": "True for read, false for email not read",
                    "type": "boolean"
                }
            }
        },
        "OtpRecipient.Put": {
            "description": "Class OtpRecipient",
            "required": [
                "userId"
            ],
            "properties": {
                "userId": {
                    "description": "User ID for Recipient",
                    "type": "integer"
                }
            }
        },
        "ClientNew": {
            "description": "Class ClientNew",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "description": "Unique Client identifier",
                    "type": "string"
                },
                "name": {
                    "description": "Client name",
                    "type": "string"
                },
                "description": {
                    "description": "Client description",
                    "type": "string"
                },
                "redirectUri": {
                    "description": "Redirect URL of this client",
                    "type": "string"
                },
                "scope": {
                    "description": "API entities which this client can access",
                    "type": "string"
                },
                "flag": {
                    "description": "Flags for Client. e.g. NO_CONSENT:1, DISABLED:2, HIDDEN:4, NO_EXPIRY_TOKEN :8",
                    "type": "integer"
                },
                "flow": {
                    "description": "Oauth flow for this client.\n                        e.g. AUTH_CODE:1, CLIENT_CREDENTIAL:2, SIGNATURE:4, REFRESH_TOKEN:8",
                    "type": "integer"
                },
                "signatureKey": {
                    "description": "Signature Key for client",
                    "type": "string"
                },
                "accessTokenLifetime": {
                    "description": "Life time for access token of client in hours. e.g. 5=5 hours",
                    "type": "integer"
                },
                "refreshTokenLifetime": {
                    "description": "Life time for refresh token of client in hours",
                    "type": "integer"
                },
                "whiteList": {
                    "description": "List of applications on the device that the client can call out to",
                    "type": "string"
                },
                "askPin": {
                    "description": "Whether PIN should be requested of user using this client",
                    "type": "integer"
                },
                "pinTimeout": {
                    "description": "Time out for pin of client in minutes",
                    "type": "integer"
                },
                "maxPinAttempts": {
                    "description": "Max attempts that user can try to enter PIN before wipe occurs",
                    "type": "integer"
                },
                "type": {
                    "description": "Client Type. e.g. ACCELLION:1, MOBILE:2, OUTLOOK:4, SYNC:8, SHAREPOINT:16, IMPORTED:32",
                    "type": "integer"
                },
                "touchId": {
                    "description": "Indicates whether touch Id is enabled",
                    "type": "boolean"
                },
                "clipboardEnabled": {
                    "description": "Indicates whether clipboard is enabled",
                    "type": "boolean"
                },
                "autoUpdate": {
                    "description": "Indicates whether auto update is enabled",
                    "type": "boolean"
                },
                "installer": {
                    "description": "Get the installer information",
                    "type": "string"
                },
                "emailMatch": {
                    "description": "Indicates whether external email match with kw email",
                    "type": "boolean"
                },
                "minVersion": {
                    "description": "Minimum API version of client",
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                },
                "clientSecret": {
                    "description": "Client Secret",
                    "type": "string"
                }
            }
        },
        "ClientNew.Post": {
            "description": "Class ClientNew",
            "required": [
                "description",
                "name",
                "redirectUri",
                "scope"
            ],
            "properties": {
                "name": {
                    "description": "Client name",
                    "type": "string"
                },
                "description": {
                    "description": "Client description",
                    "type": "string"
                },
                "redirectUri": {
                    "description": "Where the server send the code that client can redeem access token.\n                        e.g. https://HOST/rest/callback.html",
                    "type": "string"
                },
                "scope": {
                    "description": "API entities which this client can access",
                    "type": "string"
                },
                "signatureKey": {
                    "description": "Signature Key for client",
                    "type": "string"
                },
                "accessTokenLifetime": {
                    "description": "Life time for access token of client in hours. e.g. 5=5 hours",
                    "type": "integer"
                },
                "refreshTokenLifetime": {
                    "description": "Life time for refresh token of client in hours",
                    "type": "integer"
                }
            }
        },
        "ClientNew.Put": {
            "description": "Class ClientNew",
            "required": [
                "description",
                "name",
                "redirectUri",
                "scope"
            ],
            "properties": {
                "name": {
                    "description": "Client name",
                    "type": "string"
                },
                "description": {
                    "description": "Client description",
                    "type": "string"
                },
                "redirectUri": {
                    "description": "Where the server send the code that client can redeem access token.\n                        e.g. https://HOST/rest/callback.html",
                    "type": "string"
                },
                "scope": {
                    "description": "API entities which this client can access",
                    "type": "string"
                },
                "signatureKey": {
                    "description": "Signature Key for client",
                    "type": "string"
                },
                "accessTokenLifetime": {
                    "description": "Life time for access token of client in hours. e.g. 5=5 hours",
                    "type": "integer"
                },
                "refreshTokenLifetime": {
                    "description": "Life time for refresh token of client in hours",
                    "type": "integer"
                }
            }
        },
        "EmailEcItemJob": {
            "properties": {
                "id": {
                    "description": "Job identifier",
                    "type": "string"
                },
                "status": {
                    "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
                    "type": "string"
                },
                "errors": {
                    "description": "The list of errors occurred during job processing",
                    "type": "string"
                },
                "objectIds": {
                    "type": "string"
                }
            }
        },
        "Search": {
            "description": "Class Search",
            "required": [
                "emails",
                "files",
                "folders",
                "id"
            ],
            "properties": {
                "files": {
                    "description": "List of files",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/File"
                    }
                },
                "folders": {
                    "description": "List of folders",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Folder"
                    }
                },
                "emails": {
                    "description": "List of emails",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Email"
                    }
                },
                "metadata": {
                    "description": "Total files, folders, and emails count",
                    "$ref": "#/definitions/SearchMetadata"
                },
                "id": {
                    "description": "Unique search string",
                    "type": "string"
                },
                "fullTextSearch": {
                    "description": "Whether full text search is enabled",
                    "type": "boolean"
                }
            }
        },
        "MemberGroup": {
            "description": "Class MemberGroup",
            "required": [
                "groupId",
                "objectId",
                "roleId"
            ],
            "properties": {
                "objectId": {
                    "description": "Unique identifier of object",
                    "type": "string"
                },
                "roleId": {
                    "description": "Unique identifier of role",
                    "type": "integer"
                },
                "group": {
                    "description": "LdapGroup entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/LdapGroup"
                },
                "role": {
                    "description": "Role entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Role"
                },
                "inheritRoleId": {
                    "description": "Role Id inherit from parent (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "integer"
                },
                "allowedFolderRoleId": {
                    "description": "Allowed Folder Role Id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "links": {
                    "type": "string"
                },
                "groupId": {
                    "description": "Unique identifier of group",
                    "type": "integer"
                },
                "user": {
                    "description": "User entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/User"
                }
            }
        },
        "MemberGroup.Post": {
            "description": "Class MemberGroup",
            "required": [
                "groupId",
                "roleId"
            ],
            "properties": {
                "roleId": {
                    "description": "Unique identifier of role",
                    "type": "integer"
                },
                "groupId": {
                    "description": "Unique identifier of group",
                    "type": "integer"
                }
            }
        },
        "MemberGroup.Put": {
            "description": "Class MemberGroup",
            "required": [
                "roleId"
            ],
            "properties": {
                "roleId": {
                    "description": "Unique identifier of role",
                    "type": "integer"
                },
                "notifyFileAdded": {
                    "type": "boolean"
                }
            }
        },
        "MailLink": {
            "description": "Class MailLink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "MailLink.Post": {
            "description": "Class MailLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "MailLink.Put": {
            "description": "Class MailLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "ActivityAdmin": {
            "description": "Class Activity",
            "required": [
                "event",
                "id",
                "message",
                "type",
                "user"
            ],
            "properties": {
                "created": {
                    "description": "Activity creation date",
                    "type": "string",
                    "format": "date"
                },
                "data": {
                    "description": "Contains information about affected entities",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "permissions": {
                    "description": "List of action allowed for user on Object in activity",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "event": {
                    "description": "Activity event name",
                    "type": "string"
                },
                "id": {
                    "description": "Unique Activity identifier",
                    "type": "integer"
                },
                "message": {
                    "description": "User-friendly message",
                    "type": "string"
                },
                "type": {
                    "description": "Activity type",
                    "type": "string"
                },
                "user": {
                    "description": "Direct user's info",
                    "type": "string"
                },
                "successful": {
                    "description": "Successful or failed",
                    "type": "integer"
                },
                "object": {
                    "description": "Contains information about the effected file or folder",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "directUser": {
                    "description": "Direct user",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "inDirectUsers": {
                    "description": "Direct user",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "UserBasicInfo": {
            "required": [
                "email",
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "description": "The unique identifier of the user",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the user",
                    "type": "string"
                },
                "email": {
                    "description": "The user's email",
                    "type": "string"
                },
                "profileIcon": {
                    "description": "User profile icon link",
                    "type": "string"
                }
            }
        },
        "UserBasicInfo.Post": {
            "required": [
                "email"
            ],
            "properties": {
                "name": {
                    "description": "The name of the user",
                    "type": "string"
                },
                "email": {
                    "description": "The user's email",
                    "type": "string"
                }
            }
        },
        "UserBasicInfo.Put": {
            "properties": {
                "name": {
                    "description": "The name of the user",
                    "type": "string"
                }
            }
        },
        "MoveEcItemJob": {
            "properties": {
                "id": {
                    "description": "Job identifier",
                    "type": "string"
                },
                "status": {
                    "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
                    "type": "string"
                },
                "errors": {
                    "description": "The list of errors occurred during job processing",
                    "type": "string"
                },
                "objectIds": {
                    "type": "string"
                }
            }
        },
        "UploadChunk.Post": {
            "description": "Class FileUpload",
            "properties": {
                "index": {
                    "type": "integer"
                },
                "compressionMode": {
                    "type": "string"
                },
                "compressionSize": {
                    "type": "integer"
                },
                "originalSize": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "lastChunk": {
                    "type": "integer"
                }
            }
        },
        "UploadChunk.Put": {
            "description": "Class FileUpload",
            "properties": {
                "index": {
                    "type": "integer"
                },
                "lastChunk": {
                    "type": "integer"
                }
            }
        },
        "Bandwidth": {
            "description": "Class Bandwidth",
            "properties": {
                "dateTime": {
                    "description": "Date",
                    "type": "string",
                    "format": "date"
                },
                "eventStatus": {
                    "description": "Event Status",
                    "type": "integer"
                },
                "usage": {
                    "description": "Bandwidth Usage",
                    "type": "integer"
                }
            }
        },
        "FileAddedNotificationJob": {
            "properties": {
                "id": {
                    "description": "Job identifier",
                    "type": "string"
                },
                "status": {
                    "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
                    "type": "string"
                },
                "errors": {
                    "description": "The list of errors occurred during job processing",
                    "type": "string"
                },
                "objectIds": {
                    "type": "string"
                }
            }
        },
        "AcfsConfig": {
            "description": "Class AcfsConfig",
            "properties": {
                "active": {
                    "description": "Is upload server active or not",
                    "type": "integer"
                },
                "uploadChunkMax": {
                    "description": "Upload chunk max size",
                    "type": "integer"
                }
            }
        },
        "MediaType": {
            "description": "Class MediaType",
            "properties": {
                "id": {
                    "description": "Unique identifier of Media Type",
                    "type": "integer"
                },
                "mediaType": {
                    "description": "Media Type",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Contact": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactItem"
                    }
                },
                "created": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "modified": {
                    "type": "string"
                }
            }
        },
        "Contact.Post": {
            "description": "Class Contact",
            "required": [
                "items",
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Contact name",
                    "type": "string"
                },
                "items": {
                    "description": "List of emails contained by Contact",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactItem.Post"
                    }
                }
            }
        },
        "Contact.Put": {
            "description": "Class Contact",
            "required": [
                "items",
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Contact name",
                    "type": "string"
                },
                "items": {
                    "description": "List of emails contained by Contact",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactItem.Post"
                    }
                }
            }
        },
        "MediaTypeItem": {
            "description": "Class MediaTypeItem",
            "required": [
                "id",
                "mediaType"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of Media Type",
                    "type": "integer"
                },
                "mediaType": {
                    "description": "Media Type",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "BaseObject": {
            "description": "Class Object",
            "required": [
                "id",
                "name",
                "parentId",
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of object",
                    "type": "string"
                },
                "created": {
                    "description": "Object creation date",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted": {
                    "description": "Indicates that object is deleted",
                    "type": "boolean"
                },
                "permDeleted": {
                    "description": "Indicates that object is permanently deleted",
                    "type": "boolean"
                },
                "expire": {
                    "description": "Object expiry date",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "Object modification date",
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Object name",
                    "type": "string"
                },
                "parentId": {
                    "description": "Parent Folder identifier",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of Object creator",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Folder"
                },
                "permalink": {
                    "description": "Object permalink",
                    "type": "string"
                },
                "creator": {
                    "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "vendorDocId": {
                    "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "vendorDocName": {
                    "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "source": {
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "MemberBase": {
            "description": "Class MemberBase",
            "required": [
                "objectId",
                "roleId"
            ],
            "properties": {
                "objectId": {
                    "description": "Unique identifier of object",
                    "type": "string"
                },
                "roleId": {
                    "description": "Unique identifier of role",
                    "type": "integer"
                },
                "user": {
                    "description": "User entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/User"
                },
                "group": {
                    "description": "LdapGroup entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/LdapGroup"
                },
                "role": {
                    "description": "Role entity (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Role"
                },
                "inheritRoleId": {
                    "description": "Role Id inherit from parent (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "integer"
                },
                "allowedFolderRoleId": {
                    "description": "Allowed Folder Role Id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "MemberBase.Post": {
            "description": "Class MemberBase",
            "required": [
                "roleId"
            ],
            "properties": {
                "roleId": {
                    "description": "Unique identifier of role",
                    "type": "integer"
                }
            }
        },
        "MemberBase.Put": {
            "description": "Class MemberBase",
            "required": [
                "roleId"
            ],
            "properties": {
                "roleId": {
                    "description": "Unique identifier of role",
                    "type": "integer"
                },
                "notifyFileAdded": {
                    "type": "boolean"
                }
            }
        },
        "RefreshToken": {
            "description": "Class RefreshToken",
            "required": [
                "refreshToken",
                "scope"
            ],
            "properties": {
                "userId": {
                    "description": "Unique identifier of User",
                    "type": "integer"
                },
                "expire": {
                    "description": "Token expiry date",
                    "type": "string",
                    "format": "date-time"
                },
                "scope": {
                    "description": "Scope",
                    "type": "string"
                },
                "refreshToken": {
                    "description": "Refresh Token",
                    "type": "string"
                }
            }
        },
        "PasswordPolicy": {
            "description": "Class PasswordPolicy",
            "required": [
                "allowAutoFill",
                "enabled",
                "minCharacters",
                "minDigits",
                "minLowerCharacters",
                "minSpecialCharacters",
                "minUpperCharacters"
            ],
            "properties": {
                "allowAutoFill": {
                    "description": "Return whether browsers are allowed to fill in password automatically.",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "Return whether password policy is enabled.",
                    "type": "boolean"
                },
                "minCharacters": {
                    "description": "Minimum length of password.",
                    "type": "integer"
                },
                "minDigits": {
                    "description": "Minimum numeric characters.",
                    "type": "integer"
                },
                "minLowerCharacters": {
                    "description": "Minimum lower case alphabets.",
                    "type": "integer"
                },
                "minSpecialCharacters": {
                    "description": "Minimum special characters.",
                    "type": "integer"
                },
                "minUpperCharacters": {
                    "description": "Minimum upper case alphabets.",
                    "type": "integer"
                }
            }
        },
        "ConnectorOAuthLink": {
            "description": "Class ConnectorOAuthLink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "ConnectorOAuthLink.Post": {
            "description": "Class ConnectorOAuthLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "ConnectorOAuthLink.Put": {
            "description": "Class ConnectorOAuthLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "File": {
            "type": "object",
            "properties": {
                "secure": {
                    "type": "boolean"
                },
                "avStatus": {
                    "type": "string"
                },
                "modifier": {
                    "$ref": "#/definitions/UserBasic"
                },
                "parentId": {
                    "type": "string"
                },
                "pathIds": {
                    "type": "string"
                },
                "sharedBy": {
                    "$ref": "#/definitions/UserBasic"
                },
                "clientModified": {
                    "type": "string"
                },
                "fingerprints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Fingerprint"
                    }
                },
                "adminQuarantineStatus": {
                    "type": "string"
                },
                "vendorDocName": {
                    "type": "string"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Member"
                    }
                },
                "deleted": {
                    "type": "boolean"
                },
                "permalink": {
                    "type": "string"
                },
                "mime": {
                    "type": "string"
                },
                "lockUser": {
                    "$ref": "#/definitions/UserBasic"
                },
                "isShared": {
                    "type": "boolean"
                },
                "source": {
                    "type": "integer",
                    "format": "int32"
                },
                "parent": {
                    "$ref": "#/definitions/Folder"
                },
                "locked": {
                    "type": "boolean"
                },
                "permDeleted": {
                    "type": "boolean"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tag"
                    }
                },
                "id": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "pushedObject": {
                    "$ref": "#/definitions/PushedObject"
                },
                "path": {
                    "type": "string"
                },
                "pushed": {
                    "type": "boolean"
                },
                "clientCreated": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "modified": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "overriddenExpire": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "creator": {
                    "$ref": "#/definitions/UserBasic"
                },
                "dlpStatus": {
                    "type": "string"
                },
                "sharedTime": {
                    "type": "string"
                },
                "wopiapp": {
                    "$ref": "#/definitions/MobileInfo"
                },
                "name": {
                    "type": "string"
                },
                "vendorDocId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "lastModifiedBy": {
                    "$ref": "#/definitions/UserBasic"
                },
                "expire": {
                    "type": "string"
                }
            }
        },
        "File.Post": {
            "description": "Class File",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "File name",
                    "type": "string"
                }
            }
        },
        "File.Put": {
            "description": "Class File",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "File name",
                    "type": "string"
                },
                "expire": {
                    "description": "The file expiration date.",
                    "type": "string"
                },
                "replace": {
                    "description": "Replace the file if file with same name exists",
                    "type": "string"
                }
            }
        },
        "ECPreviewStatus": {
            "description": "Class ECPreviewStatus",
            "required": [
                "eCObjectUUId",
                "transactionId"
            ],
            "properties": {
                "transactionId": {
                    "description": "Transaction Id",
                    "type": "string"
                },
                "eCObjectUUId": {
                    "description": "EC Object Id",
                    "type": "string"
                }
            }
        },
        "AvailableLdapGroup": {
            "description": "Class LdapGroup",
            "properties": {
                "name": {
                    "description": "LDAP group name",
                    "type": "string"
                },
                "dn": {
                    "description": "Domain name",
                    "type": "string"
                }
            }
        },
        "CommentLink": {
            "description": "Class CommentLink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "CommentLink.Post": {
            "description": "Class CommentLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "CommentLink.Put": {
            "description": "Class CommentLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "PasswordResetLink": {
            "description": "Class RequestFileLink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "PasswordResetLink.Post": {
            "description": "Class RequestFileLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "PasswordResetLink.Put": {
            "description": "Class RequestFileLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "GroupNotification": {
            "description": "Class Notification",
            "properties": {
                "objectId": {
                    "description": "Id of folder included in Notification",
                    "type": "string"
                },
                "fileAdded": {
                    "description": "Number of files which are added to the Notification",
                    "type": "integer"
                },
                "commentAdded": {
                    "description": "Number of comments which are added to the Notification",
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "GroupNotification.Post": {
            "description": "Class Notification",
            "properties": {
                "fileAdded": {
                    "description": "Number of files which are added to the Notification",
                    "type": "integer"
                },
                "commentAdded": {
                    "description": "Number of comments which are added to the Notification",
                    "type": "integer"
                }
            }
        },
        "GroupNotification.Put": {
            "description": "Class Notification",
            "properties": {
                "fileAdded": {
                    "description": "Number of files which are added to the Notification",
                    "type": "integer"
                },
                "commentAdded": {
                    "description": "Number of comments which are added to the Notification",
                    "type": "integer"
                }
            }
        },
        "FeaturesList": {
            "description": "Class FeaturesList",
            "required": [
                "folderCreate",
                "storageQuota"
            ],
            "properties": {
                "allowSftp": {
                    "description": "Whether we should allow SFTP or not.",
                    "type": "boolean"
                },
                "maxStorage": {
                    "description": "Max storage in bytes",
                    "type": "integer"
                },
                "linkExpiration": {
                    "description": "Link expiration date in days",
                    "type": "integer"
                },
                "maxLinkExpiration": {
                    "description": "Max time period of link expiration in hours",
                    "type": "integer"
                },
                "setExpirationLower": {
                    "description": "Enable user to set expiration date of the file they are sending",
                    "type": "boolean"
                },
                "sendExternal": {
                    "description": "Allow user to send files to external users",
                    "type": "boolean"
                },
                "acNoAuth": {
                    "description": "Allow user to send file to a user without their having to authenticate",
                    "type": "boolean"
                },
                "folderCreate": {
                    "description": "User can create folder",
                    "type": "integer"
                },
                "storageQuota": {
                    "description": "User Storage quota",
                    "type": "integer"
                },
                "ldapMapping": {
                    "description": "LDAP Mapping value to determine the user profile type",
                    "type": "string"
                },
                "acVerifyRecipient": {
                    "description": "Who can download file via the secure link",
                    "type": "boolean"
                },
                "acl": {
                    "description": "ACL",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "defaultAcl": {
                    "description": "Default ACL",
                    "type": "string"
                },
                "mobileSyncItemsLimit": {
                    "description": "Maximum files amount allowed to keep in mobile sync list",
                    "type": "integer"
                },
                "personalFolder": {
                    "description": "User can have personal folder",
                    "type": "boolean"
                },
                "excludedFileExtensions": {
                    "description": "Get list of excluded file extensions",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fileFilterExclusionGroups": {
                    "description": "Get list of excluded file groups",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fileFilterCustomFileTypes": {
                    "description": "Get list of custom file types",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secureMessageBody": {
                    "type": "string"
                },
                "secureMessageBodyDefault": {
                    "type": "boolean"
                },
                "secureContainerRequired": {
                    "type": "boolean"
                },
                "returnReceipt": {
                    "type": "string"
                },
                "returnReceiptDefault": {
                    "type": "boolean"
                },
                "selfCopy": {
                    "type": "string"
                },
                "selfCopyDefault": {
                    "type": "boolean"
                },
                "includeFingerprint": {
                    "type": "string"
                },
                "includeFingerprintDefault": {
                    "type": "boolean"
                },
                "requestFile": {
                    "type": "boolean"
                },
                "requestFileAllowViewableFile": {
                    "type": "boolean"
                },
                "requestFileUploadAuth": {
                    "type": "string"
                },
                "requestFileAuthDefault": {
                    "type": "string"
                },
                "requestFileExpiration": {
                    "type": "integer"
                },
                "requestFileExpirationUserDecide": {
                    "type": "boolean"
                },
                "requestFileExpirationMax": {
                    "type": "integer"
                },
                "requestFileUploadLimit": {
                    "type": "integer"
                },
                "requestFileUploadLimitUserDecide": {
                    "type": "boolean"
                },
                "requestFileUploadsMax": {
                    "type": "integer"
                },
                "twoFactorAuth": {
                    "type": "string"
                },
                "inactiveExpiration": {
                    "type": "integer"
                },
                "userCanReactivate": {
                    "type": "string"
                },
                "cleanupInactiveAccount": {
                    "type": "boolean"
                },
                "withdrawInactiveAccountFileLinks": {
                    "type": "boolean"
                },
                "allowCollaboration": {
                    "description": "Whether we should allow Collaboration and Shared Folders or not",
                    "type": "boolean"
                },
                "allowLeavingSharedFolder": {
                    "description": "Whether we should allow Collaboration and Shared Folders or not",
                    "type": "boolean"
                },
                "sendFileLimit": {
                    "description": "Upper limit allowed for number of attachments per mail.",
                    "type": "integer"
                },
                "remoteWipe": {
                    "type": "boolean"
                },
                "deleteUnsharedData": {
                    "type": "boolean"
                },
                "retainData": {
                    "type": "boolean"
                },
                "retainPermissionToSharedData": {
                    "type": "boolean"
                },
                "folderExpirationLimit": {
                    "description": "Get profile max folder expiration",
                    "type": "integer"
                },
                "fileLifetime": {
                    "description": "Get profile max file lifetime",
                    "type": "integer"
                }
            }
        },
        "FeaturesList.Post": {
            "description": "Class FeaturesList",
            "properties": {
                "allowSftp": {
                    "description": "Whether we should allow SFTP or not.",
                    "type": "boolean"
                },
                "maxStorage": {
                    "description": "Max storage in bytes",
                    "type": "integer"
                },
                "storageQuota": {
                    "description": "Maximum storage space that user is entitled to",
                    "type": "integer"
                },
                "setExpirationLower": {
                    "description": "Allow to modify file secure link expiration",
                    "type": "boolean"
                },
                "sendExternal": {
                    "description": "Allow sending files to external users",
                    "type": "integer"
                },
                "linkExpiration": {
                    "description": "Link expiration date in days",
                    "type": "integer"
                },
                "ldapMapping": {
                    "description": "LDAP Mapping value to determine the user profile type",
                    "type": "string"
                },
                "folderCreate": {
                    "description": "Allow to create top level folders",
                    "type": "integer"
                },
                "maxLinkExpiration": {
                    "description": "Upper limit allowed for secure link expiration",
                    "type": "integer"
                },
                "acNoAuth": {
                    "description": "Who can download file via the secure link",
                    "type": "boolean"
                },
                "acVerifyRecipient": {
                    "description": "Who can download file via the secure link",
                    "type": "boolean"
                },
                "excludedFileExtensions": {
                    "description": "Set excluded file extensions",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fileFilterExclusionGroups": {
                    "description": "Set excluded file groups",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fileFilterCustomFileTypes": {
                    "description": "Set custom file types",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secureMessageBody": {
                    "type": "string"
                },
                "secureMessageBodyDefault": {
                    "type": "boolean"
                },
                "secureContainerRequired": {
                    "type": "boolean"
                },
                "returnReceipt": {
                    "type": "string"
                },
                "returnReceiptDefault": {
                    "type": "boolean"
                },
                "selfCopy": {
                    "type": "string"
                },
                "selfCopyDefault": {
                    "type": "boolean"
                },
                "includeFingerprint": {
                    "type": "string"
                },
                "includeFingerprintDefault": {
                    "type": "boolean"
                },
                "requestFile": {
                    "type": "boolean"
                },
                "requestFileAllowViewableFile": {
                    "type": "boolean"
                },
                "requestFileUploadAuth": {
                    "type": "string"
                },
                "requestFileAuthDefault": {
                    "type": "string"
                },
                "requestFileExpiration": {
                    "type": "integer"
                },
                "requestFileExpirationUserDecide": {
                    "type": "boolean"
                },
                "requestFileExpirationMax": {
                    "type": "integer"
                },
                "requestFileUploadLimit": {
                    "type": "integer"
                },
                "requestFileUploadLimitUserDecide": {
                    "type": "boolean"
                },
                "requestFileUploadsMax": {
                    "type": "integer"
                },
                "twoFactorAuth": {
                    "type": "string"
                },
                "inactiveExpiration": {
                    "type": "integer"
                },
                "userCanReactivate": {
                    "type": "string"
                },
                "cleanupInactiveAccount": {
                    "type": "boolean"
                },
                "withdrawInactiveAccountFileLinks": {
                    "type": "boolean"
                },
                "allowCollaboration": {
                    "description": "Whether we should allow Collaboration and Shared Folders or not",
                    "type": "boolean"
                },
                "sendFileLimit": {
                    "description": "Upper limit allowed for number of attachments per mail.",
                    "type": "integer"
                },
                "remoteWipe": {
                    "description": "Disallow Collaboration: Wipe remote devices",
                    "type": "boolean"
                },
                "deleteUnsharedData": {
                    "description": "Disallow Collaboration: Delete all data owned by the user",
                    "type": "boolean"
                },
                "retainData": {
                    "description": "Disallow Collaboration: retain the data owned by the user",
                    "type": "boolean"
                },
                "retainToUser": {
                    "description": "Disallow Collaboration: re-assign the data to the following user",
                    "type": "string"
                },
                "retainPermissionToSharedData": {
                    "description": "Disallow Collaboration: retain all permission to shared data",
                    "type": "boolean"
                }
            }
        },
        "FeaturesList.Put": {
            "description": "Class FeaturesList",
            "properties": {
                "allowSftp": {
                    "description": "Whether we should allow SFTP or not.",
                    "type": "boolean"
                },
                "maxStorage": {
                    "description": "Max storage in bytes",
                    "type": "integer"
                },
                "storageQuota": {
                    "description": "Maximum storage space that user is entitled to",
                    "type": "integer"
                },
                "setExpirationLower": {
                    "description": "Allow to modify file secure link expiration",
                    "type": "boolean"
                },
                "sendExternal": {
                    "description": "Allow sending files to external users",
                    "type": "integer"
                },
                "linkExpiration": {
                    "description": "Link expiration date in days",
                    "type": "integer"
                },
                "ldapMapping": {
                    "description": "LDAP Mapping value to determine the user profile type",
                    "type": "string"
                },
                "folderCreate": {
                    "description": "Allow to create top level folders",
                    "type": "integer"
                },
                "maxLinkExpiration": {
                    "description": "Upper limit allowed for secure link expiration",
                    "type": "integer"
                },
                "acNoAuth": {
                    "description": "Who can download file via the secure link",
                    "type": "boolean"
                },
                "acVerifyRecipient": {
                    "description": "Who can download file via the secure link",
                    "type": "boolean"
                },
                "excludedFileExtensions": {
                    "description": "Set excluded file extensions",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fileFilterExclusionGroups": {
                    "description": "Set excluded file groups",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fileFilterCustomFileTypes": {
                    "description": "Set custom file types",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secureMessageBody": {
                    "type": "string"
                },
                "secureMessageBodyDefault": {
                    "type": "boolean"
                },
                "secureContainerRequired": {
                    "type": "boolean"
                },
                "returnReceipt": {
                    "type": "string"
                },
                "returnReceiptDefault": {
                    "type": "boolean"
                },
                "selfCopy": {
                    "type": "string"
                },
                "selfCopyDefault": {
                    "type": "boolean"
                },
                "includeFingerprint": {
                    "type": "string"
                },
                "includeFingerprintDefault": {
                    "type": "boolean"
                },
                "requestFile": {
                    "type": "boolean"
                },
                "requestFileAllowViewableFile": {
                    "type": "boolean"
                },
                "requestFileUploadAuth": {
                    "type": "string"
                },
                "requestFileAuthDefault": {
                    "type": "string"
                },
                "requestFileExpiration": {
                    "type": "integer"
                },
                "requestFileExpirationUserDecide": {
                    "type": "boolean"
                },
                "requestFileExpirationMax": {
                    "type": "integer"
                },
                "requestFileUploadLimit": {
                    "type": "integer"
                },
                "requestFileUploadLimitUserDecide": {
                    "type": "boolean"
                },
                "requestFileUploadsMax": {
                    "type": "integer"
                },
                "twoFactorAuth": {
                    "type": "string"
                },
                "inactiveExpiration": {
                    "type": "integer"
                },
                "userCanReactivate": {
                    "type": "string"
                },
                "cleanupInactiveAccount": {
                    "type": "boolean"
                },
                "withdrawInactiveAccountFileLinks": {
                    "type": "boolean"
                },
                "allowCollaboration": {
                    "description": "Whether we should allow Collaboration and Shared Folders or not",
                    "type": "boolean"
                },
                "sendFileLimit": {
                    "description": "Upper limit allowed for number of attachments per mail.",
                    "type": "integer"
                },
                "remoteWipe": {
                    "description": "Disallow Collaboration: Wipe remote devices",
                    "type": "boolean"
                },
                "deleteUnsharedData": {
                    "description": "Disallow Collaboration: Delete all data owned by the user",
                    "type": "boolean"
                },
                "retainData": {
                    "description": "Disallow Collaboration: retain the data owned by the user",
                    "type": "boolean"
                },
                "retainToUser": {
                    "description": "Disallow Collaboration: re-assign the data to the following user",
                    "type": "string"
                },
                "retainPermissionToSharedData": {
                    "description": "Disallow Collaboration: retain all permission to shared data",
                    "type": "boolean"
                }
            }
        },
        "Language": {
            "description": "Class Language",
            "properties": {
                "id": {
                    "description": "Language unique identifier",
                    "type": "integer"
                },
                "name": {
                    "description": "Language name",
                    "type": "string"
                },
                "symbol": {
                    "description": "Language symbol",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Tenant": {
            "description": "Class Tenant",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "description": "Tenant unique identifier",
                    "type": "integer"
                },
                "name": {
                    "description": "Tenant name",
                    "type": "integer"
                },
                "hostname": {
                    "description": "Tenant Hostname",
                    "type": "string"
                },
                "created": {
                    "description": "Tenant Creation Date",
                    "type": "string",
                    "format": "date"
                },
                "state": {
                    "description": "Status\\State of Tenant",
                    "type": "string"
                },
                "customerId": {
                    "description": "Customer ID",
                    "type": "string"
                },
                "deploymentId": {
                    "description": "Deployment ID",
                    "type": "string"
                },
                "expires": {
                    "description": "Usage Expiry",
                    "type": "string",
                    "format": "date"
                },
                "storageLimit": {
                    "description": "Monthly storage usage limit",
                    "type": "integer"
                },
                "bandwidthLimit": {
                    "description": "Monthly bandwidth usage limit",
                    "type": "integer"
                },
                "primaryAdminEmail": {
                    "description": "Primary admin email ID",
                    "type": "string"
                },
                "licensedUsersCount": {
                    "description": "Number of licensed users",
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Tenant.Put": {
            "description": "Class Tenant",
            "properties": {
                "state": {
                    "description": "Status\\State of Tenant",
                    "type": "string",
                    "enum": [
                        "run",
                        "suspend"
                    ]
                }
            }
        },
        "ECUserSource": {
            "description": "Class ECUserSource",
            "required": [
                "id",
                "name",
                "sourceId",
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of EC Source",
                    "type": "string"
                },
                "name": {
                    "description": "EC source name",
                    "type": "string"
                },
                "userId": {
                    "description": "User Id",
                    "type": "string"
                },
                "sourceId": {
                    "description": "Source Id",
                    "type": "string"
                }
            }
        },
        "Client": {
            "description": "Class Client",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "description": "Unique Client identifier",
                    "type": "string"
                },
                "name": {
                    "description": "Client name",
                    "type": "string"
                },
                "description": {
                    "description": "Client description",
                    "type": "string"
                },
                "redirectUri": {
                    "description": "Redirect URL of this client",
                    "type": "string"
                },
                "scope": {
                    "description": "API entities which this client can access",
                    "type": "string"
                },
                "flag": {
                    "description": "Flags for Client. e.g. NO_CONSENT:1, DISABLED:2, HIDDEN:4, NO_EXPIRY_TOKEN :8",
                    "type": "integer"
                },
                "flow": {
                    "description": "Oauth flow for this client.\n                        e.g. AUTH_CODE:1, CLIENT_CREDENTIAL:2, SIGNATURE:4, REFRESH_TOKEN:8",
                    "type": "integer"
                },
                "signatureKey": {
                    "description": "Signature Key for client",
                    "type": "string"
                },
                "accessTokenLifetime": {
                    "description": "Life time for access token of client in hours. e.g. 5=5 hours",
                    "type": "integer"
                },
                "refreshTokenLifetime": {
                    "description": "Life time for refresh token of client in hours",
                    "type": "integer"
                },
                "whiteList": {
                    "description": "List of applications on the device that the client can call out to",
                    "type": "string"
                },
                "askPin": {
                    "description": "Whether PIN should be requested of user using this client",
                    "type": "integer"
                },
                "pinTimeout": {
                    "description": "Time out for pin of client in minutes",
                    "type": "integer"
                },
                "maxPinAttempts": {
                    "description": "Max attempts that user can try to enter PIN before wipe occurs",
                    "type": "integer"
                },
                "type": {
                    "description": "Client Type. e.g. ACCELLION:1, MOBILE:2, OUTLOOK:4, SYNC:8, SHAREPOINT:16, IMPORTED:32",
                    "type": "integer"
                },
                "touchId": {
                    "description": "Indicates whether touch Id is enabled",
                    "type": "boolean"
                },
                "clipboardEnabled": {
                    "description": "Indicates whether clipboard is enabled",
                    "type": "boolean"
                },
                "autoUpdate": {
                    "description": "Indicates whether auto update is enabled",
                    "type": "boolean"
                },
                "installer": {
                    "description": "Get the installer information",
                    "type": "string"
                },
                "emailMatch": {
                    "description": "Indicates whether external email match with kw email",
                    "type": "boolean"
                },
                "minVersion": {
                    "description": "Minimum API version of client",
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Client.Post": {
            "description": "Class Client",
            "required": [
                "name",
                "description",
                "redirectUri",
                "scope"
            ],
            "properties": {
                "name": {
                    "description": "Client name",
                    "type": "string"
                },
                "description": {
                    "description": "Client description",
                    "type": "string"
                },
                "redirectUri": {
                    "description": "Where the server send the code that client can redeem access token.\n                        e.g. https://HOST/rest/callback.html",
                    "type": "string"
                },
                "scope": {
                    "description": "API entities which this client can access",
                    "type": "string"
                },
                "signatureKey": {
                    "description": "Signature Key for client",
                    "type": "string"
                },
                "accessTokenLifetime": {
                    "description": "Life time for access token of client in hours. e.g. 5=5 hours",
                    "type": "integer"
                },
                "refreshTokenLifetime": {
                    "description": "Life time for refresh token of client in hours",
                    "type": "integer"
                }
            }
        },
        "Client.Put": {
            "description": "Class Client",
            "required": [
                "name",
                "description",
                "redirectUri",
                "scope"
            ],
            "properties": {
                "name": {
                    "description": "Client name",
                    "type": "string"
                },
                "description": {
                    "description": "Client description",
                    "type": "string"
                },
                "redirectUri": {
                    "description": "Where the server send the code that client can redeem access token.\n                        e.g. https://HOST/rest/callback.html",
                    "type": "string"
                },
                "scope": {
                    "description": "API entities which this client can access",
                    "type": "string"
                },
                "signatureKey": {
                    "description": "Signature Key for client",
                    "type": "string"
                },
                "accessTokenLifetime": {
                    "description": "Life time for access token of client in hours. e.g. 5=5 hours",
                    "type": "integer"
                },
                "refreshTokenLifetime": {
                    "description": "Life time for refresh token of client in hours",
                    "type": "integer"
                }
            }
        },
        "Role": {
            "type": "object",
            "properties": {
                "rank": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Role rank"
                },
                "id": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Role ID"
                },
                "name": {
                    "type": "string",
                    "description": "Role name"
                },
                "type": {
                    "type": "string",
                    "description": "Role type"
                }
            }
        },
        "Favorite": {
            "description": "Class Favorite",
            "required": [
                "id",
                "objectId",
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of Favorite",
                    "type": "integer"
                },
                "objectId": {
                    "description": "Unique identifier of Object",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of User",
                    "type": "string"
                },
                "creator": {
                    "description": "Creator info (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "object": {
                    "description": "Object (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Folder"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "Favorite.Post": {
            "description": "Class Favorite",
            "required": [
                "objectId"
            ],
            "properties": {
                "objectId": {
                    "description": "Unique identifier of Object",
                    "type": "integer"
                }
            }
        },
        "Favorite.Put": {
            "description": "Class Favorite",
            "required": [
                "objectId"
            ],
            "properties": {
                "objectId": {
                    "description": "Unique identifier of Object",
                    "type": "integer"
                }
            }
        },
        "RequestFile": {
            "type": "object",
            "properties": {
                "requireAuth": {
                    "type": "boolean"
                },
                "email": {
                    "$ref": "#/definitions/Mail2"
                },
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "remaining": {
                    "type": "integer",
                    "format": "int32"
                },
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "ref": {
                    "type": "string"
                },
                "uploadLink": {
                    "type": "string"
                },
                "recipient": {
                    "$ref": "#/definitions/UserBasic1"
                },
                "config": {
                    "$ref": "#/definitions/RequestFileConfig"
                },
                "requestor": {
                    "$ref": "#/definitions/UserBasic1"
                },
                "fileLimit": {
                    "type": "integer",
                    "format": "int32"
                },
                "expire": {
                    "type": "string"
                }
            }
        },
        "RequestFile.Post": {
            "description": "Class RequestFile",
            "required": [
                "to"
            ],
            "properties": {
                "to": {
                    "description": "Email recipients",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subject": {
                    "description": "Email subject",
                    "type": "string"
                },
                "body": {
                    "description": "Email body",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date for the requestFile link. The link becomes unusable after this date,\n                        but the files uploaded using this link will follow the expiry setting of the folder.",
                    "type": "string",
                    "format": "date-time"
                },
                "count": {
                    "description": "The remaining uploads allowed",
                    "type": "integer"
                },
                "requireAuth": {
                    "description": "Whether uploader needs to sign in to upload files",
                    "type": "boolean"
                },
                "actionId": {
                    "description": "Whether uploader can view = 1 or download = 2",
                    "type": "integer",
                    "enum": [
                        "1",
                        "2"
                    ]
                },
                "files": {
                    "description": "File IDs that requester may want to include and available for uploaders to see/download",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secureBody": {
                    "type": "boolean"
                }
            }
        },
        "RequestFile.Put": {
            "description": "Class RequestFile",
            "required": [
                "to"
            ],
            "properties": {
                "to": {
                    "description": "Email recipients",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subject": {
                    "description": "Email subject",
                    "type": "string"
                },
                "body": {
                    "description": "Email body",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date for the requestFile link. The link becomes unusable after this date,\n                        but the files uploaded using this link will follow the expiry setting of the folder.",
                    "type": "string",
                    "format": "date-time"
                },
                "count": {
                    "description": "The remaining uploads allowed",
                    "type": "integer"
                },
                "requireAuth": {
                    "description": "Whether uploader needs to sign in to upload files",
                    "type": "boolean"
                },
                "actionId": {
                    "description": "Whether uploader can view = 1 or download = 2",
                    "type": "integer",
                    "enum": [
                        "1",
                        "2"
                    ]
                },
                "files": {
                    "description": "File IDs that requester may want to include and available for uploaders to see/download",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secureBody": {
                    "type": "boolean"
                }
            }
        },
        "ApprovalRequestLink": {
            "description": "Class MailLink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "ApprovalRequestLink.Post": {
            "description": "Class MailLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "ApprovalRequestLink.Put": {
            "description": "Class MailLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "WopiAccessToken": {
            "properties": {
                "accessToken": {
                    "description": "Access token",
                    "type": "string"
                },
                "expires": {
                    "description": "Object expiry date",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "WebFormProfile": {
            "type": "object",
            "properties": {
                "profileId": {
                    "type": "integer",
                    "format": "int32"
                },
                "webFormId": {
                    "type": "string"
                }
            }
        },
        "NoteFile": {
            "description": "Class NoteFile",
            "required": [
                "id",
                "locked",
                "name",
                "parentId",
                "size",
                "type",
                "userId",
                "wopiapp"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of object",
                    "type": "string"
                },
                "created": {
                    "description": "Object creation date",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted": {
                    "description": "Indicates that object is deleted",
                    "type": "boolean"
                },
                "permDeleted": {
                    "description": "Indicates that object is permanently deleted",
                    "type": "boolean"
                },
                "expire": {
                    "description": "Object expiry date",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "Object modification date",
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Object name",
                    "type": "string"
                },
                "parentId": {
                    "description": "Parent Folder identifier",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of Object creator",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Folder"
                },
                "permalink": {
                    "description": "Object permalink",
                    "type": "string"
                },
                "creator": {
                    "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "vendorDocId": {
                    "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "vendorDocName": {
                    "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "source": {
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                },
                "mime": {
                    "description": "File MIME type",
                    "type": "string"
                },
                "size": {
                    "description": "File content size",
                    "type": "string"
                },
                "fingerprint": {
                    "description": "File content fingerprint",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "locked": {
                    "description": "Unique identifier of User who locked a File",
                    "type": "integer"
                },
                "lockUser": {
                    "description": "User who locked the File (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/User"
                },
                "clientCreated": {
                    "description": "Original created time of the file",
                    "type": "string",
                    "format": "date"
                },
                "clientModified": {
                    "description": "Original Modified time of the file",
                    "type": "string",
                    "format": "date"
                },
                "members": {
                    "description": "File members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Member"
                    }
                },
                "overriddenExpire": {
                    "description": "Indicates that file expire is overridden",
                    "type": "boolean"
                },
                "originalFileId": {
                    "description": "File identifier from which this file was copied from",
                    "type": "string"
                },
                "pushedObject": {
                    "description": "Contains pushedObject data if current file was ever pushed (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/PushedObject"
                },
                "avStatus": {
                    "description": "Check file availability status according to AV settings and file scanned/infected status",
                    "type": "string"
                },
                "dlpStatus": {
                    "description": "Check file availability status according to DLP settings and file scanned/infected status",
                    "type": "string"
                },
                "adminQuarantineStatus": {
                    "description": "Check file availability status according to admin quarantined status",
                    "type": "string"
                },
                "storageAvailable": {
                    "description": "Boolean value that shows if this file is available on any volume",
                    "type": "boolean"
                },
                "lastModifiedBy": {
                    "description": "Creator of the latest version (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/User"
                },
                "wopiapp": {
                    "description": "WOPI info for iOS app",
                    "type": "boolean"
                },
                "roleId": {
                    "description": "Highest role",
                    "type": "string"
                },
                "isShared": {
                    "description": "File shared",
                    "type": "string"
                },
                "fingerprints": {
                    "description": "Array of file fingerprint objects",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "description": "Array of tag objects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tag"
                    }
                }
            }
        },
        "NoteFile.Post": {
            "description": "Class NoteFile",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "File name",
                    "type": "string"
                }
            }
        },
        "NoteFile.Put": {
            "description": "Class NoteFile",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "File name",
                    "type": "string"
                },
                "expire": {
                    "description": "The file expiration date.",
                    "type": "string"
                },
                "replace": {
                    "description": "Replace the file if file with same name exists",
                    "type": "string"
                }
            }
        },
        "Job": {
            "properties": {
                "id": {
                    "description": "Job identifier",
                    "type": "string"
                },
                "status": {
                    "description": "Job status. Status could be 'queued','working','succeeded' or 'failed'",
                    "type": "string"
                },
                "errors": {
                    "description": "The list of errors occurred during job processing",
                    "type": "string"
                },
                "objectIds": {
                    "type": "string"
                }
            }
        },
        "EcmAuth": {
            "description": "Class EcmAuth",
            "properties": {
                "redirect": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                }
            }
        },
        "DistributionList": {
            "description": "Class DistributionList",
            "required": [
                "isDistributionList"
            ],
            "properties": {
                "isDistributionList": {
                    "description": "Return true if the email belongs to a distribution list",
                    "type": "boolean"
                },
                "members": {
                    "description": "Return list of members in the distribution list",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "DailyStorage": {
            "description": "Class Storage",
            "properties": {
                "dateTime": {
                    "description": "Date",
                    "type": "string",
                    "format": "date"
                },
                "usage": {
                    "description": "Storage Usage",
                    "type": "integer"
                }
            }
        },
        "ECSource": {
            "description": "Class ECSource",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of EC Source",
                    "type": "string"
                },
                "sourceTypeId": {
                    "description": "Unique identifier of EC Source Type",
                    "type": "string"
                },
                "basePath": {
                    "description": "EC Source basepath",
                    "type": "string"
                },
                "url": {
                    "description": "EC Source url",
                    "type": "string"
                }
            }
        },
        "UserMe": {
            "description": "Class UserMe",
            "required": [
                "basedirId",
                "email",
                "id",
                "mydirId",
                "name",
                "syncdirId"
            ],
            "properties": {
                "id": {
                    "description": "The unique identifier of the user",
                    "type": "string"
                },
                "basedirId": {
                    "description": "The unique identifier of the user's root kiteworks directory.\n     *                  Only folder creation is allowed on user's base directory.",
                    "type": "string"
                },
                "created": {
                    "description": "User creation date",
                    "type": "string",
                    "format": "date"
                },
                "email": {
                    "description": "The user's email",
                    "type": "string"
                },
                "mydirId": {
                    "description": "The unique identifier of the user's mydir directory.\n     *                  mydir directory stores copies of files from email attachments and user's profile image.\n     *                  mydir is not visible to end users",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the user",
                    "type": "string"
                },
                "syncdirId": {
                    "description": "Id of sync dir",
                    "type": "string"
                },
                "userTypeId": {
                    "description": "The unique identifier of the user type",
                    "type": "integer"
                },
                "internal": {
                    "description": "Indicates that the user is an internal user",
                    "type": "boolean"
                },
                "profileIcon": {
                    "description": "User profile icon link",
                    "type": "string"
                },
                "extDL": {
                    "description": "Indicates that the user is External Distribution List",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "List of user's metadata",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserMetadata"
                    }
                },
                "adminRoleId": {
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                },
                "serviceName": {
                    "description": "Service name",
                    "type": "string"
                }
            }
        },
        "UserMe.Post": {
            "description": "Class UserMe",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "The user's email",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the user",
                    "type": "string"
                },
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "userTypeId": {
                    "description": "The unique identifier of the user type",
                    "type": "integer"
                },
                "verified": {
                    "description": "Indicates that the user is verified",
                    "type": "boolean"
                },
                "sendNotification": {
                    "description": "Indicates whether send notification to user or not",
                    "type": "boolean"
                }
            }
        },
        "UserMe.Put": {
            "description": "Class UserMe",
            "properties": {
                "suspended": {
                    "description": "Indicates whether the user is suspended",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the user",
                    "type": "string"
                },
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "verified": {
                    "description": "Indicates that the user is verified",
                    "type": "boolean"
                },
                "deactivated": {
                    "description": "The user deactivated flag",
                    "type": "boolean"
                }
            }
        },
        "PasswordSetLink": {
            "description": "Class ObjectLink",
            "properties": {
                "expire": {
                    "description": "Expiration date of link",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Entity type ID",
                    "type": "integer"
                },
                "entityId": {
                    "description": "Entity ID",
                    "type": "string"
                },
                "entityTypeName": {
                    "description": "Entity type name",
                    "type": "string"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "PasswordSetLink.Post": {
            "description": "Class ObjectLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "PasswordSetLink.Put": {
            "description": "Class ObjectLink",
            "properties": {
                "ref": {
                    "description": "Shortlink handle. Example:abcdefg12",
                    "type": "string"
                },
                "expire": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date"
                },
                "entityTypeId": {
                    "description": "Unique identifier of entity type.\n     *     1 = object,\n     *     2 = email_package,\n     *     3 = verification_code,\n     *     4 = email_preview_package,\n     *     5 = file_request,\n     *     6 = add_file\n     *     7 = password_reset,\n     *     8 = gdrive_oauth,\n     *     9 = connector_oauth,\n     *     10 = comment,\n     *     11 = task,\n     *     12 = mobile_sync,\n     *     13 = password_set,\n     *     14 = event,\n     *     15 = mail,\n     *     16 = approval_request",
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique identifier of entity",
                    "type": "string"
                },
                "length": {
                    "description": "Length of shortlink",
                    "type": "string"
                }
            }
        },
        "Timezone": {
            "description": "Class Timezone",
            "required": [
                "name"
            ],
            "properties": {
                "id": {
                    "description": "Timezone unique identifier",
                    "type": "integer"
                },
                "name": {
                    "description": "Timezone name",
                    "type": "string"
                },
                "offset": {
                    "description": "Timezone offset in seconds",
                    "type": "integer"
                },
                "supportsDST": {
                    "description": "Indicates that Timezone supports DST",
                    "type": "boolean"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "DliFolder": {
            "description": "Class DliFolder",
            "required": [
                "id",
                "name",
                "parentId",
                "type",
                "userId"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier of object",
                    "type": "string"
                },
                "created": {
                    "description": "Object creation date",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted": {
                    "description": "Indicates that object is deleted",
                    "type": "boolean"
                },
                "permDeleted": {
                    "description": "Indicates that object is permanently deleted",
                    "type": "boolean"
                },
                "expire": {
                    "description": "Object expiry date",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "description": "Object modification date",
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Object name",
                    "type": "string"
                },
                "parentId": {
                    "description": "Parent Folder identifier",
                    "type": "string"
                },
                "userId": {
                    "description": "Unique identifier of Object creator",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent Folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Folder"
                },
                "permalink": {
                    "description": "Object permalink",
                    "type": "string"
                },
                "creator": {
                    "description": "Object Creator (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/UserBasicInfo"
                },
                "permissions": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "vendorDocId": {
                    "description": "Vendor document id (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "vendorDocName": {
                    "description": "Vendor document name (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "source": {
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "description": {
                    "description": "Folder description",
                    "type": "string"
                },
                "syncable": {
                    "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
                    "type": "boolean"
                },
                "fileLifetime": {
                    "description": "The file's lifetime in the folder",
                    "type": "string"
                },
                "members": {
                    "description": "Folder members list (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MemberBase"
                    }
                },
                "secure": {
                    "description": "Indicates that Folder is secure. Only top level folders under user's root folder can be set to secure",
                    "type": "boolean"
                },
                "isFavorite": {
                    "description": "Indicates that Folder is marked as favorite for current user (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "boolean"
                },
                "pushedFilesCount": {
                    "description": "Count of pushed files inside folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "integer"
                },
                "path": {
                    "description": "Shows folder full path up to folder on which current folder has permissions",
                    "type": "string"
                },
                "currentUserRole": {
                    "description": "Current user's permissions (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "$ref": "#/definitions/Role"
                },
                "totalFilesCount": {
                    "description": "Count of files inside folder (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "integer"
                },
                "totalFoldersCount": {
                    "description": "Count of child folders (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "integer"
                },
                "totalMembersCount": {
                    "description": "Count of folder's members (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "integer"
                },
                "isShared": {
                    "description": "Indicates that Folder is shared to users/groups (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "boolean"
                },
                "avStatus": {
                    "description": "Check folder availability status according to AV settings and folder files scanned/infected status (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "dlpStatus": {
                    "description": "Check folder availability status according to DLP settings and folder files scanned/infected status (Explicit field. May be retrieved only if mentioned in \"with\" parameter)",
                    "type": "string"
                },
                "maxFolderExpiration": {
                    "description": "Get profile max folder expiration as a date",
                    "type": "string"
                },
                "maxFileLifetime": {
                    "description": "Get profile max file lifetime",
                    "type": "string"
                }
            }
        },
        "DliFolder.Post": {
            "description": "Class DliFolder",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Folder name",
                    "type": "string"
                },
                "description": {
                    "description": "Folder description",
                    "type": "string"
                },
                "syncable": {
                    "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
                    "type": "boolean"
                },
                "expire": {
                    "description": "The folder expiration date. Applicable to top level folders",
                    "type": "string",
                    "format": "date"
                },
                "fileLifetime": {
                    "description": "The file's lifetime in the folder",
                    "type": "integer"
                },
                "secure": {
                    "description": "Indicates whether folder is secure. Only top level folders under user's root folder can be set to secure",
                    "type": "boolean"
                }
            }
        },
        "DliFolder.Put": {
            "description": "Class DliFolder",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Folder name",
                    "type": "string"
                },
                "description": {
                    "description": "Folder description",
                    "type": "string"
                },
                "syncable": {
                    "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
                    "type": "boolean"
                },
                "expire": {
                    "description": "The folder expiration date. Applicable to top level folders",
                    "type": "string",
                    "format": "date"
                },
                "fileLifetime": {
                    "description": "The file's lifetime in the folder",
                    "type": "integer"
                },
                "applyFileLifetimeToFiles": {
                    "description": "Apply file lifetime setting to existing files",
                    "type": "boolean"
                },
                "applyFileLifetimeToNested": {
                    "description": "Apply file lifetime setting to nested folders",
                    "type": "boolean"
                },
                "secure": {
                    "description": "Indicates whether folder is secure. Only top level folders under user's root folder can be set to secure",
                    "type": "boolean"
                }
            }
        },
        "BaseNotification": {
            "description": "Class Notification",
            "properties": {
                "objectId": {
                    "description": "Id of folder included in Notification",
                    "type": "string"
                },
                "fileAdded": {
                    "description": "Number of files which are added to the Notification",
                    "type": "integer"
                },
                "commentAdded": {
                    "description": "Number of comments which are added to the Notification",
                    "type": "integer"
                },
                "links": {
                    "type": "string"
                }
            }
        },
        "BaseNotification.Post": {
            "description": "Class Notification",
            "properties": {
                "fileAdded": {
                    "description": "Number of files which are added to the Notification",
                    "type": "integer"
                },
                "commentAdded": {
                    "description": "Number of comments which are added to the Notification",
                    "type": "integer"
                }
            }
        },
        "BaseNotification.Put": {
            "description": "Class Notification",
            "properties": {
                "fileAdded": {
                    "description": "Number of files which are added to the Notification",
                    "type": "integer"
                },
                "commentAdded": {
                    "description": "Number of comments which are added to the Notification",
                    "type": "integer"
                }
            }
        },
        "UserDemoteToRecipient.Post": {
            "description": "Class UserDemoteToRecipient",
            "properties": {
                "remoteWipe": {
                    "description": "Remote wipe data on desktop and mobile devices",
                    "type": "boolean"
                },
                "deleteUnsharedData": {
                    "type": "boolean"
                },
                "retainData": {
                    "type": "boolean"
                },
                "retainToUser": {
                    "description": "Re-assign data to the user",
                    "type": "string"
                },
                "retainPermissionToSharedData": {
                    "description": "Retain permissions to shared data",
                    "type": "boolean"
                },
                "withdrawRequestFiles": {
                    "type": "boolean"
                },
                "withdrawFileLinks": {
                    "type": "boolean"
                }
            }
        },
        "UserDemoteToRecipient.Put": {
            "description": "Class UserDemoteToRecipient",
            "properties": {
                "remoteWipe": {
                    "description": "Remote wipe data on desktop and mobile devices",
                    "type": "boolean"
                },
                "deleteUnsharedData": {
                    "type": "boolean"
                },
                "retainData": {
                    "type": "boolean"
                },
                "retainToUser": {
                    "description": "Re-assign data to the user",
                    "type": "string"
                },
                "retainPermissionToSharedData": {
                    "description": "Retain permissions to shared data",
                    "type": "boolean"
                },
                "withdrawRequestFiles": {
                    "type": "boolean"
                },
                "withdrawFileLinks": {
                    "type": "boolean"
                }
            }
        },
        "FilePermissions": {
            "description": "Class FilePermissions",
            "properties": {
                "fileId": {
                    "description": "Id of file",
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "FilePermissions.Post": {
            "description": "Class FilePermissions",
            "properties": {
                "fileId": {
                    "description": "Id of file",
                    "type": "integer"
                },
                "fileGuid": {
                    "description": "Guid of file",
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "FilePermissions.Put": {
            "description": "Class FilePermissions",
            "properties": {
                "fileId": {
                    "description": "Id of file",
                    "type": "integer"
                },
                "fileGuid": {
                    "description": "Guid of file",
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ProfileMappingChanges": {
            "description": "Class ProfileMappingChanges",
            "required": [
                "impact"
            ],
            "properties": {
                "impact": {
                    "description": "Get the User Profile mapping order",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ProfileMappingChanges.Post": {
            "description": "Class ProfileMappingChanges",
            "properties": {
                "peek": {
                    "description": "Set if we are peeking into the impact",
                    "type": "boolean"
                },
                "changes": {
                    "description": "policy changes to be tested/applied",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProfileMapping"
                    }
                }
            }
        },
        "ProfileMappingChanges.Put": {
            "description": "Class ProfileMappingChanges",
            "properties": {
                "peek": {
                    "description": "Set if we are peeking into the impact",
                    "type": "boolean"
                },
                "changes": {
                    "description": "policy changes to be tested/applied",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProfileMapping"
                    }
                }
            }
        },
        "UserTfaTotpResetSecret.Post": {
            "description": "Class UserTfaTotpResetSecret",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "otp": {
                    "description": "OTP to verify the new secret",
                    "type": "string"
                }
            }
        },
        "UserTfaTotpResetSecret.Put": {
            "description": "Class UserTfaTotpResetSecret",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "otp": {
                    "description": "OTP to verify the new secret",
                    "type": "string"
                }
            }
        },
        "UserDemoteToRestricted.Post": {
            "description": "Class UserDemoteToRestricted",
            "properties": {
                "remoteWipe": {
                    "description": "Remote wipe data on desktop and mobile devices",
                    "type": "boolean"
                },
                "deleteUnsharedData": {
                    "type": "boolean"
                },
                "retainData": {
                    "type": "boolean"
                },
                "retainToUser": {
                    "description": "Re-assign data to the user",
                    "type": "string"
                },
                "retainPermissionToSharedData": {
                    "description": "Retain permissions to shared data",
                    "type": "boolean"
                },
                "withdrawRequestFiles": {
                    "type": "boolean"
                },
                "withdrawFileLinks": {
                    "type": "boolean"
                }
            }
        },
        "UserDemoteToRestricted.Put": {
            "description": "Class UserDemoteToRestricted",
            "properties": {
                "remoteWipe": {
                    "description": "Remote wipe data on desktop and mobile devices",
                    "type": "boolean"
                },
                "deleteUnsharedData": {
                    "type": "boolean"
                },
                "retainData": {
                    "type": "boolean"
                },
                "retainToUser": {
                    "description": "Re-assign data to the user",
                    "type": "string"
                },
                "retainPermissionToSharedData": {
                    "description": "Retain permissions to shared data",
                    "type": "boolean"
                },
                "withdrawRequestFiles": {
                    "type": "boolean"
                },
                "withdrawFileLinks": {
                    "type": "boolean"
                }
            }
        },
        "FolderMove.Post": {
            "description": "Class FolderMove",
            "required": [
                "destinationFolderId"
            ],
            "properties": {
                "destinationFolderId": {
                    "description": "Destination Folder unique identifier",
                    "type": "string"
                }
            }
        },
        "FolderMove.Put": {
            "description": "Class FolderMove",
            "required": [
                "destinationFolderId"
            ],
            "properties": {
                "destinationFolderId": {
                    "description": "Destination Folder unique identifier",
                    "type": "string"
                }
            }
        },
        "UserOtp.Post": {
            "description": "Class UserOtpChallenge",
            "required": [
                "username",
                "referral"
            ],
            "properties": {
                "username": {
                    "description": "username",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "UserOtp.Put": {
            "description": "Class UserOtpChallenge",
            "required": [
                "username",
                "referral"
            ],
            "properties": {
                "username": {
                    "description": "username",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "ProfileMappingsTest": {
            "description": "Class ProfileMappingsTest",
            "properties": {
                "result": {
                    "description": "Get profile mapping test results",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProfileMapping"
                    }
                }
            }
        },
        "FileCopyMove.Post": {
            "description": "Class FileCopyMove",
            "required": [
                "destinationFolderId"
            ],
            "properties": {
                "destinationFolderId": {
                    "description": "Destination Folder unique identifier.\n    EC folders are also supported.",
                    "type": "string"
                },
                "replace": {
                    "description": "Replace the file if the same file name exists. Default value is false",
                    "type": "boolean"
                }
            }
        },
        "FileCopyMove.Put": {
            "description": "Class FileCopyMove",
            "required": [
                "destinationFolderId"
            ],
            "properties": {
                "destinationFolderId": {
                    "description": "Destination Folder unique identifier.\n    EC folders are also supported.",
                    "type": "string"
                },
                "replace": {
                    "description": "Replace the file if the same file name exists. Default value is false",
                    "type": "boolean"
                }
            }
        },
        "UserTfaTotpVerifySecret.Post": {
            "description": "Class UserTfaTotpVerifySecret",
            "required": [
                "otp"
            ],
            "properties": {
                "otp": {
                    "description": "OTP",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "UserTfaTotpVerifySecret.Put": {
            "description": "Class UserTfaTotpVerifySecret",
            "required": [
                "otp"
            ],
            "properties": {
                "otp": {
                    "description": "OTP",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "UserRequestPasswordReset.Post": {
            "description": "Class UserRequestPasswordReset",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "User's email",
                    "type": "string"
                }
            }
        },
        "UserRequestPasswordReset.Put": {
            "description": "Class UserRequestPasswordReset",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "User's email",
                    "type": "string"
                }
            }
        },
        "OnPremiseSourceLogin.Post": {
            "description": "Class OnPremiseSourceLogin",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "description": "Login",
                    "type": "string"
                },
                "password": {
                    "description": "Password",
                    "type": "string"
                }
            }
        },
        "OnPremiseSourceLogin.Put": {
            "description": "Class OnPremiseSourceLogin",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "description": "Login",
                    "type": "string"
                },
                "password": {
                    "description": "Password",
                    "type": "string"
                }
            }
        },
        "MemberBulk.Post": {
            "description": "Class MemberBulk",
            "required": [
                "roleId"
            ],
            "properties": {
                "notify": {
                    "description": "Indicates whether user would like to receive emails when new member is added into folder",
                    "type": "boolean",
                    "default": true
                },
                "emails": {
                    "description": "Member emails",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userIds": {
                    "description": "User Ids",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ldapGroupIds": {
                    "description": "Member group ids",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "roleId": {
                    "description": "Role id",
                    "type": "integer"
                },
                "notifyFileAdded": {
                    "type": "boolean"
                }
            }
        },
        "MemberBulk.Put": {
            "description": "Class MemberBulk",
            "required": [
                "roleId"
            ],
            "properties": {
                "notify": {
                    "description": "Indicates whether user would like to receive emails when new member is added into folder",
                    "type": "boolean",
                    "default": true
                },
                "emails": {
                    "description": "Member emails",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userIds": {
                    "description": "User Ids",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ldapGroupIds": {
                    "description": "Member group ids",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "roleId": {
                    "description": "Role id",
                    "type": "integer"
                },
                "notifyFileAdded": {
                    "type": "boolean"
                }
            }
        },
        "SendfileExternal.Post": {
            "description": "Class SendfileExternal",
            "properties": {
                "to": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cc": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bcc": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "acl": {
                    "type": "string",
                    "enum": [
                        "verify_recipient",
                        "no_auth",
                        "otp",
                        "internal",
                        "anyone_auth"
                    ]
                },
                "expire": {
                    "type": "string",
                    "format": "date-time"
                },
                "draft": {
                    "type": "boolean"
                },
                "preview": {
                    "description": "Indicates that email is a preview email",
                    "type": "boolean"
                },
                "watermark": {
                    "description": "The watermark on the preview email",
                    "type": "string"
                },
                "secureBody": {
                    "type": "boolean"
                },
                "selfCopy": {
                    "type": "boolean"
                },
                "includeFingerprint": {
                    "type": "boolean"
                },
                "parentEmailId": {
                    "type": "integer"
                },
                "isSelfReturnReceipt": {
                    "type": "boolean"
                },
                "returnReceipts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "Email type",
                    "type": "string",
                    "enum": [
                        "original",
                        "resend",
                        "forward",
                        "reply"
                    ]
                },
                "uploading": {
                    "description": "Indicates whether upload is still in progress. Prevents sending if is set to true.",
                    "type": "boolean"
                },
                "body": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            }
        },
        "SendfileExternal.Put": {
            "description": "Class SendfileExternal",
            "properties": {
                "to": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cc": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bcc": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updateFid": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "acl": {
                    "type": "string",
                    "enum": [
                        "verify_recipient",
                        "no_auth",
                        "otp",
                        "internal",
                        "anyone_auth"
                    ]
                },
                "expire": {
                    "type": "string",
                    "format": "date-time"
                },
                "draft": {
                    "type": "boolean"
                },
                "preview": {
                    "description": "Indicates that email is a preview email",
                    "type": "boolean"
                },
                "watermark": {
                    "description": "The watermark on the preview email",
                    "type": "string"
                },
                "secureBody": {
                    "type": "boolean"
                },
                "selfCopy": {
                    "type": "boolean"
                },
                "includeFingerprint": {
                    "type": "boolean"
                },
                "isSelfReturnReceipt": {
                    "type": "boolean"
                },
                "returnReceipts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uploading": {
                    "description": "Indicates whether upload is still in progress. Prevents sending if is set to true.",
                    "type": "boolean"
                },
                "body": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            }
        },
        "AdminRoleGroupPolicyChanges.Post": {
            "description": "Class AdminRoleGroupPolicyChanges",
            "properties": {
                "changes": {
                    "description": "policy changes to be applied",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AdminRoleGroupPolicy"
                    }
                }
            }
        },
        "AdminRoleGroupPolicyChanges.Put": {
            "description": "Class AdminRoleGroupPolicyChanges",
            "properties": {
                "changes": {
                    "description": "policy changes to be applied",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AdminRoleGroupPolicy"
                    }
                }
            }
        },
        "MigrateUsersCsv.Post": {
            "description": "Class MigrateUsersCsv",
            "properties": {
                "deleteIfExists": {
                    "description": "Delete users which have emails mentioned in any newEmail field",
                    "type": "boolean"
                }
            }
        },
        "MigrateUsersCsv.Put": {
            "description": "Class MigrateUsersCsv",
            "properties": {
                "deleteIfExists": {
                    "description": "Delete users which have emails mentioned in any newEmail field",
                    "type": "boolean"
                }
            }
        },
        "FileInput.Post": {
            "description": "Class FileInput",
            "properties": {
                "clientCreated": {
                    "description": "File creation date set from client",
                    "type": "string",
                    "format": "date"
                },
                "clientModified": {
                    "description": "File modify date set from client",
                    "type": "string",
                    "format": "date"
                },
                "note": {
                    "description": "Indicates whether the file is note",
                    "type": "boolean"
                }
            }
        },
        "Sendfile.Post": {
            "description": "Class Sendfile",
            "properties": {
                "to": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cc": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bcc": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "acl": {
                    "type": "string",
                    "enum": [
                        "verify_recipient",
                        "no_auth",
                        "otp",
                        "internal",
                        "anyone_auth"
                    ]
                },
                "expire": {
                    "type": "string",
                    "format": "date-time"
                },
                "draft": {
                    "type": "boolean"
                },
                "preview": {
                    "description": "Indicates that email is a preview email",
                    "type": "boolean"
                },
                "watermark": {
                    "description": "The watermark on the preview email",
                    "type": "string"
                },
                "secureBody": {
                    "type": "boolean"
                },
                "selfCopy": {
                    "type": "boolean"
                },
                "includeFingerprint": {
                    "type": "boolean"
                },
                "parentEmailId": {
                    "type": "integer"
                },
                "isSelfReturnReceipt": {
                    "type": "boolean"
                },
                "returnReceipts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "Email type",
                    "type": "string",
                    "enum": [
                        "original",
                        "resend",
                        "forward",
                        "reply"
                    ]
                },
                "uploading": {
                    "description": "Indicates whether upload is still in progress. Prevents sending if is set to true.",
                    "type": "boolean"
                },
                "body": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "webFormId": {
                    "type": "string"
                },
                "webFormFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Sendfile.Put": {
            "description": "Class Sendfile",
            "properties": {
                "to": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cc": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bcc": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updateFid": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "acl": {
                    "type": "string",
                    "enum": [
                        "verify_recipient",
                        "no_auth",
                        "otp",
                        "internal",
                        "anyone_auth"
                    ]
                },
                "expire": {
                    "type": "string",
                    "format": "date-time"
                },
                "draft": {
                    "type": "boolean"
                },
                "preview": {
                    "description": "Indicates that email is a preview email",
                    "type": "boolean"
                },
                "watermark": {
                    "description": "The watermark on the preview email",
                    "type": "string"
                },
                "secureBody": {
                    "type": "boolean"
                },
                "selfCopy": {
                    "type": "boolean"
                },
                "includeFingerprint": {
                    "type": "boolean"
                },
                "isSelfReturnReceipt": {
                    "type": "boolean"
                },
                "returnReceipts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uploading": {
                    "description": "Indicates whether upload is still in progress. Prevents sending if is set to true.",
                    "type": "boolean"
                },
                "body": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "webFormId": {
                    "type": "string"
                },
                "webFormFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "EncryptUsername.Post": {
            "description": "Class EncryptUsername",
            "required": [
                "username",
                "clientId",
                "clientSecret"
            ],
            "properties": {
                "username": {
                    "description": "username",
                    "type": "string"
                },
                "clientId": {
                    "description": "client id",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "client secret",
                    "type": "string"
                }
            }
        },
        "EncryptUsername.Put": {
            "description": "Class EncryptUsername",
            "required": [
                "username",
                "clientId",
                "clientSecret"
            ],
            "properties": {
                "username": {
                    "description": "username",
                    "type": "string"
                },
                "clientId": {
                    "description": "client id",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "client secret",
                    "type": "string"
                }
            }
        },
        "SearchMetadata": {
            "properties": {
                "total": {
                    "description": "Total items count",
                    "type": "integer"
                },
                "totalFilesCount": {
                    "description": "Total files count",
                    "type": "integer"
                },
                "totalFoldersCount": {
                    "description": "Total folders count",
                    "type": "integer"
                },
                "totalEmailsCount": {
                    "description": "Total emails count",
                    "type": "integer"
                }
            }
        },
        "UserPreauth.Post": {
            "description": "Class UserPreauth",
            "required": [
                "username"
            ],
            "properties": {
                "username": {
                    "description": "username",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "UserPreauth.Put": {
            "description": "Class UserPreauth",
            "required": [
                "username"
            ],
            "properties": {
                "username": {
                    "description": "username",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "RequestFilePermission": {
            "properties": {
                "name": {
                    "description": "Action name",
                    "type": "string"
                },
                "enabled": {
                    "description": "Determines if action is valid",
                    "type": "boolean"
                }
            }
        },
        "UserDemoteOptions.Post": {
            "description": "Class UserDemoteOptions",
            "properties": {
                "remoteWipe": {
                    "description": "Remote wipe data on desktop and mobile devices",
                    "type": "boolean"
                },
                "deleteUnsharedData": {
                    "type": "boolean"
                },
                "retainData": {
                    "type": "boolean"
                },
                "retainToUser": {
                    "description": "Re-assign data to the user",
                    "type": "string"
                },
                "retainPermissionToSharedData": {
                    "description": "Retain permissions to shared data",
                    "type": "boolean"
                },
                "withdrawRequestFiles": {
                    "type": "boolean"
                },
                "withdrawFileLinks": {
                    "type": "boolean"
                }
            }
        },
        "UserDemoteOptions.Put": {
            "description": "Class UserDemoteOptions",
            "properties": {
                "remoteWipe": {
                    "description": "Remote wipe data on desktop and mobile devices",
                    "type": "boolean"
                },
                "deleteUnsharedData": {
                    "type": "boolean"
                },
                "retainData": {
                    "type": "boolean"
                },
                "retainToUser": {
                    "description": "Re-assign data to the user",
                    "type": "string"
                },
                "retainPermissionToSharedData": {
                    "description": "Retain permissions to shared data",
                    "type": "boolean"
                },
                "withdrawRequestFiles": {
                    "type": "boolean"
                },
                "withdrawFileLinks": {
                    "type": "boolean"
                }
            }
        },
        "UserRegister.Post": {
            "description": "Class UserRegister",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email",
                    "type": "string"
                },
                "password": {
                    "description": "Password",
                    "type": "string"
                },
                "link": {
                    "description": "Ref link",
                    "type": "string"
                },
                "activationCode": {
                    "description": "activation code",
                    "type": "string"
                },
                "redirect": {
                    "description": "Special handling for redirect (sharedfiles)",
                    "type": "string"
                }
            }
        },
        "UserRegister.Put": {
            "description": "Class UserRegister",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email",
                    "type": "string"
                },
                "password": {
                    "description": "Password",
                    "type": "string"
                },
                "link": {
                    "description": "Ref link",
                    "type": "string"
                },
                "activationCode": {
                    "description": "activation code",
                    "type": "string"
                },
                "redirect": {
                    "description": "Special handling for redirect (sharedfiles)",
                    "type": "string"
                }
            }
        },
        "UserNamePassword.Post": {
            "description": "Class UserNamePassword",
            "properties": {
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "previousPassword": {
                    "description": "The user's previous password",
                    "type": "string"
                },
                "name": {
                    "description": "The user's name",
                    "type": "string"
                }
            }
        },
        "UserNamePassword.Put": {
            "description": "Class UserNamePassword",
            "properties": {
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "previousPassword": {
                    "description": "The user's previous password",
                    "type": "string"
                },
                "name": {
                    "description": "The user's name",
                    "type": "string"
                }
            }
        },
        "ProfileMappingOrder": {
            "description": "Class ProfileMappingOrder",
            "required": [
                "impact",
                "order"
            ],
            "properties": {
                "order": {
                    "description": "Get the User Profile mapping order",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "impact": {
                    "description": "Get the User Profile mapping order",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ProfileMappingOrder.Post": {
            "description": "Class ProfileMappingOrder",
            "required": [
                "order"
            ],
            "properties": {
                "peek": {
                    "description": "Set if we are peeking into the impact",
                    "type": "boolean"
                },
                "order": {
                    "description": "Set the User Profile mapping order",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "ProfileMappingOrder.Put": {
            "description": "Class ProfileMappingOrder",
            "required": [
                "order"
            ],
            "properties": {
                "peek": {
                    "description": "Set if we are peeking into the impact",
                    "type": "boolean"
                },
                "order": {
                    "description": "Set the User Profile mapping order",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "ProfileMapping": {
            "description": "Class ProfileMapping",
            "required": [
                "impact"
            ],
            "properties": {
                "impact": {
                    "description": "Get the User Profile mapping order",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "Get the id of the target authentication source",
                    "type": "string"
                },
                "name": {
                    "description": "Get the name of the target authentication source",
                    "type": "string"
                },
                "filter": {
                    "description": "Get the filter of the target authentication source",
                    "type": "string"
                }
            }
        },
        "ProfileMapping.Post": {
            "description": "Class ProfileMapping",
            "required": [
                "id"
            ],
            "properties": {
                "peek": {
                    "description": "Set if we are peeking into the impact",
                    "type": "boolean"
                },
                "id": {
                    "description": "Specify the id of the target authentication source",
                    "type": "string"
                },
                "filter": {
                    "description": "Set the filter of the target authentication source",
                    "type": "string"
                }
            }
        },
        "ProfileMapping.Put": {
            "description": "Class ProfileMapping",
            "required": [
                "id"
            ],
            "properties": {
                "peek": {
                    "description": "Set if we are peeking into the impact",
                    "type": "boolean"
                },
                "id": {
                    "description": "Specify the id of the target authentication source",
                    "type": "string"
                },
                "filter": {
                    "description": "Set the filter of the target authentication source",
                    "type": "string"
                }
            }
        },
        "EmailCounters": {
            "description": "Class EmailCounters",
            "properties": {
                "draft": {
                    "description": "Number of emails in 'draft' bucket",
                    "type": "integer"
                },
                "outgoing": {
                    "description": "Number of emails in 'outgoing' bucket",
                    "type": "integer"
                },
                "outgoingTransferring": {
                    "description": "Number of emails in 'outgoing' bucket in transferring state",
                    "type": "integer"
                },
                "outgoingTransferringIds": {
                    "description": "Number of emails in 'outgoing' bucket in transferring state",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "outgoingQueued": {
                    "description": "Number of emails in 'outgoing' bucket in queued state",
                    "type": "integer"
                },
                "outgoingError": {
                    "description": "Number of emails in 'outgoing' bucket in error state",
                    "type": "integer"
                },
                "inboxUnread": {
                    "description": "Number of unread emails in 'inbox' bucket",
                    "type": "integer"
                },
                "trash": {
                    "description": "Number of emails in 'trash' bucket",
                    "type": "integer"
                }
            }
        },
        "FileZip.Post": {
            "description": "Class FileZip",
            "properties": {
                "fileIds": {
                    "description": "List of file IDs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "folderIds": {
                    "description": "List of folder IDs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "FileZip.Put": {
            "description": "Class FileZip",
            "properties": {
                "fileIds": {
                    "description": "List of file IDs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "folderIds": {
                    "description": "List of folder IDs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ActivationCodeSend.Post": {
            "description": "Class ActivationCodeSend",
            "required": [
                "email",
                "referral"
            ],
            "properties": {
                "email": {
                    "description": "email",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                },
                "resend": {
                    "description": "resend",
                    "type": "string"
                }
            }
        },
        "ActivationCodeSend.Put": {
            "description": "Class ActivationCodeSend",
            "required": [
                "email",
                "referral"
            ],
            "properties": {
                "email": {
                    "description": "email",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                },
                "resend": {
                    "description": "resend",
                    "type": "string"
                }
            }
        },
        "TokenExchange.Post": {
            "description": "Class TokenExchange",
            "required": [
                "clientId"
            ],
            "properties": {
                "clientId": {
                    "description": "client id",
                    "type": "string"
                }
            }
        },
        "TokenExchange.Put": {
            "description": "Class TokenExchange",
            "required": [
                "clientId"
            ],
            "properties": {
                "clientId": {
                    "description": "client id",
                    "type": "string"
                }
            }
        },
        "SendRequestFile.Post": {
            "description": "Class SendRequestFile",
            "required": [
                "fileIds"
            ],
            "properties": {
                "body": {
                    "type": "string"
                },
                "fileIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "selfCopy": {
                    "type": "boolean"
                }
            }
        },
        "SendRequestFile.Put": {
            "description": "Class SendRequestFile",
            "required": [
                "fileIds"
            ],
            "properties": {
                "body": {
                    "type": "string"
                },
                "fileIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "selfCopy": {
                    "type": "boolean"
                }
            }
        },
        "UserResetPassword.Post": {
            "description": "Class UserResetPassword",
            "required": [
                "link",
                "password"
            ],
            "properties": {
                "link": {
                    "description": "The password reset link",
                    "type": "string"
                },
                "password": {
                    "description": "Password",
                    "type": "string"
                }
            }
        },
        "UserResetPassword.Put": {
            "description": "Class UserResetPassword",
            "required": [
                "link",
                "password"
            ],
            "properties": {
                "link": {
                    "description": "The password reset link",
                    "type": "string"
                },
                "password": {
                    "description": "Password",
                    "type": "string"
                }
            }
        },
        "RemoteWipe.Post": {
            "description": "Class RemoteWipe",
            "properties": {
                "userId": {
                    "description": "Unique identifier of user",
                    "type": "integer"
                },
                "clientId": {
                    "description": "Unique identifier of client",
                    "type": "string"
                },
                "installTagId": {
                    "description": "Unique identifier of install tag",
                    "type": "string"
                }
            }
        },
        "RemoteWipe.Put": {
            "description": "Class RemoteWipe",
            "properties": {
                "userId": {
                    "description": "Unique identifier of user",
                    "type": "integer"
                },
                "clientId": {
                    "description": "Unique identifier of client",
                    "type": "string"
                },
                "installTagId": {
                    "description": "Unique identifier of install tag",
                    "type": "string"
                }
            }
        },
        "LdapSearchResultUser": {
            "description": "Class LdapSearchResultUser",
            "properties": {
                "email": {
                    "description": "User's email",
                    "type": "string"
                },
                "displayName": {
                    "description": "Users's display name",
                    "type": "string"
                }
            }
        },
        "UserAuthCode.Post": {
            "description": "Class UserAuthCode",
            "required": [
                "childClientId"
            ],
            "properties": {
                "childClientId": {
                    "description": "Client id of the child client",
                    "type": "string"
                }
            }
        },
        "UserAuthCode.Put": {
            "description": "Class UserAuthCode",
            "required": [
                "childClientId"
            ],
            "properties": {
                "childClientId": {
                    "description": "Client id of the child client",
                    "type": "string"
                }
            }
        },
        "LdapSearchResults": {
            "description": "Class LdapSearchResults",
            "required": [
                "matches"
            ],
            "properties": {
                "matches": {
                    "description": "Search matches",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LdapSearchResultUser"
                    }
                }
            }
        },
        "UserEmail.Post": {
            "description": "Class UserEmail",
            "required": [
                "oldEmail",
                "newEmail"
            ],
            "properties": {
                "oldEmail": {
                    "description": "Email which user currently has",
                    "type": "string"
                },
                "newEmail": {
                    "description": "Email which user should have after migration",
                    "type": "string"
                }
            }
        },
        "UserEmail.Put": {
            "description": "Class UserEmail",
            "required": [
                "oldEmail",
                "newEmail"
            ],
            "properties": {
                "oldEmail": {
                    "description": "Email which user currently has",
                    "type": "string"
                },
                "newEmail": {
                    "description": "Email which user should have after migration",
                    "type": "string"
                }
            }
        },
        "UserTfa.Post": {
            "description": "Class UserTfa",
            "required": [
                "otp"
            ],
            "properties": {
                "otp": {
                    "description": "OTP",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                },
                "rememberDevice": {
                    "description": "remember device",
                    "type": "boolean"
                }
            }
        },
        "UserTfa.Put": {
            "description": "Class UserTfa",
            "required": [
                "otp"
            ],
            "properties": {
                "otp": {
                    "description": "OTP",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                },
                "rememberDevice": {
                    "description": "remember device",
                    "type": "boolean"
                }
            }
        },
        "TenantSuspend.Post": {
            "description": "Class TenantSuspend",
            "properties": {
                "comment": {
                    "description": "Additional comment\\reason",
                    "type": "string"
                }
            }
        },
        "TenantSuspend.Put": {
            "description": "Class TenantSuspend",
            "properties": {
                "comment": {
                    "description": "Additional comment\\reason",
                    "type": "string"
                }
            }
        },
        "OtpRecipientModel": {
            "description": "Class ProfileMapping",
            "properties": {
                "userId": {
                    "description": "The otp recipient email",
                    "type": "integer"
                },
                "mobileNumber": {
                    "description": "Get the mobile number of the otp recipient",
                    "type": "string"
                }
            }
        },
        "OtpRecipientModel.Post": {
            "description": "Class ProfileMapping",
            "required": [
                "userId",
                "mobileNumber"
            ],
            "properties": {
                "userId": {
                    "description": "Specify the otp recipient's user id",
                    "type": "integer"
                },
                "mobileNumber": {
                    "description": "Set the filter of the target authentication source",
                    "type": "string"
                }
            }
        },
        "OtpRecipientModel.Put": {
            "description": "Class ProfileMapping",
            "required": [
                "userId",
                "mobileNumber"
            ],
            "properties": {
                "userId": {
                    "description": "Specify the otp recipient's user id",
                    "type": "integer"
                },
                "mobileNumber": {
                    "description": "Set the filter of the target authentication source",
                    "type": "string"
                }
            }
        },
        "O365Client.Post": {
            "description": "Class O365Client",
            "required": [
                "client"
            ],
            "properties": {
                "client": {
                    "description": "Outlookweb/Officeweb",
                    "type": "string"
                }
            }
        },
        "O365Client.Put": {
            "description": "Class O365Client",
            "required": [
                "client"
            ],
            "properties": {
                "client": {
                    "description": "Outlookweb/Officeweb",
                    "type": "string"
                }
            }
        },
        "UserPassword.Post": {
            "description": "Class UserPassword",
            "properties": {
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "previousPassword": {
                    "description": "The user's previous password",
                    "type": "string"
                }
            }
        },
        "UserPassword.Put": {
            "description": "Class UserPassword",
            "properties": {
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "previousPassword": {
                    "description": "The user's previous password",
                    "type": "string"
                }
            }
        },
        "AdminRoleGroupPolicy": {
            "description": "Class AdminRoleGroupPolicy",
            "properties": {
                "id": {
                    "description": "Get the id of the policy group",
                    "type": "integer"
                },
                "description": {
                    "description": "Get the name of the policy group",
                    "type": "string"
                },
                "allowed": {
                    "description": "Get the policy group is allowed",
                    "type": "boolean"
                },
                "grouping": {
                    "description": "Get the policy group grouping",
                    "type": "string"
                },
                "dependencies": {
                    "description": "Get the policy group dependencies",
                    "$ref": "#/definitions/AdminRoleGroupPolicy"
                }
            }
        },
        "AdminRoleGroupPolicy.Post": {
            "description": "Class AdminRoleGroupPolicy",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "Specify the id of the policy group",
                    "type": "integer"
                },
                "allowed": {
                    "description": "Set the policy group allowed flag",
                    "type": "boolean"
                }
            }
        },
        "AdminRoleGroupPolicy.Put": {
            "description": "Class AdminRoleGroupPolicy",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "Specify the id of the policy group",
                    "type": "integer"
                },
                "allowed": {
                    "description": "Set the policy group allowed flag",
                    "type": "boolean"
                }
            }
        },
        "UserForcedPasswordChange.Post": {
            "description": "Class UserForcedPasswordChange",
            "properties": {
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "previousPassword": {
                    "description": "The user's previous password",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "UserForcedPasswordChange.Put": {
            "description": "Class UserForcedPasswordChange",
            "properties": {
                "password": {
                    "description": "The user's password",
                    "type": "string"
                },
                "previousPassword": {
                    "description": "The user's previous password",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "ProfileMappings": {
            "description": "Class ProfileMappings",
            "properties": {
                "ldap": {
                    "description": "Get the ldap policy filters for the user profile",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProfileMapping"
                    }
                },
                "kiteworks": {
                    "description": "Get the kiteworks policy filters for the user profile",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProfileMapping"
                    }
                },
                "sso": {
                    "description": "Get the ldap policy filters for the user profile",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProfileMapping"
                    }
                }
            }
        },
        "FolderCopy.Post": {
            "description": "Class FolderCopy",
            "required": [
                "destinationFolderId"
            ],
            "properties": {
                "destinationFolderId": {
                    "description": "Destination Folder unique identifier",
                    "type": "integer"
                }
            }
        },
        "FolderCopy.Put": {
            "description": "Class FolderCopy",
            "required": [
                "destinationFolderId"
            ],
            "properties": {
                "destinationFolderId": {
                    "description": "Destination Folder unique identifier",
                    "type": "integer"
                }
            }
        },
        "FolderCreate.Post": {
            "description": "Class FolderCreate",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Folder name",
                    "type": "string"
                },
                "secure": {
                    "description": "Indicates whether folder is secure.\n     * Only top level folders under user's root folder can be set to secure",
                    "type": "boolean"
                },
                "isSalesforceRoot": {
                    "description": "",
                    "type": "boolean"
                },
                "systemFolder": {
                    "type": "integer"
                },
                "syncable": {
                    "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
                    "type": "boolean"
                },
                "expire": {
                    "description": "The folder expiration date. Applicable to top level folders",
                    "type": "string",
                    "format": "date"
                },
                "fileLifetime": {
                    "description": "The file's lifetime in the folder",
                    "type": "integer"
                },
                "description": {
                    "description": "Folder description",
                    "type": "string"
                },
                "isFolderUpload": {
                    "description": "Indicate whether is folder upload children (for internal use only)",
                    "type": "boolean"
                }
            }
        },
        "FolderCreate.Put": {
            "description": "Class FolderCreate",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Folder name",
                    "type": "string"
                },
                "secure": {
                    "description": "Indicates whether folder is secure.\n     * Only top level folders under user's root folder can be set to secure",
                    "type": "boolean"
                },
                "isSalesforceRoot": {
                    "description": "",
                    "type": "boolean"
                },
                "systemFolder": {
                    "type": "integer"
                },
                "syncable": {
                    "description": "Indicates that folder is syncable. Can only be set at a top level folder.",
                    "type": "boolean"
                },
                "expire": {
                    "description": "The folder expiration date. Applicable to top level folders",
                    "type": "string",
                    "format": "date"
                },
                "fileLifetime": {
                    "description": "The file's lifetime in the folder",
                    "type": "integer"
                },
                "description": {
                    "description": "Folder description",
                    "type": "string"
                },
                "isFolderUpload": {
                    "description": "Indicate whether is folder upload children (for internal use only)",
                    "type": "boolean"
                }
            }
        },
        "ActivationCode.Post": {
            "description": "Class ActivationCode",
            "required": [
                "referral"
            ],
            "properties": {
                "code": {
                    "description": "activation code",
                    "type": "string"
                },
                "email": {
                    "description": "email",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "ActivationCode.Put": {
            "description": "Class ActivationCode",
            "required": [
                "referral"
            ],
            "properties": {
                "code": {
                    "description": "activation code",
                    "type": "string"
                },
                "email": {
                    "description": "email",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "UserLogin.Post": {
            "description": "Class UserLogin",
            "required": [
                "username",
                "password"
            ],
            "properties": {
                "username": {
                    "description": "user id",
                    "type": "string"
                },
                "password": {
                    "description": "user password",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "UserLogin.Put": {
            "description": "Class UserLogin",
            "required": [
                "username",
                "password"
            ],
            "properties": {
                "username": {
                    "description": "user id",
                    "type": "string"
                },
                "password": {
                    "description": "user password",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "OtpRecipientChanges": {
            "description": "Class ProfileMappingChanges",
            "required": [
                "recipients"
            ],
            "properties": {
                "recipients": {
                    "description": "Get list of recipient, mobile number value pairs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "OtpRecipientChanges.Post": {
            "description": "Class ProfileMappingChanges",
            "properties": {
                "recipients": {
                    "description": "Set list of otp recipient changes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OtpRecipientModel"
                    }
                }
            }
        },
        "OtpRecipientChanges.Put": {
            "description": "Class ProfileMappingChanges",
            "properties": {
                "recipients": {
                    "description": "Set list of otp recipient changes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OtpRecipientModel"
                    }
                }
            }
        },
        "UserDeleteOptions.Post": {
            "description": "Class UserDeleteOptions",
            "properties": {
                "remoteWipe": {
                    "description": "Remote wipe data on desktop and mobile devices",
                    "type": "boolean"
                },
                "deleteUnsharedData": {
                    "type": "boolean"
                },
                "retainData": {
                    "type": "boolean"
                },
                "retainToUser": {
                    "description": "Re-assign data to the user",
                    "type": "string"
                },
                "retainPermissionToSharedData": {
                    "description": "Retain permissions to shared data",
                    "type": "boolean"
                },
                "withdrawRequestFiles": {
                    "type": "boolean"
                },
                "withdrawFileLinks": {
                    "type": "boolean"
                }
            }
        },
        "UserDeleteOptions.Put": {
            "description": "Class UserDeleteOptions",
            "properties": {
                "remoteWipe": {
                    "description": "Remote wipe data on desktop and mobile devices",
                    "type": "boolean"
                },
                "deleteUnsharedData": {
                    "type": "boolean"
                },
                "retainData": {
                    "type": "boolean"
                },
                "retainToUser": {
                    "description": "Re-assign data to the user",
                    "type": "string"
                },
                "retainPermissionToSharedData": {
                    "description": "Retain permissions to shared data",
                    "type": "boolean"
                },
                "withdrawRequestFiles": {
                    "type": "boolean"
                },
                "withdrawFileLinks": {
                    "type": "boolean"
                }
            }
        },
        "UsersEmailMigration.Post": {
            "description": "Class UsersEmailMigration",
            "properties": {
                "users": {
                    "description": "Array of user objects with old and new emails values",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserEmail.Post"
                    }
                },
                "deleteIfExists": {
                    "description": "Delete users which have emails mentioned in any newEmail field",
                    "type": "boolean"
                }
            }
        },
        "UsersEmailMigration.Put": {
            "description": "Class UsersEmailMigration",
            "properties": {
                "users": {
                    "description": "Array of user objects with old and new emails values",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserEmail.Post"
                    }
                },
                "deleteIfExists": {
                    "description": "Delete users which have emails mentioned in any newEmail field",
                    "type": "boolean"
                }
            }
        },
        "UserMobileNumberPassword.Post": {
            "description": "Class UserPassword",
            "required": [
                "password",
                "mobileNumber"
            ],
            "properties": {
                "password": {
                    "description": "The current password of the user",
                    "type": "string"
                },
                "mobileNumber": {
                    "description": "The user's new mobile number",
                    "type": "string"
                },
                "testOnly": {
                    "description": "If true, a short message will be sent to the number, and the number will not be saved",
                    "type": "boolean"
                }
            }
        },
        "UserMobileNumberPassword.Put": {
            "description": "Class UserPassword",
            "required": [
                "password",
                "mobileNumber"
            ],
            "properties": {
                "password": {
                    "description": "The current password of the user",
                    "type": "string"
                },
                "mobileNumber": {
                    "description": "The user's new mobile number",
                    "type": "string"
                },
                "testOnly": {
                    "description": "If true, a short message will be sent to the number, and the number will not be saved",
                    "type": "boolean"
                }
            }
        },
        "UserTos.Post": {
            "description": "Class UserTos",
            "required": [
                "accept"
            ],
            "properties": {
                "accept": {
                    "description": "accept",
                    "type": "boolean"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "UserTos.Put": {
            "description": "Class UserTos",
            "required": [
                "accept"
            ],
            "properties": {
                "accept": {
                    "description": "accept",
                    "type": "boolean"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "UserOtpAuth.Post": {
            "description": "Class UserOtpAuth",
            "required": [
                "username",
                "otp",
                "referral"
            ],
            "properties": {
                "username": {
                    "description": "user id",
                    "type": "string"
                },
                "otp": {
                    "description": "user otp",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "UserOtpAuth.Put": {
            "description": "Class UserOtpAuth",
            "required": [
                "username",
                "otp",
                "referral"
            ],
            "properties": {
                "username": {
                    "description": "user id",
                    "type": "string"
                },
                "otp": {
                    "description": "user otp",
                    "type": "string"
                },
                "referral": {
                    "description": "referral",
                    "type": "string"
                }
            }
        },
        "InitiateUploadPostRequest": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string",
                    "description": "File name"
                },
                "clientModified": {
                    "type": "string",
                    "description": "File modified date set from client"
                },
                "totalChunks": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "description": "Total chunks amount"
                },
                "clientCreated": {
                    "type": "string",
                    "description": "File created date set from client"
                },
                "resume": {
                    "type": "boolean",
                    "description": "Indicate if this is resume upload and only applicable when same file name already exists. Currently only used internally in SFTP"
                },
                "totalSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Total file size"
                }
            },
            "required": [
                "filename"
            ]
        },
        "BaseChunkUploadRequest": {
            "type": "object",
            "properties": {
                "compressionSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The upload content size after compression"
                },
                "content": {
                    "type": "string",
                    "description": "The upload content. Base64 encoded if upload in json format"
                },
                "policyHandling": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Indicate if the client can handle any policy exception"
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "Indicate that the file will be overwritten without versioning if file with same name exists"
                },
                "originalSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The original upload content size before compression"
                },
                "index": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The chunk index. Starts from 1"
                },
                "compressionMode": {
                    "type": "string",
                    "enum": [
                        "NORMAL",
                        "GZIP",
                        "ZLIB"
                    ],
                    "description": "The compression mode. Available option \"NORMAL\", \"GZIP\" and \"ZLIB\""
                },
                "lastChunk": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Indicate if this upload is the last chunk of the file. 1"
                }
            },
            "required": [
                "compressionMode",
                "compressionSize",
                "content",
                "originalSize"
            ]
        },
        "UserBasic": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "profileIcon": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Fingerprint": {
            "type": "object",
            "properties": {
                "algo": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                }
            }
        },
        "MobileInfo": {
            "type": "object",
            "properties": {
                "service": {
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "wopiSrc": {
                    "type": "string"
                },
                "schemeSupport": {
                    "type": "string"
                }
            }
        },
        "BaseSendMailPostRequest": {
            "type": "object",
            "properties": {
                "subject": {
                    "type": "string",
                    "maxLength": 998,
                    "description": "The mail's subject."
                },
                "returnReceipts": {
                    "type": "array",
                    "description": "List of to download notification's recipients' email",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "files": {
                    "type": "array",
                    "description": "List of file's ID",
                    "items": {
                        "type": "string"
                    }
                },
                "body": {
                    "type": "string",
                    "description": "The mail's body."
                },
                "sharedMailboxId": {
                    "type": "string",
                    "description": "The shared mailbox ID"
                },
                "notifyExpired": {
                    "type": "boolean",
                    "description": "Indicate whether to send notification email to sender when email expired"
                },
                "secureBody": {
                    "type": "boolean",
                    "description": "Indicate that the mail is secure message."
                },
                "selfCopy": {
                    "type": "boolean",
                    "description": "Indicate that sending a copy to sender."
                },
                "webFormId": {
                    "type": "string",
                    "description": "The mail's web form Id."
                },
                "trackingAccess": {
                    "type": "array",
                    "description": "List of tracking access' email",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "preview": {
                    "type": "boolean",
                    "description": "Indicate that sending/saving mail as preview mail."
                },
                "cc": {
                    "type": "array",
                    "description": "List of cc recipients' email",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "draft": {
                    "type": "boolean",
                    "description": "Indicate saving mail as draft."
                },
                "parentEmailId": {
                    "type": "string",
                    "description": "The parent mail id used for mail threading. Applicalble only when type is 'forward' or 'reply'"
                },
                "to": {
                    "type": "array",
                    "description": "List of to recipients' email",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "bcc": {
                    "type": "array",
                    "description": "List of bcc recipients' email",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "acl": {
                    "type": "string",
                    "enum": [
                        "verify_recipient",
                        "no_auth",
                        "otp",
                        "internal",
                        "anyone_auth"
                    ],
                    "description": "The access control."
                },
                "watermark": {
                    "type": "string",
                    "description": "The watermark on the preview mail. Applicable only when the preview is set."
                },
                "webFormFields": {
                    "type": "object",
                    "description": "The mail's web form fields."
                },
                "isSelfReturnReceipt": {
                    "type": "boolean",
                    "description": "Send download notification to sender. (deprecated should use returnReceipts instead)"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "original",
                        "forward",
                        "reply",
                        "resend"
                    ],
                    "description": "The mail type. Default value is original"
                },
                "includeFingerprint": {
                    "type": "boolean",
                    "description": "Indicate that including fingerprint inside the mail."
                },
                "uploading": {
                    "type": "boolean",
                    "description": "Indicate whether upload is still in progress. Prevents sending if is set to true."
                },
                "expire": {
                    "type": "string",
                    "description": "The mail's expiry."
                }
            }
        },
        "TrackingAccessRecipient": {
            "type": "object",
            "properties": {
                "revoked": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "type": {
                    "type": "integer",
                    "format": "int32"
                },
                "user": {
                    "$ref": "#/definitions/UserBasic"
                },
                "userId": {
                    "type": "string"
                },
                "isDistributionList": {
                    "type": "boolean"
                }
            }
        },
        "Variables": {
            "type": "object",
            "properties": {
                "variable": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "DrmFile": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "EmailReturnRecipient": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserBasic"
                }
            }
        },
        "Mail": {
            "type": "object",
            "properties": {
                "avStatus": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "templateBody": {
                    "type": "string"
                },
                "isRead": {
                    "type": "boolean"
                },
                "templateId": {
                    "type": "integer",
                    "format": "int32"
                },
                "senderId": {
                    "type": "string"
                },
                "body": {
                    "type": "string"
                },
                "isUserSent": {
                    "type": "boolean"
                },
                "headline": {
                    "type": "string"
                },
                "webFormFields": {
                    "type": "string"
                },
                "notice": {
                    "type": "string"
                },
                "withdrawnDate": {
                    "type": "string"
                },
                "emailPackageId": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Recipient"
                    }
                },
                "parentEmailId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "hasTrackingAccess": {
                    "type": "boolean"
                },
                "sender": {
                    "$ref": "#/definitions/UserBasic"
                },
                "deleted": {
                    "type": "boolean"
                },
                "trackingAccess": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrackingAccessRecipient"
                    }
                },
                "webFormId": {
                    "type": "string"
                },
                "darkModeStyle": {
                    "type": "string"
                },
                "bucket": {
                    "type": "string"
                },
                "actor": {
                    "$ref": "#/definitions/UserBasic"
                },
                "attachmentCount": {
                    "type": "string"
                },
                "emailFrom": {
                    "type": "string"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Variables"
                    }
                },
                "expirationDate": {
                    "type": "string"
                },
                "fullHtmlBody": {
                    "type": "string"
                },
                "sharedMailboxId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "rawBody": {
                    "type": "string"
                },
                "watermark": {
                    "type": "string"
                },
                "package": {
                    "$ref": "#/definitions/Package"
                },
                "isPreview": {
                    "type": "boolean"
                },
                "modifiedDate": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "secureBody": {
                    "type": "boolean"
                },
                "dlpStatus": {
                    "type": "string"
                },
                "emailReturnReceipt": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EmailReturnRecipient"
                    }
                },
                "exists": {
                    "type": "boolean"
                },
                "error": {
                    "type": "string"
                },
                "htmlBody": {
                    "type": "string"
                }
            }
        },
        "DestinationFolderIdRequest": {
            "type": "object",
            "properties": {
                "addVersion": {
                    "type": "boolean",
                    "description": "Add new version when the file with the same name exists. Default value is True"
                },
                "destinationFolderId": {
                    "type": "string",
                    "description": "The destination folder"
                }
            },
            "required": [
                "destinationFolderId"
            ]
        },
        "UserAttachment": {
            "type": "object",
            "properties": {
                "modifiedDate": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "sentDate": {
                    "type": "string"
                },
                "mime": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "webFormId": {
                    "type": "string"
                },
                "attachmentId": {
                    "type": "string"
                },
                "emailId": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                }
            }
        },
        "MetaData": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer",
                    "format": "int32"
                },
                "offset": {
                    "type": "integer",
                    "format": "int32"
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "MailAttachments": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserAttachment"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                }
            }
        },
        "Mail1": {
            "type": "object",
            "properties": {
                "avStatus": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "templateBody": {
                    "type": "string"
                },
                "isRead": {
                    "type": "boolean"
                },
                "templateId": {
                    "type": "integer",
                    "format": "int32"
                },
                "senderId": {
                    "type": "string"
                },
                "body": {
                    "type": "string"
                },
                "isUserSent": {
                    "type": "boolean"
                },
                "headline": {
                    "type": "string"
                },
                "webFormFields": {
                    "type": "string"
                },
                "notice": {
                    "type": "string"
                },
                "withdrawnDate": {
                    "type": "string"
                },
                "emailPackageId": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Recipient"
                    }
                },
                "parentEmailId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "hasTrackingAccess": {
                    "type": "boolean"
                },
                "sender": {
                    "$ref": "#/definitions/UserBasic"
                },
                "deleted": {
                    "type": "boolean"
                },
                "trackingAccess": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrackingAccessRecipient"
                    }
                },
                "webFormId": {
                    "type": "string"
                },
                "darkModeStyle": {
                    "type": "string"
                },
                "bucket": {
                    "type": "string"
                },
                "actor": {
                    "$ref": "#/definitions/UserBasic"
                },
                "attachmentCount": {
                    "type": "string"
                },
                "emailFrom": {
                    "type": "string"
                },
                "expirationDate": {
                    "type": "string"
                },
                "fullHtmlBody": {
                    "type": "string"
                },
                "sharedMailboxId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "rawBody": {
                    "type": "string"
                },
                "watermark": {
                    "type": "string"
                },
                "package": {
                    "$ref": "#/definitions/Package"
                },
                "isPreview": {
                    "type": "boolean"
                },
                "modifiedDate": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "secureBody": {
                    "type": "boolean"
                },
                "dlpStatus": {
                    "type": "string"
                },
                "emailReturnReceipt": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EmailReturnRecipient"
                    }
                },
                "exists": {
                    "type": "boolean"
                },
                "error": {
                    "type": "string"
                },
                "htmlBody": {
                    "type": "string"
                }
            }
        },
        "Mails": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Mail1"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                }
            }
        },
        "MailCounters": {
            "type": "object",
            "properties": {
                "inbox": {
                    "type": "integer",
                    "format": "int32"
                },
                "outgoingError": {
                    "type": "integer",
                    "format": "int32"
                },
                "outgoing": {
                    "type": "integer",
                    "format": "int32"
                },
                "outgoingTransferring": {
                    "type": "integer",
                    "format": "int32"
                },
                "outgoingTransferringIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "trash": {
                    "type": "integer",
                    "format": "int32"
                },
                "inboxUnread": {
                    "type": "integer",
                    "format": "int32"
                },
                "outgoingQueued": {
                    "type": "integer",
                    "format": "int32"
                },
                "draft": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "MailWithdrawRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "description": "A list of email guids",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "ids"
            ]
        },
        "ErrorInteger": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Error message"
                },
                "failedIds": {
                    "type": "array",
                    "description": "List of failed IDs",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "field": {
                    "type": "string",
                    "description": "Error field"
                },
                "code": {
                    "type": "string",
                    "description": "Error code"
                }
            }
        },
        "BulkOperationInteger": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ErrorInteger"
                    }
                },
                "successIds": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            }
        },
        "SendMailSettingPutRequest": {
            "type": "object",
            "properties": {
                "trackingAccess": {
                    "type": "array",
                    "description": "List of tracking access' email",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                }
            }
        },
        "RecentObject": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "object id"
                },
                "lastAccessed": {
                    "type": "string"
                }
            },
            "required": [
                "id",
                "lastAccessed"
            ]
        },
        "RecentObjectsPostRequest": {
            "type": "object",
            "properties": {
                "objects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RecentObject"
                    }
                }
            },
            "required": [
                "objects"
            ]
        },
        "UserQuota": {
            "type": "object",
            "properties": {
                "send_quota_used": {
                    "type": "integer",
                    "format": "int32"
                },
                "folder_quota_used": {
                    "type": "integer",
                    "format": "int32"
                },
                "send_quota_allowed": {
                    "type": "integer",
                    "format": "int32"
                },
                "folder_quota_allowed": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "UserMePinsPostRequest": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "ids",
                "type"
            ]
        },
        "AdminUserImportError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "AdminUserImport": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AdminUserImportError"
                    }
                },
                "updated_users": {
                    "type": "integer",
                    "format": "int32"
                },
                "added_users": {
                    "type": "integer",
                    "format": "int32"
                },
                "failed_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "UserDistributionList": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "isDl": {
                    "type": "boolean"
                }
            }
        },
        "UserMeConcurrentChallenge": {
            "type": "object",
            "properties": {
                "userAgent": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                }
            }
        },
        "RequestFileToInboxPostRequest": {
            "type": "object",
            "properties": {
                "subject": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 998
                },
                "returnReceipts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "fileLimit": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                },
                "to": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "body": {
                    "type": "string"
                },
                "sharedMailboxId": {
                    "type": "string",
                    "description": "Shared Mailbox unique identifier. Search for result belongs to the Shared Mailbox."
                },
                "requireAuth": {
                    "type": "boolean"
                },
                "expire": {
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "to"
            ]
        },
        "RequestFileToFolderPostRequest": {
            "type": "object",
            "properties": {
                "subject": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 998
                },
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "to": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "body": {
                    "type": "string"
                },
                "requireAuth": {
                    "type": "boolean"
                },
                "actionId": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 2
                },
                "showToken": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 1
                },
                "expire": {
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "to"
            ]
        },
        "Mail2": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "body": {
                    "type": "string"
                },
                "parentEmailId": {
                    "type": "string"
                },
                "emailPackageId": {
                    "type": "string"
                },
                "senderId": {
                    "type": "string"
                },
                "sharedMailboxId": {
                    "type": "string"
                }
            }
        },
        "UserBasic1": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "RequestFileConfig": {
            "type": "object",
            "properties": {
                "excludedFileExtensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "RequestFileReplyPostRequest": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                }
            }
        },
        "Folder1": {
            "type": "object",
            "properties": {
                "secure": {
                    "type": "boolean"
                },
                "avStatus": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "isFavorite": {
                    "type": "boolean"
                },
                "maxFolderExpiration": {
                    "type": "string"
                },
                "isLdapGroupMember": {
                    "type": "boolean"
                },
                "parentId": {
                    "type": "string"
                },
                "pathIds": {
                    "type": "string"
                },
                "totalFilesCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "vendorDocName": {
                    "type": "string"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Member"
                    }
                },
                "deleted": {
                    "type": "boolean"
                },
                "permalink": {
                    "type": "string"
                },
                "isShared": {
                    "type": "boolean"
                },
                "isUnderMyFolder": {
                    "type": "boolean"
                },
                "totalMembersCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "source": {
                    "type": "integer",
                    "format": "int32"
                },
                "parent": {
                    "$ref": "#/definitions/Folder"
                },
                "permDeleted": {
                    "type": "boolean"
                },
                "isRoot": {
                    "type": "boolean"
                },
                "fileLifetime": {
                    "type": "integer",
                    "format": "int32"
                },
                "currentUserRole": {
                    "$ref": "#/definitions/Role"
                },
                "syncable": {
                    "type": "boolean"
                },
                "rootId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Permission"
                    }
                },
                "path": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "pushedFilesCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "modified": {
                    "type": "string"
                },
                "maxFileLifetime": {
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "type": "string"
                },
                "creator": {
                    "$ref": "#/definitions/UserBasic"
                },
                "dlpStatus": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "vendorDocId": {
                    "type": "string"
                },
                "totalFoldersCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "userId": {
                    "type": "string"
                },
                "expire": {
                    "type": "string"
                }
            }
        },
        "FolderQuota": {
            "type": "object",
            "properties": {
                "quota_allowance": {
                    "type": "integer",
                    "format": "int32"
                },
                "storage_used": {
                    "type": "integer",
                    "format": "int32"
                },
                "storage_available": {
                    "type": "integer",
                    "format": "int32"
                },
                "storage_quota": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "Members": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Member"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                }
            }
        },
        "FolderMemberPostRequest": {
            "type": "object",
            "properties": {
                "roleId": {
                    "type": "integer",
                    "format": "int32",
                    "description": ""
                },
                "emails": {
                    "type": "array",
                    "description": "List of new members' email",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "ldapGroupIds": {
                    "type": "array",
                    "description": "",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "notify": {
                    "type": "boolean",
                    "description": ""
                },
                "notifyFileAdded": {
                    "type": "boolean",
                    "description": ""
                },
                "userIds": {
                    "type": "array",
                    "description": "List of new members' id",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "roleId"
            ]
        },
        "ErrorString": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Error message"
                },
                "failedIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "field": {
                    "type": "string",
                    "description": "Error field"
                },
                "code": {
                    "type": "string",
                    "description": "Error code"
                }
            }
        },
        "FolderAddMembers": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ErrorString"
                    }
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Member"
                    }
                },
                "successIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "FoldersMetaData": {
            "type": "object",
            "properties": {
                "totalDeletedFoldersCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "total": {
                    "type": "integer",
                    "format": "int32"
                },
                "offset": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalDeletedFilesCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "Folders": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Folder1"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/FoldersMetaData"
                }
            }
        },
        "FolderUpdatePutRequest": {
            "type": "object",
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Indicates whether folder is secure. Only top level folders under user's root folder can be set to secure"
                },
                "description": {
                    "type": "string",
                    "description": "Folder description"
                },
                "applyFileLifetimeToFiles": {
                    "type": "boolean",
                    "description": "(optional) Apply file lifetime setting to existing files. Applicable when fileLifetime is set"
                },
                "syncable": {
                    "type": "boolean",
                    "description": "Indicates that folder is syncable. Can only be set at a top level folder"
                },
                "applyFileLifetimeToNested": {
                    "type": "boolean",
                    "description": "(optional) Apply file lifetime setting to nested folders. Applicable when fileLifetime is set"
                },
                "vendorDocName": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Folder name"
                },
                "fileLifetime": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "description": "The file's lifetime in the folder"
                },
                "vendorDocId": {
                    "type": "string"
                },
                "expire": {
                    "type": "string",
                    "description": "The folder expiration date. Applicable to top level folders"
                }
            }
        },
        "FolderCreatePostRequest": {
            "type": "object",
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Indicates whether folder is secure. Only top level folders under user's root folder can be set to secure"
                },
                "description": {
                    "type": "string",
                    "description": "Folder description"
                },
                "isFolderUpload": {
                    "type": "boolean",
                    "description": "Indicate whether is folder upload children (for internal use only)"
                },
                "syncable": {
                    "type": "boolean",
                    "description": "Indicates that folder is syncable. Can only be set at a top level folder"
                },
                "vendorDocName": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Folder name"
                },
                "fileLifetime": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "description": "The file's lifetime in the folder"
                },
                "rename": {
                    "type": "boolean"
                },
                "vendorDocId": {
                    "type": "string"
                },
                "expire": {
                    "type": "string",
                    "description": "The folder expiration date. Applicable to top level folders"
                }
            },
            "required": [
                "name"
            ]
        },
        "ActivityUser": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "profileIcon": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "ActivityList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Activity"
                    }
                }
            }
        },
        "AdminFolderPutRequest": {
            "type": "object",
            "properties": {
                "applyToNestedFiles": {
                    "type": "boolean",
                    "description": "Apply expire to files under child folders"
                },
                "ids": {
                    "type": "array",
                    "description": "List of folder object ID to be updated",
                    "items": {
                        "type": "string"
                    }
                },
                "applyTo": {
                    "type": "string",
                    "enum": [
                        "folders_only",
                        "files_only",
                        "folders_and_files"
                    ],
                    "description": "Apply expire to folder only / files only / folder and files"
                },
                "expire": {
                    "type": "string",
                    "description": "Expire date"
                }
            },
            "required": [
                "ids"
            ]
        },
        "FolderChildrenFiles": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/File"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                }
            }
        },
        "FolderPermissionsRequest": {
            "type": "object",
            "properties": {
                "name:contains": {
                    "type": "string",
                    "description": "Action name. Search for result that contains specified characters in this parameter."
                },
                "with": {
                    "type": "string"
                },
                "returnEntity": {
                    "type": "boolean"
                },
                "mode": {
                    "type": "string",
                    "enum": [
                        "compact",
                        "full_no_links",
                        "full_with_links",
                        "full"
                    ]
                },
                "name": {
                    "type": "string",
                    "enum": [
                        "view",
                        "download",
                        "comment_view",
                        "comment_add",
                        "comment_edit",
                        "comment_reply",
                        "comment_delete",
                        "task_view",
                        "task_update_status",
                        "notification_subscribe",
                        "notification_unsubscribe",
                        "properties_view",
                        "file_send",
                        "tray_add",
                        "favorite_add",
                        "file_copy",
                        "mobile_sync",
                        "file_preview_send",
                        "folder_copy",
                        "message_send",
                        "task_add",
                        "task_edit",
                        "task_delete",
                        "user_view",
                        "children_view_deleted",
                        "folder_add",
                        "file_add",
                        "folder_delete",
                        "lock",
                        "unlock",
                        "file_recover",
                        "version_view",
                        "version_create",
                        "version_promote",
                        "version_delete",
                        "file_delete",
                        "file_edit",
                        "properties_edit",
                        "user_add",
                        "user_edit",
                        "user_remove",
                        "rename",
                        "folder_recover",
                        "folder_permanent_delete",
                        "sync_enable",
                        "sync_disable",
                        "file_permanent_delete",
                        "user_add_external",
                        "user_edit_external",
                        "user_remove_external",
                        "mobile_sync_push",
                        "mobile_sync_unpush",
                        "folder_move",
                        "file_move",
                        "top_shared_folder_delete"
                    ],
                    "description": "Action name"
                },
                "id:in": {
                    "type": "array",
                    "description": "Unique action identifier. Search for results that contain any of specified values of this parameter.",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "actionId": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "description": "Unique action identifier"
                }
            }
        },
        "Logout": {
            "type": "object",
            "properties": {
                "redirectUri": {
                    "type": "string"
                }
            }
        },
        "FileMembersPostRequest": {
            "type": "object",
            "properties": {
                "roleId": {
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        8,
                        9
                    ],
                    "description": ""
                },
                "message": {
                    "type": "string",
                    "description": ""
                },
                "emails": {
                    "type": "array",
                    "description": "List of new members' email",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "notify": {
                    "type": "boolean",
                    "description": ""
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userIds": {
                    "type": "array",
                    "description": "List of new members' id recommended request size <= 100",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "ids",
                "roleId"
            ]
        },
        "FileAddMembers": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ErrorString"
                    }
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Member"
                    }
                },
                "successIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "FilePreviewSupport": {
            "type": "object",
            "properties": {
                "supportedIds": {
                    "type": "array",
                    "description": "List of supported IDs",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "AdminFilePutRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "description": "List of file object ID to be updated",
                    "items": {
                        "type": "string"
                    }
                },
                "expire": {
                    "type": "string",
                    "description": "Expire date"
                }
            },
            "required": [
                "ids"
            ]
        },
        "Files": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/File"
                    }
                }
            }
        },
        "AdminFileRescan": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string"
                }
            }
        },
        "FileLockPostRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "string",
                    "description": "List of file object ID to be locked"
                }
            }
        },
        "BulkOperationLockFile": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ErrorString"
                    }
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/File"
                    }
                },
                "successIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "FileUpdateRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "File name"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace the file if file with the same name exist"
                },
                "expire": {
                    "type": "string",
                    "description": "The file expiration date"
                }
            }
        },
        "FileMovePostBodyRequest": {
            "type": "object",
            "properties": {
                "destinationFolderId": {
                    "type": "string"
                },
                "ids": {
                    "type": "string",
                    "description": "The object_ids to move"
                },
                "replace": {
                    "type": "boolean"
                }
            },
            "required": [
                "destinationFolderId"
            ]
        },
        "FileCopyPostBodyRequest": {
            "type": "object",
            "properties": {
                "destinationFolderId": {
                    "type": "string"
                },
                "ids": {
                    "type": "string",
                    "description": "The object_ids to copy"
                },
                "replace": {
                    "type": "boolean"
                }
            },
            "required": [
                "destinationFolderId"
            ]
        },
        "ExternalDL": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "ExternalDLs": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalDL"
                    }
                }
            }
        },
        "ExternalDLUpdateRequest": {
            "type": "object",
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "email"
                    }
                }
            },
            "required": [
                "emails"
            ]
        },
        "Sources": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Source"
                    }
                }
            }
        },
        "Site": {
            "type": "object",
            "properties": {
                "ecmTypeId": {
                    "type": "string"
                },
                "isAdded": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "repository": {
                    "type": "string"
                }
            }
        },
        "SearchSharePointSitesResult": {
            "type": "object",
            "properties": {
                "sites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Site"
                    }
                }
            }
        },
        "MobileSyncList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MobileSync"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                }
            }
        },
        "FavoriteOpenAPI2": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "objectId": {
                    "type": "string",
                    "format": "uuid"
                },
                "object": {
                    "$ref": "#/definitions/Folder1"
                }
            }
        },
        "FavoriteListOpenAPI2": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FavoriteOpenAPI2"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                }
            }
        },
        "SharedMailbox": {
            "type": "object",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserBasic"
                    }
                },
                "id": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserBasic"
                },
                "active": {
                    "type": "boolean"
                }
            }
        },
        "SharedMailboxList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SharedMailbox"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                }
            }
        },
        "SharedMailboxPostRequest": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string",
                    "description": "shared mailbox user id"
                },
                "retainPermissionToSharedData": {
                    "type": "boolean"
                },
                "deleteUnsharedData": {
                    "type": "boolean"
                },
                "memberIds": {
                    "type": "array",
                    "description": "List of member ids recommended request size <= 100",
                    "items": {
                        "type": "string"
                    }
                },
                "retainData": {
                    "type": "boolean"
                },
                "retainToUser": {
                    "type": "string"
                },
                "remoteWipe": {
                    "type": "boolean"
                }
            },
            "required": [
                "memberIds",
                "userId"
            ]
        },
        "SharedMailboxPatchRequest": {
            "type": "object",
            "properties": {
                "memberIds": {
                    "type": "array",
                    "description": "List of member ids recommended request size <= 100",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "memberIds"
            ]
        },
        "SharedMailboxMemberStatusPatchRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                }
            },
            "required": [
                "active",
                "id"
            ]
        },
        "SharedMailboxStatusPatchRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "shared box status",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SharedMailboxMemberStatusPatchRequest"
                    }
                }
            },
            "required": [
                "data"
            ]
        },
        "MailIdCounters": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "counters": {
                    "$ref": "#/definitions/MailCounters"
                }
            }
        },
        "MailCountersList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MailIdCounters"
                    }
                }
            }
        },
        "SendOption": {
            "type": "object",
            "properties": {
                "ACL": {
                    "type": "integer",
                    "format": "int32"
                },
                "linkExpiry": {
                    "type": "boolean"
                }
            }
        },
        "SharedMailboxSetting": {
            "type": "object",
            "properties": {
                "ACL": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "includeFingerprintDefault": {
                    "type": "boolean"
                },
                "excludedFileExtensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "defaultCountryCode": {
                    "type": "string"
                },
                "fileFilterCustomFileTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sendExternal": {
                    "type": "boolean"
                },
                "defaultForm": {
                    "type": "string"
                },
                "fileFilterExclusionGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "watermarkPreview": {
                    "type": "string"
                },
                "returnReceiptDefault": {
                    "type": "boolean"
                },
                "selfCopyDefault": {
                    "type": "boolean"
                },
                "aclDefault": {
                    "type": "string"
                },
                "watermarkEnabled": {
                    "type": "boolean"
                },
                "includeFingerprint": {
                    "type": "string"
                },
                "zipLimit": {
                    "type": "integer",
                    "format": "int32"
                },
                "selfCopy": {
                    "type": "string"
                },
                "mailExpirationNotification": {
                    "type": "string"
                },
                "secureMessageBody": {
                    "type": "string"
                },
                "maxLinkExpiration": {
                    "type": "integer",
                    "format": "int32"
                },
                "secureMessageBodyDefault": {
                    "type": "boolean"
                },
                "returnReceipt": {
                    "type": "string"
                },
                "sendFileLimit": {
                    "type": "integer",
                    "format": "int32"
                },
                "defaultLinkExpiry": {
                    "type": "integer",
                    "format": "int32"
                },
                "sendOptionEnabled": {
                    "$ref": "#/definitions/SendOption"
                }
            }
        },
        "WebFormList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WebForm"
                    }
                }
            }
        },
        "CardAction": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "CardHost": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "id",
                "name"
            ]
        },
        "Card": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CardAction"
                    }
                },
                "host": {
                    "$ref": "#/definitions/CardHost"
                },
                "data": {
                    "type": "object"
                },
                "severity": {
                    "type": "string"
                }
            },
            "required": [
                "description",
                "message",
                "severity",
                "type"
            ]
        },
        "CardActionPostRequest": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        "retry",
                        "delete"
                    ],
                    "description": "Action to take (e.g. dismiss, retry, delete)"
                },
                "storageType": {
                    "type": "string",
                    "description": "Storage type for files (either 'user_files' or 'replication_files')"
                },
                "hostId": {
                    "type": "string",
                    "description": "Host ID"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "content_encryption",
                        "email_json_migration",
                        "event_log_partitioning_migration",
                        "system_security_scanning",
                        "events_table_monitor",
                        "appadmin_db",
                        "sysadmin_db",
                        "sysadmin_hosts"
                    ],
                    "description": "Type of card to retrieve. Available card type(s): content_encryption,email_json_migration,event_log_partitioning_migration,system_security_scanning,events_table_monitor,appadmin_db,sysadmin_db,sysadmin_hosts"
                },
                "emailId": {
                    "type": "array",
                    "description": "List of Email IDs to retry migrating to JSON format",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "volume": {
                    "type": "string",
                    "description": "Volume for files"
                },
                "fileId": {
                    "type": "array",
                    "description": "List of File IDs to retry encryption",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "required": [
                "action",
                "type"
            ]
        },
        "UserGeneratedSshPublicKeyKey": {
            "type": "object",
            "properties": {
                "privateKey": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string"
                }
            }
        },
        "UserSshPublicKey": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "publicKey": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                },
                "userId": {
                    "type": "string"
                },
                "adminActive": {
                    "type": "boolean"
                }
            }
        },
        "UserSshPublicKeyList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserSshPublicKey"
                    }
                }
            }
        },
        "UserSshPublicKey1": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                },
                "adminActive": {
                    "type": "boolean"
                },
                "userId": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string"
                },
                "deleted": {
                    "type": "boolean"
                }
            }
        },
        "AdminUserSshPublicKeyList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserSshPublicKey1"
                    }
                }
            }
        },
        "UserSshPublicKeysPostCreateRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "description": "The name of SSH Public key"
                },
                "publicKey": {
                    "type": "string",
                    "description": "SSH Public key"
                }
            },
            "required": [
                "name",
                "publicKey"
            ]
        },
        "UserSshPublicKeysPostGenerateRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "description": "The name of SSH Public key"
                },
                "passphrase": {
                    "type": "string",
                    "description": "The passphrase of SSH Public key"
                }
            },
            "required": [
                "name"
            ]
        },
        "ContactList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Contact"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                }
            }
        },
        "ContactEmail": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                }
            },
            "required": [
                "email"
            ]
        },
        "ContactCreate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/ContactEmail"
                    }
                }
            },
            "required": [
                "name"
            ]
        },
        "GroupEmail": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                }
            },
            "required": [
                "email"
            ]
        },
        "GroupCreate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/GroupEmail"
                    }
                }
            },
            "required": [
                "items",
                "name"
            ]
        },
        "ClientEventLogsPostRequest": {
            "type": "object",
            "properties": {
                "singleLine": {
                    "type": "string",
                    "description": "event singleline"
                },
                "eventName": {
                    "type": "string",
                    "description": "Event name of the log"
                },
                "successful": {
                    "type": "boolean",
                    "description": "success/failed"
                },
                "created": {
                    "type": "integer",
                    "format": "int32",
                    "description": "when this event created on client"
                },
                "eventId": {
                    "type": "string",
                    "description": "event identifier on client side"
                },
                "data": {
                    "type": "object",
                    "description": "event details"
                }
            },
            "required": [
                "data",
                "eventId",
                "eventName",
                "singleLine",
                "successful"
            ]
        },
        "BulkClientEventLogsPostRequest": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ClientEventLogsPostRequest"
                    }
                }
            }
        },
        "ClientCustomEventLog": {
            "type": "object",
            "properties": {
                "failedIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "successIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "SearchResult": {
            "type": "object",
            "properties": {
                "totalFiles": {
                    "type": "integer",
                    "format": "int32"
                },
                "emailSuggestions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "folders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Folder1"
                    }
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/File"
                    }
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Mail"
                    }
                },
                "totalFolders": {
                    "type": "integer",
                    "format": "int32"
                },
                "totalEmails": {
                    "type": "integer",
                    "format": "int32"
                },
                "fileSuggestions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "AccessVerificationField": {
            "type": "object",
            "properties": {
                "maxlength": {
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mandatory": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "AccessVerificationForm": {
            "type": "object",
            "properties": {
                "assetClassId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessVerificationField"
                    }
                }
            }
        },
        "AccessVerificationData": {
            "type": "object",
            "properties": {
                "forms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessVerificationForm"
                    }
                }
            }
        },
        "AccessVerification": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/AccessVerificationData"
                }
            }
        },
        "AccessVerificationApprovalPostRequest": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string",
                    "maxLength": 255
                },
                "approvalStatus": {
                    "type": "string",
                    "enum": [
                        "approved",
                        "denied"
                    ]
                }
            },
            "required": [
                "approvalStatus"
            ]
        },
        "AccessVerificationResponse": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fieldId": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "required": [
                "fieldId"
            ]
        },
        "AccessVerificationForm1": {
            "type": "object",
            "properties": {
                "assetClassId": {
                    "type": "string",
                    "format": "uuid"
                },
                "responses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessVerificationResponse"
                    }
                },
                "formId": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "required": [
                "assetClassId",
                "formId",
                "responses"
            ]
        },
        "AccessVerificationPostRequest": {
            "type": "object",
            "properties": {
                "forms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessVerificationForm1"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "submitted",
                        "cancelled"
                    ]
                }
            },
            "required": [
                "status"
            ]
        },
        "DownloadLink": {
            "type": "object",
            "properties": {
                "downloadLinks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "AccessVerificationRequirementPostRequest": {
            "type": "object",
            "properties": {
                "accessVerificationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "responses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessVerificationResponse"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "submitted",
                        "cancelled"
                    ]
                }
            },
            "required": [
                "accessVerificationIds",
                "status"
            ]
        },
        "VerifiedAccessVerification": {
            "type": "object",
            "properties": {
                "verifiedAccessVerifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VerifiedAccessVerificationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/VerifiedAccessVerification"
                }
            }
        },
        "ScimMeta": {
            "type": "object",
            "properties": {
                "lastModified": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "resourceType": {
                    "type": "string"
                }
            }
        },
        "ScimMultiValue": {
            "type": "object",
            "properties": {
                "primary": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "ScimUser": {
            "type": "object",
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/ScimMeta"
                },
                "userName": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "userType": {
                    "type": "string"
                },
                "preferredLanguage": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ScimMultiValue"
                    }
                },
                "phoneNumbers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ScimMultiValue"
                    }
                },
                "photos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ScimMultiValue"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ScimMultiValue"
                    }
                }
            }
        },
        "ScimUsers": {
            "type": "object",
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "totalResults": {
                    "type": "integer",
                    "format": "int32"
                },
                "itemsPerPage": {
                    "type": "integer",
                    "format": "int32"
                },
                "startIndex": {
                    "type": "integer",
                    "format": "int32"
                },
                "Resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ScimUser"
                    }
                }
            }
        },
        "ScimMultiValueMobile": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string",
                    "pattern": "^\\+([0-9]+\\-[0-9]+)$|^$"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "mobile"
                    ]
                }
            },
            "required": [
                "type",
                "value"
            ]
        },
        "ScimMultiValue1": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string",
                    "pattern": "^[A-Za-z0-9 _-]+$"
                }
            }
        },
        "ScimUsersPostRequest": {
            "type": "object",
            "properties": {
                "userName": {
                    "type": "string",
                    "format": "email"
                },
                "displayName": {
                    "type": "string",
                    "pattern": "^[^<>]+$"
                },
                "phoneNumbers": {
                    "type": "array",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ScimMultiValueMobile"
                    }
                },
                "userType": {
                    "type": "string",
                    "pattern": "^[A-Za-z0-9_-]+$"
                },
                "schemas": {
                    "type": "array",
                    "enum": [
                        "urn:ietf:params:scim:schemas:core:2.0:User"
                    ],
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "notify": {
                    "type": "boolean",
                    "default": false
                },
                "roles": {
                    "type": "array",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ScimMultiValue1"
                    }
                },
                "userMustChange": {
                    "type": "boolean",
                    "default": false
                },
                "password": {
                    "type": "string"
                }
            },
            "required": [
                "schemas",
                "userName"
            ]
        },
        "DataRetentionOption": {
            "type": "object",
            "properties": {
                "deleteUnsharedData": {
                    "type": "boolean",
                    "default": null
                },
                "remoteWipe": {
                    "type": "boolean",
                    "default": false
                },
                "retainToUser": {
                    "type": "string",
                    "default": false
                },
                "retainPermissionToSharedData": {
                    "type": "boolean",
                    "default": false
                },
                "retainData": {
                    "type": "boolean",
                    "default": null
                }
            }
        },
        "ScimUsersPutRequest": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string",
                    "pattern": "^[^<>]+$"
                },
                "phoneNumbers": {
                    "type": "array",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ScimMultiValueMobile"
                    }
                },
                "userType": {
                    "type": "string",
                    "pattern": "^[A-Za-z0-9_-]+$"
                },
                "schemas": {
                    "type": "array",
                    "enum": [
                        "urn:ietf:params:scim:schemas:core:2.0:User"
                    ],
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "userTypeDemotionOptions": {
                    "$ref": "#/definitions/DataRetentionOption"
                },
                "roles": {
                    "type": "array",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ScimMultiValue1"
                    }
                },
                "active": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string"
                }
            },
            "required": [
                "schemas"
            ]
        }
    }
}
